<html>
<head><meta http-equiv="content-type" content="text/html;charset=utf-8">
<title>A Dictionary of APL</title>
<link href="adoc.css" rel=stylesheet>
</head>

<body>

<br>

<table width=520 align=center><tr><td>

<p align=center><font size=+2>A Dictionary of APL</font><br>
<b>Kenneth E. Iverson</b>
<br>&nbsp;</p>



<a name="ack"></a>
<p><b>Acknowledgments</b></p>

<p>I am indebted to numerous colleagues for minor corrections
and major ideas arising from their reviews of various
drafts of the mss., chief among them being R. Pesch,
E.E. McDonnell, R. Hui, D.L. Forkes, J.A. Cramer, K.B.
Iverson, P. Cooper, R.H. Chamberlain, L.J. Dickey, and J.
Sansom.</p>

<p>&copy; 1987, by Kenneth E. Iverson. 
Reproduced with permission from the Iverson estate.</p>

<br><hr>


<a name="intro"></a>
<p>APL is a formal, imperative language. 
Because it is imperative,
a sentence may be called an <i>instruction</i>, 
and may be <i>executed</i> to produce a <i>result</i>. 
In illustrations used here an
instruction will be indented, 
and the result of its execution
will be shown on the following line without indentation.
Thus:</p>

<pre>
   3+4
7
   2×(3+4)
14
</pre>

<p>Because it is formal and unambiguous, 
APL can be executed mechanically 
by a machine called a <i>computer</i> or,
strictly speaking, an <i>APL computer</i>, 
or <i>APL system</i>. 
For this reason it is also 
called a <i>programming language</i>, 
a phrase from which its name derives. 
Because it shares the analytic properties 
of mathematical notation, 
it is also called 
an <i>analytical</i> programming language.</p>

<p>Like any living language, APL has dialects, resulting
in part from evolution that has rendered certain constructs
obsolete, but also from the limitations and special characteristics
of the many different computers on which APL
systems are implemented. Although this introduction includes
a brief discussion of dialects, the reader may find
it necessary to consult manuals for specific systems, or the
APL Standard promulgated by the International Standards Organization 
<acronym title="International Standards Organization. 
Standard for Programming Language APL, 
ISO TC97/SC5 WG 6 N33, 1986.">[1]</acronym>.</p>

<p>APL originated in an attempt to provide consistent notation
for the teaching and analysis of topics related to the
application of computers, and developed through its application
in a variety of topics, and through its implementation
in computer systems. Extensive discussions of the history
of the language may be found in <i>The Design of APL</i>
<acronym title="Falkoff, A.D., and K.E. Iverson, “The Design of APL”, 
IBM Journal of Research and Development, Vol.17, No. 4, July 1973. 
(Republished in [16]).">[2]</acronym>
and <i>The Evolution of APL</i>
<acronym title="Falkoff, A.D., and K.E. Iverson, 
The Evolution of APL, SIGPLAN Notices 13, 
ACM, August 1978. (Republished in [16]).">[3]</acronym>, 
and in the publications cited
therein.</p>

<p>A dictionary should not be read as an introduction to
a language, but should rather be consulted in conjunction
with other material that uses the language in some context
of interest to the reader. Even the general section on
grammar, which may be intelligible even to the beginner,
should perhaps be studied only after a certain amount of
other exposure to the language.</p>

<p>On the other hand, a dictionary should not be used only
to find the meanings of individual words, but should also
be studied to gain an overall view of the language. In particular,
the grammar may be profitably reviewed again and
again in the light of increased knowledge of the language,
and the study of groups of related verbs and adverbs can
reveal important relationships otherwise easily overlooked.
<br>&nbsp;</p>



<a name="1"></a>
<p><b>I: Letters and Words</b></p>

<p>In addition to both cases of the letters of some <i>native</i>
alphabet such as English (used for names) and the ten decimal
digits (used in numbers and in names), the APL alphabet
includes six Greek letters, fifty-four graphic symbols,
and about twenty composite symbols formed by superposing
a pair of graphic symbols. Nearly all of the graphic
symbols occur (in at least one orientation) in some table
of commonly-used symbols in English dictionaries, such as
the Table of Symbols and Signs in 
<i>The American Heritage Dictionary</i>
<acronym title="The American Heritage Dictionary of the English Language, 
Houghton Mifflin Company.">[4]</acronym>. 
At least half are familiar from their use in
English and in arithmetic.</p>

<p>On most APL systems, the name<tt> ⎕av </tt>denotes a list
whose elements include the alphabet. Many systems print
the two English alphabets in other than lowercase and uppercase
italics, often using uppercase and uppercase underscored.</p>

<p>Every &ldquo;primitive&rdquo; verb and adverb 
(i.e., those defined in the dictionary) 
is formed from a single graphic, composite
symbol, or Greek letter. 
Consequently, symbols do not
conflict with the choice of names for pronouns, as do the
<i>reserved words</i> 
(names of primitives represented by letters
of the English alphabet) 
commonly used in programming languages.</p>

<p>In any use of symbols it is convenient to have pronounceable
names for them. Because of the many different
uses commonly made of the same symbol in different endeavours,
the best-known names usually reflect a particular
use of the symbol rather than a name for the symbol itself.
For example, in the cited table from
<acronym title="The American Heritage Dictionary of the English Language, 
Houghton Mifflin Company.">[4]</acronym>,
&ldquo;resistivity&rdquo;, and
&ldquo;multiplied by&rdquo; are given 
for<tt> ⍴ </tt>and<tt> ×</tt>&nbsp;,<tt> </tt>
rather than &ldquo;Greek rho&rdquo; 
and &ldquo;St. Andrew&rsquo;s cross&rdquo;.</p>

<p>In this dictionary, we attempt to provide both a name
for the symbol (in <a href="APLDictionary1.htm#tab1">Table 1: Alphabet</a>) 
and for its general
use in APL (Sections IV-VI). 
<a href="APLDictionary1.htm#tab4">Table 4</a> provides synonyms
for possible use in particular contexts. 
The three columns of <a href="APLDictionary1.htm#tab1">Table 1</a> provide the APL symbol, 
a name for the symbol,
and a transliteration scheme for use with the ASCII character set 
<acronym title="Berry, P.C., SHARP APL Pocket Reference, Toronto, 
I.P. Sharp Associates, 1984. 
Publication 0199 8409 E3 R1.">[5]</acronym>
widely provided on computer terminal devices.
The last twenty-five APL symbols (beginning with<tt> ⍝</tt>)<tt> </tt>
are called composite symbols because they are commonly entered
by superposing two simpler symbols (as in<tt> ∩ </tt>with<tt> ∘ </tt>
for<tt> ⍝</tt>),<tt> </tt>
and are often named by the pair composing them
(as in circle-bar for<tt> ⊖</tt>).</p>

<p>A student of any language should be alert to, and exploit,
clues provided by knowledge of other languages, as
well as clues provided by the appearance of the symbols
themselves. For example:</p>

<table>
<tr><td valign=top nowrap>&#149;&nbsp;</td><td>
The appearance of the symbols<tt> ⌊ </tt>and<tt> ⌈ </tt>
suggests their use for <i>minimum</i> and <i>maximum</i>, 
and the similarity of<tt> ⌊ </tt>to the letter L suggests 
&ldquo;lesser of&rdquo;; the pair<tt> ↑ </tt>and<tt> ↓ </tt>
are used for <i>take</i> and <i>drop</i>.
 </td></tr>
<tr><td valign=top>&#149;&nbsp;</td><td>
Greek-English correspondences are also significant, as
in<tt> ⍳ </tt>for <i>integers</i><tt> </tt>(<tt>⍳4</tt>), 
and in<tt> ⍴ </tt>
for <i>r</i>epetition<tt> </tt>(<tt>3⍴4</tt>)<tt> </tt>
or <i>r</i>eshape<tt> </tt>(<tt>2&nbsp;3⍴⍳6</tt>).
 </td></tr>
<tr><td valign=top>&#149;&nbsp;</td><td>
<tt>⊥ </tt>is used for <i>base-value</i> 
(as in<tt> 10⊥1 8 6 7 ←→ 1867</tt>)<tt> </tt>
because its shape suggests a base, and<tt> ⊤ </tt>is
used for the inverse function.
 </td></tr>
<tr><td valign=top>&#149;&nbsp;</td><td>
<tt>∨ </tt>is used for <i>or</i> 
because v is the initial letter of the
corresponding Latin <i>vel</i>, 
and<tt> ∧ </tt>is used for and because
of its graphic relationship to<tt> ∨</tt>&nbsp;.
 </td></tr>
</table>

<p>Words are formed by scanning a sequence of letters
of the APL alphabet from left to right according to the
following rules:</p>

<table>
<tr><td valign=top nowrap>1.&nbsp;</td><td>
Quotes are treated much as in English: everything between
an opening quote and a closing quote forms a
single word. However, a pair of adjacent quotes following
an opening quote represents the quote character
itself, and does not act as a closing quote;<tt> 'can''t' </tt>
is the five-character word commonly used as an abbreviation
of the six-letter word<tt> 'cannot'</tt>&nbsp;.<tt> </tt>
The remaining rules are used after applying the rule for quotes.
 </td></tr>
<tr><td valign=top nowrap>2.&nbsp;</td><td>
A <i>delimiter</i> terminates (and is not included in) any
word that precedes it.
 </td></tr>
<tr><td valign=top nowrap>3.&nbsp;</td><td>
Every letter that is neither a macron<tt> </tt>(<tt>¯</tt>), 
dot<tt> </tt>(<tt>.</tt>), quad<tt> </tt>(<tt>⎕</tt>), 
space<tt> </tt>(<tt> </tt>), digit, nor letter of the native alphabet,
is a one-letter word, and also serves as a delimiter.
 </td></tr>
<tr><td valign=top nowrap>4.&nbsp;</td><td>
The space is a delimiter unless it falls between two
<i>numbers</i>, that is, words that begin with a digit or a
macron, or with a dot followed by a digit.
 </td></tr>
</table>

<p>Word-formation is defined formally by the 
function<tt> ⊥ </tt>in <a href="APLDictionary1.htm#base">Section IV</a>.</p>

<p>Any of the words<tt> ⍺</tt>&nbsp;,<tt> </tt>
<tt> ⍵</tt>&nbsp;,<tt> </tt>
<tt> →</tt>&nbsp;,<tt> </tt> 
and<tt> $</tt>&nbsp;,<tt> </tt>
or a word that begins
with the symbol<tt> ⎕ </tt>or a letter of the native alphabet and
continues with further letters, digits, macrons or dots is a
name, and may be assigned a value by means of a 
copula<tt> </tt>(<tt>←</tt>)<tt> </tt>as discussed 
in the section on grammar.</p>

<p>A word that is not a name is called a <i>token</i>. 
A token is either meaningless or has a fixed referent. 
For example,
the tokens<tt> 3.14 </tt>and<tt> 314e¯2 </tt>
and<tt> 2j3 </tt>are meaningful, 
but<tt> 3..14 </tt>and<tt> ¯¯2 </tt>and<tt> 'pi </tt>
and<tt> 2k3 </tt>are not.</p>

<p>A meaningful numeric token may be a list formed of
two or more numbers separated by spaces, 
where a number may be a <i>real number</i> 
or a <i>complex number</i> formed by two
real numbers separated by a<tt> j</tt>&nbsp;.</p>

<p>A <i>real number</i> is either <i>simple</i> or 
an <i>exponential</i> number
formed from two simple numbers separated 
by an<tt> e</tt>&nbsp;.<tt> </tt>
A simple number may be formed of 
one or two macrons (representing infinity and minus infinity), 
or contain at least one
digit and at most one dot and one macron (which denotes
a negative number and must be in the leading position).
<br>&nbsp;</p>



<a name="2"></a>
<p><b>II: Grammar</b></p>

<p>APL has six grammatical elements:</p>

<table>
<tr><td valign=top nowrap>1.&nbsp;</td><td>
<b>Nouns</b>, such as the <i>numbers</i><tt> 3 </tt>
and<tt> 5.6</tt>&nbsp;,<tt> </tt><i>alphabetic
characters</i> or <i>literals</i> 
such as<tt> '+' </tt>and<tt> 'A' </tt>
and<tt> 'a'</tt>&nbsp;.
 <br>&nbsp; </td></tr>
<tr><td valign=top nowrap>2.&nbsp;</td><td>
<b>Verbs</b>, such as<tt> + </tt>(addition) 
and<tt> | </tt>(magnitude) that act
upon nouns to produce results that are also nouns.
The nouns to which a particular verb applies are called
its <i>arguments</i> 
(a word adopted in its sense of <i>theme</i>,
or <i>subject</i>). 
A verb may have two distinct (but usually
related) meanings according to whether it is applied
to one argument (to its right) or two arguments (to its
left and right). For example:

<pre>
   2÷5                    ÷4
.4                     .25
</pre></td></tr>
<tr><td valign=top nowrap>3.&nbsp;</td><td>
<b>Adverbs</b>, such as<tt> /</tt>&nbsp;,<tt> </tt>
that act upon verbs or nouns. 
For example,<tt> +/ </tt>is a (<i>derived</i>) 
verb called <i>plus across</i> that
sums any list of numbers to which it is applied, 
and<tt> ×/ </tt>is a verb that yields 
the product across all elements of a list.<br><br>

When an adverb applies to a noun rather than to a verb
(as in<nobr><tt> 1 0 2 / </tt></nobr>to produce 
a &ldquo;selection&rdquo; verb so 
that<nobr><tt> 1 0 2 / 5 8 7 </tt></nobr>
yields<tt> 5&nbsp;7&nbsp;7</tt>)<tt> </tt>
it might well be called an <i>adjective</i>. 
However, since such production of verbs
from nouns is (in English) more commonly performed
by a suffix rather than by an adjective (as in deify,
reify, and nitrify), 
we will use the term <i>adverb</i> for all cases.
 <br>&nbsp;</td></tr>
<tr><td valign=top nowrap>4.&nbsp;</td><td>
<b>Conjunctions</b>, such as<tt> ⍤ </tt>
and<tt> ¨</tt>&nbsp;,<tt> </tt> 
which apply to two arguments, as<tt> ⌽⍤⍉ </tt>
(reverse <i>and</i> transpose). 
The arguments of a conjunction may be either verbs 
(as in the examples above) 
or nouns (as in<tt>  10¨⍟</tt>&nbsp;,<tt> </tt>
meaning base-ten logarithm).
 <br>&nbsp;</td></tr>
<tr><td valign=top nowrap>5.&nbsp;</td><td>
A <b>copula</b>, denoted by the 
arrow<tt> ←</tt>&nbsp;,<tt> </tt>
and used to assign a name to a noun, verb, 
adverb, or conjunction.  For example:

<pre>
   area←4×8
   3+area
35
   sum←+/
   sum 2 3 4
9
</pre>

The arrow plays the same role as the copulas &ldquo;is&rdquo; 
and &ldquo;are&rdquo; in English; 
it is usually read as &ldquo;is&rdquo;, 
as in &ldquo;area is four times eight&rdquo; 
for<tt> area←4×8</tt>&nbsp;,<tt> </tt>
and &ldquo;(the verb) sum is plus across&rdquo; 
for<tt> sum←+/</tt>&nbsp;. <br><br>

A name assigned to a noun will be called a <i>pronoun</i>,
and one assigned to a verb may be called a <i>proverb</i>
(pronounced with a long o as in &ldquo;pronoun&rdquo; 
to distinguish it from the existing English word).
 <br>&nbsp;</td></tr>
<tr><td valign=top nowrap>6.&nbsp;</td><td>
<b>Punctuation</b>, provided by paired parentheses that
specify the sequence of execution just 
as they do in elementary algebra. 
Sentences must appear on separate lines, 
and no punctuation is used to separate them.
 </td></tr>
</table>


<a name="2a"></a>
<p><b>A. Nouns</b></p>

<p>Nouns may be classified in four independent ways: numeric
or literal; token or pronoun; open or boxed; arrays of
various ranks. Arrays of 
ranks<tt> 0</tt>&nbsp;,<tt> 1</tt>&nbsp;,<tt> </tt>
and<tt> 2 </tt>have the special
names, <i>item</i>, <i>list</i>, and <i>table</i>, 
or, alternatively (in mathematics)
<i>scalar</i>, <i>vector</i>, and <i>matrix</i>. 
The four classifications are elaborated below.</p>

<a name="2a1"></a>
<p><b>Numeric and literal</b>. Numbers are written 
as<tt> 2 </tt>and<tt> 2.3 </tt>
and<tt> 23e2 </tt>(for<tt> 2300</tt>)<tt> </tt>
and<tt> 2j5 </tt>(for a complex number),
and a negative number has a leading macron, 
as in<tt> ¯3.2</tt>&nbsp;;<tt> </tt>
literals are enclosed in quotes, 
as<tt> 'A' </tt>and<tt> 'a' </tt>and<tt> '+'</tt>&nbsp;.</p>

<a name="2a2"></a>
<p><b>Tokens and pronouns</b>. A name that has been assigned to
a noun will be called a <i>pronoun</i>. 
Tokens that refer to nouns
include<tt> ¯ </tt>and<tt> ¯¯ </tt>and<tt> ∘ </tt>
(denoting infinity, minus infinity,
and the boxed empty list<tt> &lt;''</tt>),<tt> </tt>
as well as other numeric items and lists 
(such as<tt> 3.4e2 </tt>and<tt> 2 3 4</tt>),<tt> </tt>
and literal items and lists 
(such as<tt> 'a' </tt>and<tt> 'cab'</tt>).<tt> </tt>
A phrase that produces a noun 
(such as<tt> 3×4 </tt>or<tt> ⌽'abcd'</tt>)<tt> </tt>
may be called a <i>noun phrase</i>.</p>

<a name="2a3"></a>
<p><b>Arrays</b>. A single entity such 
as<tt> 2.3 </tt>or<tt> 2.3j5 </tt>or<tt> 'A' </tt>
or<tt> '+' </tt>is called an <i>item</i>. 
The verb denoted by a comma (and
called <i>catenate</i> or <i>before</i>) 
chains its arguments to form a <i>list</i>
whose <i>shape</i> (given by the verb ⍴) 
is equal to the number
of items combined. For example:</p>

<pre>
   date←1,7,7,6
   ⍴date
4
   word←'s','a','w'
   ⍴word
3
   ⌽word (⌽ <font face=Times size=3>is the verb <i>reverse</i></font>)
was
   ⌽date
6 7 7 1
</pre>

<p>The expression<tt> s⍴l </tt>produces an array of shape<tt> s </tt>
from the list<tt> l</tt>. For example:</p>

<pre>
   (3,4)⍴date,1,8,6,7,1,9,1,7
1 7 7 6
1 8 6 7
1 9 1 7
   table←2 3⍴word,'b','a','t'
   ⍴table           table
2 3              saw
                 bat
</pre>

<p>The number of elements in the shape of a noun is
called the <i>rank</i> of the noun; 
thus a noun of rank<tt> 2 </tt>is a
table, of rank<tt> 1 </tt>is a list, 
of rank<tt> 0 </tt>is an item, 
of rank<tt> 3 </tt>is a <i>3-dimensional</i> 
or <i>rank-3</i> array, etc. 
Moreover, each position of the shape is 
called an <i>axis</i> of the array, and axes
are referred to by 
indices<tt> 0</tt>&nbsp;,<tt> 1</tt>&nbsp;,<tt> 2</tt>&nbsp;,<tt> </tt>
etc. For example, axis<tt> 0 </tt>
of<tt> table </tt>has length<tt> 2 </tt>
and axis<tt> 1 </tt>has length<tt> 3</tt>&nbsp;.</p>

<p>The last<tt> k </tt>axes of an array<tt> a </tt>
determine <i>rank-k cells</i>
or <i>k-cells</i> of <tt> a</tt>&nbsp;.<tt> </tt> 
For example, if:</p>

<pre>
   a←2 3 4⍴'abcdefghijklmnopqrstuvwx'
   a
abcd
efgh
ijkl

mnop
qrst
uvwx
</pre>

<p>then the list<tt> 'abcd' </tt>is a<tt> 1</tt>-cell 
of<tt> a</tt>&nbsp;,<tt> </tt> 
the two separate<tt> 3 </tt>by<tt> 4 </tt>
tables are<tt> 2</tt>-cells of<tt> a</tt>&nbsp;,<tt> </tt>
and the individual letters are each<tt> 0</tt>-cells 
of<tt> a</tt>&nbsp;.</p>

<p>The rest of the shape vector is called the <i>outer shape</i>
or <i>frame</i> of the array relative to the cells 
of rank<tt> k</tt>&nbsp;.<tt> </tt>
For example, if<tt> ⍴b </tt>
is<nobr><tt> 2 3 4 5</tt>&nbsp;,</nobr><tt> </tt>
then<tt> b </tt>has the frame<tt> 2&nbsp;3 </tt>
relative to the cells of rank<tt> 2 </tt>
(and therefore of shape<tt> 4 5</tt>),<tt> </tt>
has a frame of<nobr><tt> 2 3 4 </tt></nobr>
relative to<tt> 5</tt>-element rank-<tt>1 </tt>cells,
a frame of<nobr><tt> 2 3 4 5 </tt></nobr>
relative to cells of rank<tt> 0 </tt>
(that is, items), and an empty frame 
(signifying an item) of cells of
rank<tt> 4</tt>&nbsp;.</p>

<p>The number of cells in a frame is the product over its
shape, and if one or more of the elements in the shape is
zero, the number of cells is zero; the frame is then said to
be a <i>zero frame</i>. 
Since the product across an empty list 
is<tt> 1</tt>&nbsp;,<tt> </tt>
an empty frame is <i>not</i> a zero frame.</p>

<p>A cell of rank one less than the rank 
of<tt> a </tt>is called
a <i>major</i> cell of<tt> a</tt>&nbsp;,<tt> </tt>
and major cells play an important role
in the discussion of nouns 
and the application of verbs to them. 
For example, the verb <i>from</i> 
(denoted by<tt> {</tt>)<tt> </tt>
selects major cells from its argument, as in:</p>

<pre>
   0{a                1{a
abcd               mnop
efgh               qrst
ijkl               uvwx
0{0{a                 2 1{0{a
abcd               ijkl
                   efgh
   1{2{0{a
j
</pre>

<p>Moreover, the verb <i>grade</i> 
(denoted by<tt> ⍋</tt>)<tt> </tt>
provides indices to<tt> { </tt>
that bring major cells to &ldquo;lexical&rdquo; 
or &ldquo;row-major&rdquo; order. For example:</p>

<pre>
   n←4 3⍴3 1 4 2 7 9 3 2 0 3 1 4
   n
3 1 4
2 7 9
3 2 0
3 1 4
   g←⍋n
   g
1 0 3 2

   g{n
2 7 9
3 1 4
3 1 4
3 2 0
   'abcdefg' ⍋ 'care'
1 0 3 2
</pre>

<p>Negative numbers 
(as in<tt> ¯1</tt>-cell and<tt> ¯2</tt>-cell) 
are also used to refer to cells whose corresponding 
frames are of the rank indicated by the magnitude 
of the number. 
For example, the list<tt> 'abcd' </tt>may be referred 
to either as a<tt> ¯2</tt>-cell 
or as a<tt> 1</tt>-cell of<tt> a</tt>&nbsp;,<tt> </tt> 
and each of the two 
separate<tt> 3 </tt>by<tt> 4 </tt>tables 
are called either<tt> ¯1</tt>-cells 
or<tt> 2</tt>-cells of<tt> a</tt>&nbsp;.<tt> </tt> 
The<tt> ¯1</tt>-cells of an array are its major cells, 
and an item has a
single major cell, itself.</p>


<a name="2a4"></a>
<p><b>Open and boxed</b>. The nouns discussed 
thus far are called <i>open</i>, 
to distinguish them from <i>boxed</i> nouns produced by
the verb <i>box</i> (denoted by<tt> &lt;</tt>).<tt> </tt> 
The result of box is an item,
and boxed nouns are commonly (but not necessarily) 
displayed in boxes. For example:</p>

<pre>
   &lt;'here'
|¯¯¯¯|
|here|
|____|
</pre>

<p>Box allows one to treat any array 
(such as a list of letters that represent a word) 
as a single entity.  For example:</p>

<pre>
   letters←'I was here'
   ⍴letters
10
   ⌽letters
ereh saw I
   words←(&lt;'I'),(&lt;'was'),(&lt;'here')
   ⍴words
3
   ⌽words               (2,3)⍴words, ⌽words
|¯¯¯¯||¯¯¯||¯|       |¯|   |¯¯¯||¯¯¯¯|
|here||was||I|       |I|   |was||here|
|____||___||_|       |_|   |___||____|
                     |¯¯¯¯||¯¯¯||¯|
                     |here||was||I|
                     |____||___||_|
</pre>


<a name="2b"></a>
<p><b>B. Verbs</b></p>

<p>Most verbs are limited in their normal application, and
the class of nouns to which a verb normally applies is called
its <i>domain</i>. 
For example, the verb <i>minus</i> 
(in the expression<tt> -n</tt>)<tt> </tt>
applies only to a numeric 
argument<tt> n</tt>&nbsp;,<tt> </tt>
and the expression<tt> -'n' </tt>
is meaningless; the domain of <i>minus</i> is limited
to numeric arguments.</p>

<a name="2b1"></a>
<p><b>Monads and Dyads</b>. Most verbs have two definitions, 
one for the <i>monadic</i> case (one argument), 
and one for the <i>dyadic</i> case (two arguments). 
If one of these definitions is omitted,
the corresponding case of the verb has an empty domain.
In any sentence, the dyadic definition of a verb applies if
it is preceded by a suitable left argument, that is, any noun
that is not itself an argument of a conjunction. Otherwise
the monadic definition applies.</p>

<p>The monadic case of a verb is also called a <i>monad</i>,
and we may speak of &ldquo;the monad<tt> ÷</tt>&rdquo;<tt> </tt>
used in the expression<tt> ÷⍵</tt>&nbsp;,<tt> </tt> 
and of &ldquo;the <i>dyad</i><tt> ÷</tt>&rdquo;<tt> </tt>
used in the expression<tt> ⍺÷⍵</tt>&nbsp;.</p>

<a name="2b2"></a>
<p><b>Ranks of verbs</b>. The notion of verb rank 
is closely related
to that of noun rank: a verb of rank<tt> k </tt>
applies to each of
the<tt> k</tt>-cells of its argument. 
This notion will be introduced
by an example using the verb <i>ravel</i> 
(denoted by a comma),
which ravels its entire argument 
to produce a list of the elements. 
Thus:</p>

<pre>
   a←2 3 4⍴'abcdefghijklmnopqrstuvwx'
   a
abcd
efgh
ijkl

mnop
qrst
uvwx
   ,a
abcdefghijklmnopqrstuvwx
</pre>

<p>Since ravel applies to its entire argument, 
its rank is said to be <i>unbounded</i>, 
or <i>infinite</i>; 
it can also be applied to
cells of a specified rank<tt> r </tt>
by using the rank conjunction<tt> ⍤ </tt>
in the expression<tt> ,⍤r</tt>&nbsp;.<tt> </tt>Thus:</p>

<pre>
   ,⍤2 a
abcdefghijkl
mnopqrstuvwx
   ⍴,⍤2 a
2 12
</pre>

<a name="assembly"></a>
<p>The last result illustrates a general rule: the shape of
a result is the frame of the argument (relative to the cells
to which the verb applies) catenated with the shape produced
by applying the verb to the individual cells. Commonly
these individual shapes agree, but if not, they are
first brought to a common shape as follows:</p>

<table>
<tr><td valign=top>1.</td><td>&nbsp;</td><td>
If the ranks differ, they are brought to a common maximum
rank<tt> mr </tt>by reshaping each argument to introduce
leading unit lengths. Formally, an individual result a
is replaced by<tt> (u,⍴a)⍴a</tt>,<tt> </tt> 
where<tt> u←(mr-⍴⍴a)⍴1</tt>&nbsp;.
 </td></tr>
<tr><td valign=top>2.</td><td>&nbsp;</td><td>
If the individual shapes differ (after being brought to a
common rank), each is brought to a common shape by
the expression<tt> ms↑a</tt>&nbsp;,<tt> </tt>
where<tt> ms </tt>is the maximum over
the shapes. 
Thus, if the shapes 
are<tt> s1 </tt>and<tt> s2 </tt>
and<tt> s3</tt>&nbsp;,<tt> </tt>
then<tt> ms←s1⌈s2⌈s3</tt>&nbsp;.<tt> </tt>
For example, the individual
results of<tt> ⍳⍤0(2 3 4) </tt>
are<tt> 0&nbsp;1 </tt>
and<nobr><tt> 0 1 2 </tt></nobr>
and<nobr><tt> 0 1 2 3</tt>&nbsp;;</nobr><tt> </tt>
the overall result is the table:<tt><br>
0 1 0 0<br>
0 1 2 0<br>
0 1 2 3
</td></tr></table>

<p>The case of a zero frame (which has no cells to which
the function may be applied) 
is normally treated as follows:
The shape of the individual result is determined by
applying the function to a surrogate argument having the
shape required for the argument cell. 
For example, if<tt> ⍴m </tt>
is<nobr><tt> 0 5 4</tt>&nbsp;,</nobr><tt> </tt>
then the individual result shape for the case<tt> ⌹m </tt>
is<tt> 4&nbsp;5</tt>&nbsp;,<tt> </tt>
and the shape of the entire result 
is<nobr><tt> 0 4 5</tt>&nbsp;.</nobr><tt> </tt> 
If the
individual result shape can differ 
for different suitable surrogate
arguments, it is taken to be the smallest shape over
all surrogate arguments. 
For example, if<tt> ⍴m </tt>is<tt> 0&nbsp;3</tt>&nbsp;,<tt> </tt> 
the individual result shape of<tt> ⍳m </tt>
has rank<tt> 1 </tt>
and is of shape<tt> 0</tt>&nbsp;.<tt> </tt>
The shape of the overall result is<tt> 0 0</tt>&nbsp;.</p>

<p>The dyadic case of a verb has two ranks, 
a <i>left</i> rank that
governs the rank of the cells of its left argument, 
and a <i>right</i>
rank that governs the rank of cells of its right argument. 
For example:</p>

<pre>
   p←'abc't
   q←3 4⍴'wakereadlamp'
   q
wake
read
lamp

   p,⍤0 1 q
awake
bread
clamp
</pre>

<p>Finally, each verb has three intrinsic ranks, a monadic
rank, a left rank, and a right rank. 
This fact often simplifies
the definition of a verb. 
For example, the monadic case of<tt> ⌽ </tt>
is defined to have rank 1, 
and it therefore suffices to define
its behaviour on lists, perhaps by example, 
as in<tt> ⌽'abc' ←→ 'cba' </tt>
and<tt> ⌽1&nbsp;2&nbsp;3 ←→ 3&nbsp;2&nbsp;1</tt>&nbsp;.<tt> </tt>
The application 
of<tt> ⌽ </tt>to an argument of higher rank 
is therefore completely
defined. For example:</p>

<pre>
   ⌽a
dcba
hgfe
ikji

ponm
tsrq
xwvu
</pre>

<a name="2b3"></a>
<p><b>Degenerate cases</b>. The rank of a verb merely places an
upper limit on the ranks of the cells to which it applies, and
its domain may include arguments of rank lower than its
nominal rank. For example,<tt> ⌽ </tt>
has rank<tt> 1</tt>&nbsp;,<tt> </tt>
but its domain also includes an item<tt> s </tt>as 
follows:<tt> s≡⌽s</tt>&nbsp;.<tt> </tt>
Similarly,<tt> ⌹ </tt>(matrix inverse) 
has rank<tt> 2</tt>&nbsp;,<tt> </tt>
but is extended to list and item
arguments as follows:<tt> (⌹a)≡⌹⍪⊃a</tt>&nbsp;,<tt> </tt>
where the <i>table</i> function<tt> ⍪ </tt>
forms a one-column table from a list or item argument.</p>

<a name="2b4"></a>
<p><b>Agreement</b>. The two arguments of the dyadic case of a
verb must <i>agree</i> in the following sense: 
the left frame and
the right frame (relative to the particular verb) must be
identical, except that if one frame is an empty list, the
single corresponding cell is used as argument together with
each cell of the other argument.</p>

<p>For example, if<tt> q←3 4⍴'wakereadlamp' </tt>
and<tt> p←'abc' </tt>
(as in the earlier example 
using the derived verb<tt> ,⍤0&nbsp;1</tt>),<tt> </tt>
then in the expression<br><tt>&nbsp; &nbsp;p,⍤0 1 q</tt><br>
the shapes of the arguments 
are<tt> 3 </tt>and<tt> 3&nbsp;4</tt>&nbsp;,<tt> </tt>
the shapes of the cells (of ranks<tt> 0 </tt>
and<tt> 1</tt>)<tt> </tt>are empty 
(the list<tt> ''</tt>)<tt> </tt>and<tt> 4</tt>&nbsp;,<tt> </tt>
and the frames are<tt> 3 </tt>and<tt> 3</tt>. 
The result (as shown in the earlier example) 
has shape<tt> 3&nbsp;5</tt>&nbsp;,<tt> </tt> 
the<tt> 3 </tt>being contributed by
the common frame, and the<tt> 5 </tt>
by the shape of the catenation
of individual cells.</p>

<p>The same arguments in the expression</p>

<pre>
   p,⍤1 1 q
abcwake
abcread
abclamp
</pre>

<p>illustrate the exceptional case; 
the left frame is empty, and
the single cell<tt> 'abc' </tt>
is <i>extended</i> to apply to each of the
three cells of the right argument.</p>

<p>If one of the ranks is unbounded, 
the extension of the
corresponding argument will always occur. 
For example,
since the indexing verb 
<i>from</i>,<tt> {</tt>&nbsp;,<tt> </tt>
has zero left rank and
unbounded right rank, we have:</p>

<pre>
   p←3 4⍴'abcdefghijkl'
   p                       2 0{p
abcd                    ijkl
efgh                    abcd
ijkl
</pre>

<p>The <i>tie</i> conjunction (denoted by a period) 
can be used to relax the normal agreement constraints 
by specifying the number of leading axes of the frames 
that must agree, and &ldquo;freeing&rdquo; 
the remaining frame 
axes to interact independently.
For example:</p>

<pre>
   p←l 2 3
   g←l 2 3
   m←p 0 .+ q
   m
2 3 4 5
3 4 5 6
4 5 6 7

   ⍴m 1 .+m
3 4 4
   ⍴m 0 .+m
3 4 3 4
</pre>


<a name="2c"></a>
<p><b>C. Adverbs and conjunctions</b></p>

<p>Unlike verbs, adverbs and conjunctions have a <i>fixed</i>
valence; an adverb is monadic 
(applying to a single argument to its <i>left</i>), 
and a conjunction is dyadic 
(applying to two arguments, one on each side).</p>

<p>Each argument of a conjunction may be either a noun
or a verb, and it may therefore produce as many as four
distinct classes of results. 
For example,<tt> v⍤n </tt>produces a
rank<tt> n </tt>function that applies the verb<tt> v </tt>
to each cell of rank<tt> n</tt>&nbsp;;<tt> n⍤v </tt>
produces a <i>cut</i> that applies the verb<tt> v </tt>
to each of a set of segments cut along 
the first axis of the argument in a manner 
determined by the noun<tt> n</tt>&nbsp;;<tt> v1⍤v2 </tt>
produces the <i>composition</i> of the verbs<tt> v1 </tt>
and<tt> v2</tt>&nbsp;;<tt> </tt>
and<tt> n1⍤n2 </tt>yields a
<i>constant verb</i> of rank<tt> n2</tt>&nbsp;,<tt> </tt> 
whose result for each cell is<tt> n1</tt>&nbsp;.</p>

<p>The conjunction<tt> ⍤ </tt>
may therefore be referred to variously
as the <i>rank</i>, <i>cut</i>, <i>composition</i>, 
or <i>constant</i> according
to its use, or may be referred to 
by the single term <i>on</i>,
which is vague enough to roughly cover all of the cases, 
as in &ldquo;ravel on reverse&rdquo;
for<tt> ,⍤⌽</tt>&nbsp;,<tt> </tt>
and &ldquo;ravel on<tt> 2</tt>&rdquo; for<tt> ,⍤2</tt>&nbsp;.</p>

<p>The most common result of an adverb or conjunction
is a verb, but it may also be a noun, adverb, or conjunction.</p>


<a name="2d"></a>
<p><b>D. Copula</b></p>

<p>In addition to certain <i>distinguished names</i> 
(discussed in the following section), 
the names that may be assigned
by the copula are<tt> ⍺ </tt>and<tt> ⍵ </tt>
and<tt> → </tt>and<tt> $ </tt>and those that begin
with a letter of the native alphabet and (may) continue with
letters or digits, as in<tt> ABc←3 </tt>
and<tt> a2←3</tt>&nbsp;,<tt> </tt>
and<tt> A2b3←3</tt>&nbsp;,<tt> </tt>
or with a macron or dot, 
as in<tt> A¯b¯2 </tt>and<tt> a.b</tt>&nbsp;.<tt> </tt>
This restriction prohibits the redefinition of tokens, 
as in<tt> 3←2 </tt>or<tt> +←2 </tt>or<tt> +←×</tt>&nbsp;.</p>

<p>In the expression<tt> (1{'abc')←3+4</tt>&nbsp;,<tt> </tt>
the parentheses force evaluation 
of the expression<tt> 1{'abc' </tt>
before the assignment,
and the name represented by the result is assigned
the result of<tt> 3+4</tt>&nbsp;.<tt> </tt>
Thus the name<tt> b </tt>
is assigned the value<tt> 7</tt>&nbsp;.<tt> </tt>
Name assignments of the form<tt> (n)←x </tt>
are called <i>indirect</i>.</p>

<p>More generally, if the shape of<tt> n </tt>
<i>agrees</i> with the outer shape 
of<tt> x</tt>&nbsp;,<tt> </tt> 
then<tt> (n)←x </tt>assigns the name represented by
the open of each element of<tt> n </tt>
to the corresponding cell
of<tt> x</tt>&nbsp;.<tt> </tt>
For example, if<tt> x←3&nbsp;4⍴⍳12 </tt>
and<tt> n1←'abc' </tt>
and <nobr><tt> n2←&lt;⍤1 (3 2⍴'p0p1p2')</tt>&nbsp;,</nobr><tt> </tt>then:</p>

<pre>
   n1             n2              x
abc            |¯¯||¯¯||¯¯|     0  1  2  3
               |p0||p1||p2|     4  5  6  7 
               |__||__||__|     8  9 10 11

   (n1)←x         (n2)←x          'abc'←3 4 5
   b              p0              b
4 5 6 7        0 1 2 3         4
</pre>

<p>In other words,<tt> (n)←x </tt>implies 
that<tt> (&gt;i{n)←&gt;i{x </tt>
for each item<tt> i{n </tt>of<tt> n</tt>&nbsp;,<tt> </tt>
and corresponding cell<tt> i{x </tt>
of<tt> x</tt>&nbsp;.<tt> </tt>
However, if<tt>&gt;i{n </tt>is itself boxed 
(and therefore not a proper name), 
it and the corresponding cell
are both opened, and assignment is re- attempted. Thus,
if<tt> n←(&lt;'p'),(&lt;&lt;'q'),&lt;&lt;&lt;'r' </tt>
then<tt> (n)←3⍴&lt;&lt;'cat' </tt>
assigns<tt> &lt;&lt;'cat' </tt>to<tt> p </tt>and<tt> &lt;'cat' </tt>
to<tt> q</tt>&nbsp;,<tt> </tt>and<tt> 'cat' </tt>to<tt> r</tt>&nbsp;.</p>

<p>An alternate form of the copula 
(denoted by<tt> &#x2345;</tt>)<tt> </tt>
is discussed in <a href="APLDictionary1.htm#2j1">Section J</a>.</p>


<a name="2e"></a>
<p><b>E. Dialogue</b></p>

<p>Any user of a language will normally wish to control
his own pronouns, in the sense that the value assigned by
him to any name will not be affected by assignments made
by others to the same name. On the other hand, one partner
in a <i>dialogue</i> may use a pronoun assignment made by the
other, as in:</p>

<table>
<tr><td>&nbsp; &nbsp; &nbsp;</td><td>Walter is coming.</td></tr>
<tr><td>&nbsp;</td><td>Oh, when will he arrive?</td></tr>
</table>

<p>In general, a mutual agreement 
by two users to <i>share</i>
a specific name can be used 
to provide communication between
them, and such communication 
(via one or more shared names) 
can provide the basis 
for arbitrarily complex collaboration.</p>

<p>If one partner wishes to ensure that the other partner
has actually consulted the current value assigned to a
shared name before he assigns a new value, the partners
can achieve this by sharing one or more further names, and
using them in a strict protocol to signal and acknowledge
dispatches (assignments) and receipts (uses) of the values
of the primary shared name.</p>

<p>APL computer systems that provide for sharing names
also provide protocols that control delivery and receipt of
values assigned to shared names, and manuals for specific
systems should be consulted. 
A good basic statement is provided by 
<acronym title="Falkoff, A.D. and K.E. Iverson, 
APL Language (IBM GC26-3847).">[7]</acronym>. 
Most systems limit sharing to names of
nouns, and prohibit the sharing of names of verbs and adverbs.</p>

<p>A set of <i>distinguished</i> names 
(beginning with<tt> ⎕ </tt>or<tt> ⍞</tt>)<tt> </tt>
is reserved for communicating with the APL system that
executes APL sentences. 
Three such names, used uniformly
in dialects, merit consideration here.</p>

<p>As may have been apparent from earlier examples of
the execution of APL sentences, the result of a sentence
such as<nobr><tt> ⌽1 2 3 </tt></nobr>
is automatically displayed, but the result
of a sentence whose execution terminates in an assignment
(such as<nobr><tt> a←1 2 3</tt>)</nobr><tt> </tt>is not. 
Display can be forced by the
prefix<tt> ⎕←</tt>&nbsp;,<tt> </tt>as in:</p>

<pre>
   ⎕←a←1 2 3
3 2 1
</pre>

<p>the name<tt> ⎕ </tt>denoting, in effect, 
the display mechanism of the system.</p>

<p>The name<tt> ⍞ </tt>is shared 
with the terminal driver 
(that controls the input-output device). 
When referred to (as in<tt> b←⍞</tt>)<tt> </tt>
it, in effect, denotes the keyboard, and assumes the
literal value of the list of symbols next entered on it. 
For example:</p>

<pre>
   a←⍞
eva can i stab evil live bats in a cave
   a
evac a ni stab evil live bats i nac ave
   ⍴a
39
</pre>

<p>When assigned a value 
(as in<tt> ⍞←d</tt>),<tt> ⍞</tt>
behaves like<tt> ⎕</tt>&nbsp;,<tt> </tt>
except that it signals the terminal driver to suppress the final
&ldquo;carriage return&rdquo;, 
that is, it leaves the cursor at the end of
the output displayed. 
The detailed behaviour of<tt> ⍞←d </tt>varies
considerably between different APL systems.</p>

<p>Finally,<tt> ⎕io </tt>(called <i>index origin</i>) 
is not used here, but
merits comment because it occurs in all dialects, affecting
the behaviour of the 
verbs<tt> ⍋</tt>&nbsp;,<tt> ⍒</tt>&nbsp;,<tt> ⍉</tt>&nbsp;,<tt> ?</tt>&nbsp;,
and<tt> ⍳</tt>&nbsp;.<tt> </tt> 
If<tt> ⎕io </tt>is
assigned the value<tt> 0</tt>&nbsp;,<tt> </tt>
the behaviour in any dialect agrees
with that described here. 
If<tt> ⎕io←1</tt>&nbsp;,<tt> </tt>then each element 
of<tt> ⍳⍵ </tt>is increased by<tt> 1</tt>&nbsp;,<tt> </tt>
and the other functions (which yield
or use indices drawn from<tt> ⍳⍵</tt>)<tt> </tt>
are affected accordingly.</p>



<a name="2f"></a>
<p><b>F. Comparatives</b></p>

<p>In the everyday use of comparisons, a reasonable relative
tolerance is implied. 
For example, a statement that two
three-foot shelf boards are equal in length 
would normally imply that they agree 
to a fraction of an inch, 
whereas a statement that two cities are equidistant 
from a third would normally imply that the distances 
agree to within a mile or so.</p>

<p>In APL the comparison<tt> ⍺=⍵ </tt>
is treated similarly, 
yielding<tt> 1 </tt>(for true) not only 
if<tt> ⍺ </tt>and<tt> ⍵ </tt>are identical, 
but also if the difference<tt> ⍺-⍵ </tt>
falls relatively close to zero. 
The relative tolerance used in comparisons is specified by the
system variable<tt> ⎕ct </tt>(called comparison tolerance). 
If the magnitude of the difference<tt> ⍺-⍵ </tt>
does not exceed<tt> ⎕ct </tt>times
the larger of the magnitudes 
of<tt> ⍺ </tt>and<tt> ⍵</tt>&nbsp;,<tt> </tt>
then<tt> ⍺=⍵ </tt>yields<tt> 1</tt>&nbsp;.</p>

<p>The application of tolerance in other comparisons
(such as<tt> &lt;</tt>&nbsp;,<tt> ≤</tt>&nbsp;,<tt> </tt>
and<tt> ≠</tt>)<tt> </tt>is detailed 
in the discussion of these verbs. 
Tolerance also applies to the verbs<tt> ⌊ </tt>
(<i>floor</i> or <i>integer part</i>) 
and<tt> ⌈ </tt>(<i>ceiling</i>), 
which yield integer results, effectively
by comparing the argument with neighbouring integers. 
Exact comparisons may be obtained by 
setting<tt> ⎕ct </tt>to<tt> 0</tt>&nbsp;.</p>



<a name="2g"></a>
<p><b>G. Terminology</b></p>

<a name="2g1"></a>
<p><b>Standard names and synonyms</b>. Because of the rather
large number of verbs, adverbs, and conjunctions in APL, it
is important to choose names for them that are both distinctive
and suggestive. 
Standard names are used in Sections IV-VI, 
and <a href="APLDictionary1.htm#tab4">Table 4</a> lists synonyms 
that may be appropriate in narrower contexts. 
For example, the verb<tt> ⍴ </tt>(called <i>shape</i>) 
yields the number of elements of a list to which it
is applied and is therefore often called &ldquo;length&rdquo;, 
although such a term would be inappropriate in geometry, 
where the length of a list<tt> b </tt>
(better called a <i>vector</i> in this context) 
is defined as<tt> (+/b*2)*.5</tt>&nbsp;.</p>

<p>Although many mathematical terms provide standard
names (such as <i>plus</i>, <i>minus</i>, and <i>times</i>), 
others are unsuitable for various reasons:</p>

<table>
<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
They have different meanings in different branches of
mathematics, and therefore conflict; 
<i>inverse</i> is an example.
 </td></tr>
<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
They denote special cases only. 
For example, <i>determinant</i>
and <i>permanent</i><tt> </tt>(<tt>-.× </tt>
and<tt> +.×</tt>)<tt> </tt>are special cases
of the more general term <i>dot product</i>, 
and <i>transpose</i>
is a special case of <i>cant</i> 
applicable to matrices only.
 </td></tr>
<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
They are rather awkward phrases, 
such as &ldquo;divided by&rdquo;
for<tt> ÷</tt>&nbsp;,<tt> </tt>and &ldquo;integer part of&rdquo; 
for <i>floor</i> 
(with no term for the companion concept of <i>ceiling</i>).
 </td></tr>
<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
They suggest at most part of a concept, 
as in &ldquo;sign&rdquo;
or &ldquo;signum&rdquo; instead of <i>trend</i>. 
Not only does &ldquo;sign&rdquo;
fail to suggest the meaning for a complex argument,
but even for a real argument suggests only the way in
which the result is represented, 
and not a &ldquo;direction&rdquo;.
 </td></tr>
</table>

<p>Distinct names for the monadic and dyadic cases of a
verb are desirable, but not essential. 
Thus,<tt> a*b </tt>and<tt> a×*b </tt>
are clear when read as 
&ldquo;<tt>a </tt>power<tt> b</tt>&rdquo; 
and &ldquo;<tt>a </tt>times power<tt> b</tt>&rdquo;,<tt> </tt>
and the phrases &ldquo;the dyad power&rdquo; and &ldquo;the monad power&rdquo;
are as convenient as &ldquo;the power function&rdquo; 
and &ldquo;the exponential function&rdquo;.</p>

<p>When working in a narrow and familiar context, one
might find the suggested standard names bizarre and unnecessary,
but in wider contexts come to accept them as
reasonable compromises.</p>

<a name="2g2"></a>
<p><b>Other considerations</b>. 
In mathematics the terms <i>scalar</i>,
<i>vector</i>, and <i>matrix</i> 
are used for what we have here called
<i>item</i>, <i>list</i>, and <i>table</i>; 
<i>function</i> and <i>operator</i> are used for
what we have called <i>verb</i> and <i>adverb</i>. 
We will use these
synonyms wherever they seem appropriate.</p>

<p>In verbalizing a written APL sentence, 
clarity may be gained by observing that 
the simple verbs<tt> ⊢ </tt>and<tt> ⊣ </tt>
(called <i>right</i> and <i>left</i>) 
have the effect of coordinating or subordinating
conjunctions. 
Thus,<nobr><tt> a←n÷x⊣n←⌽x←1 2 3 </tt></nobr>would
be read as 
&ldquo;<tt>a </tt>is<tt> n </tt>divided 
by<tt> x</tt>&nbsp;,<tt> </tt>
where<tt> n </tt>is the reversal
of<tt> x</tt>&nbsp;,<tt> </tt>
and where<tt> x </tt>
is the list<tt> 1&nbsp;2&nbsp;3</tt>&rdquo;, 
and<nobr><tt> ,⍤2⊢3 4⍴⍳12 </tt></nobr>
would be read as 
&ldquo;the rank<tt> 2 </tt>ravel of the<tt> 3 </tt>
by<tt> 4 </tt>table of integers&rdquo;.</p>

<p>The occurrence of a copula without<tt> ⊣ </tt>
may also be read as &ldquo;where&rdquo;, 
as in &ldquo;<tt>a </tt>is<tt> x </tt>
times<tt> x</tt>&nbsp;,<tt> </tt> 
where<tt> x </tt>is<tt> 1&nbsp;2&nbsp;3</tt>&rdquo;,
for<tt> a←x×x←1&nbsp;2&nbsp;3</tt>&nbsp;.<tt> </tt>
Because of the common use of &ldquo;and&rdquo;
for the verb<tt> ^ </tt>in logic, 
it should probably <i>not</i> be used
instead of &ldquo;where&rdquo;, 
even though it may seem appropriate.
<br>&nbsp;</p>



<a name="2h"></a>
<p><b>H. Identities and Proofs</b></p>

<p>Formal identities between sentences can play an important
role in the use of formal languages. 
In the body of the dictionary we will adopt 
a rather widely used scheme
for expressing identities: 
writing one sentence immediately
below another will imply that 
the second is equivalent to the first. 
For example:</p>

<pre>
+/⍳n
+/⌽⍳n
.5×(+/⍳n)+(+/⌽⍳n)
.5×+/((⍳n)+(⌽⍳n))
.5×+/n⍴(n-1)
.5×n×(n-1)
</pre>

<p>The foregoing six sentences state five identities, 
all of which may be tested by executing them 
after assigning some value to<tt> n</tt>&nbsp;.<tt> </tt>
Moreover, the five identities together
imply an identity between the first and the last sentences,
and therefore provide the well-known efficient 
calculation<tt> (.5×n×n-1) </tt>for the sum 
of a sequence of<tt> n </tt>successive
integers beginning with zero.</p>

<p>The foregoing example can be elaborated to provide
a <i>proof</i> of the identity between the first and last sentences
by writing beside each sentence the basis for asserting its
identity with the preceding sentence. For example:</p>

<table>
<tr><td><tt>.5×+/n⍴(n-1)</tt></td></tr>
<tr><td valign=top><tt>.5×n×(n-1)</tt>&nbsp;</td>
 <td>&nbsp;</td><td>Definition of<tt> × </tt>(that is,<tt> p×q </tt>
is the sum over<tt> p </tt>repetitions of<tt> q</tt>)</td></tr>
</table>

<p>Identities are also expressed 
by placing<tt> ←→ </tt>between sentences, 
as in<tt> +/⍳n ←→ .5×n×n-1</tt>&nbsp;,<tt> </tt>
or by using the verb<tt> ≡</tt>&nbsp;,<tt> </tt>
as in<tt> (+/⍳n)≡.5×n×n-1</tt>&nbsp;.</p>


<a name="2i"></a>
<p><b>I. Parsing and Execution</b></p>

<p>A sentence is executed by executing its parts in a sequence
determined by the parsing rules of the language.
For example, the sentence<tt> 10÷3+2 </tt>is executed 
by <i>first</i> executing<tt> 3+2 </tt>
to obtain a result that is then 
used to divide<tt> 10</tt>&nbsp;.</p>

<p>The parsing rules can be summarized as follows:</p>

<table>
<tr><td valign=top>1.</td><td>&nbsp;</td><td>
Execution proceeds from right to left, except that when
a right parenthesis is encountered, the segment 
enclosed by it and its <i>matching</i> left parenthesis is executed,
and its result is used to replace that entire segment
and its enclosing parentheses.
 </td></tr>
<tr><td valign=top>2.</td><td>&nbsp;</td><td>
Adverbs and conjunctions are executed before verbs;
the phrase<tt> ,⍤2-a </tt>is equivalent 
to<tt> (,⍤2)-a</tt>&nbsp;,<tt> </tt> 
not to<tt> ,⍤(2-a)</tt>&nbsp;.<tt> </tt>
Moreover, the left argument of an adverb
or conjunction is the entire verb phrase 
that precedes it. 
For example, in the phrase<tt> a+.×/b</tt>&nbsp;,<tt> </tt>
the adverb<tt> / </tt>applies to the derived verb 
resulting from the verb
phrase<tt> +.×</tt>&nbsp;,<tt> </tt>
not to the verb<tt> ×</tt>&nbsp;.
 </td></tr>
<tr><td valign=top>3.</td><td>&nbsp;</td><td>
Verbs are applied dyadically if possible. 
For example,<tt> a-b </tt>signifies a subtraction, 
but<tt> a×-b </tt>signifies multiplication
of<tt> a </tt>with the negative of<tt> b</tt>&nbsp;.
 </td></tr>
</table>

<p>One important consequence of these rules is that in an
unparenthesized sentence the right argument of any verb is
the result of the entire phrase to the right of it. 
A sentence such as<tt> 3×p⌈q*|r-5 </tt>
can therefore be <i>read</i> from left to right: 
the overall result is three times the result of the remaining
phrase, which is the maximum of<tt> p </tt>and the part
following the<tt> ⌈</tt>&nbsp;,<tt> </tt>and so on.</p>

<p>It is also instructive to examine 
the explicit parsing process. 
Parsing proceeds by moving successive elements
(or their <i>values</i> in the case of pronouns) 
from the tail end of a <i>left stack</i> 
(originally the given sentence prefixed 
by a marker<tt> ⍝</tt>)<tt> </tt> 
to the front of a <i>right stack</i>, and eventually
&ldquo;executing&rdquo; some <i>eligible</i> portion 
of the right stack and
replacing it by the single result of the execution.</p>

<p>For example, if<tt> a←l 2 3</tt>&nbsp;,<tt> </tt>
and if<tt> ⋄ </tt>is used to separate
the stacks, then the sentence<tt> b←+/2xa </tt>
would be parsed
and executed as follows:</p>

<pre>
⍝ b ← + / 2 × a ⋄
⍝ b ← + / 2 × ⋄ 1 2 3
⍝ b ← + / 2 ⋄ × 1 2 3
⍝ b ← + / ⋄ 2 × 1 2 3
⍝ b ← + ⋄ / 2 × 1 2 3
⍝ b ← + ⋄ / 2 4 6
⍝ b ← ⋄ + / 2 4 6
⍝ b ⋄ ← + / 2 4 6
⍝ b ⋄ ← 12
⍝ ⋄ b ← 12
⍝ ⋄ 12
⋄ ⍝ 12
</pre>

<p>The foregoing illustrates two important points: 1) Execution
of the phrase<nobr><tt> 2×1 2 3 </tt></nobr>
is deferred until the next element, 
the<tt> /</tt>&nbsp;,<tt> </tt>is transferred; 
had it been a conjunction, 
the<tt> 2 </tt>would have been <i>its</i> argument, 
and the monad<tt> × </tt>would
have applied to<nobr><tt> 1 2 3</tt>&nbsp;;</nobr><tt> </tt> 
and 2) Whereas the <i>value</i> of the
name<tt> a </tt>is moved to the right stack, 
the name<tt> b </tt>
(because it precedes a copula) 
is moved unchanged. 
Moreover, a covert effect of the execution is that 
the pronoun<tt> b </tt>is assigned the
value<tt> 12</tt>&nbsp;.</p>

<p>The executions in the right stack are confined to the
<i>first four elements only</i>, 
and eligibility for execution is determined
only by the class of each of these elements 
(noun, verb, adverb, conjunction, copula, 
parenthesis, name, and left marker). 
Consequently, the parsing process can be
made clearer by replacing each element in a sentence by
a single chosen member of its 
class:<tt> 1</tt>&nbsp;,<tt> +</tt>&nbsp;,<tt> /</tt>&nbsp;,<tt> </tt>
and period for noun, verb, adverb, and conjunction; 
and the 
letters<tt> a</tt>&nbsp;,<tt> b</tt>&nbsp;,<tt> c</tt>&nbsp;,<tt> d</tt>&nbsp;,<tt> </tt>
and<tt> e </tt>for names. 
The earlier example would then begin as follows:</p>

<pre>
⍝ b ← + / 1 + 1 ⋄
⍝ b ← + / 1 + ⋄ 1
⍝ b ← + / 1 ⋄ + 1
⍝ b ← + / ⋄ 1 + 1
⍝ b ← + ⋄ / 1 + 1
⍝ b ← + ⋄ / 1
</pre>

<p>Thus:</p>

<table>
<tr><td valign=top>
<pre>
   parse '+/a+a←1'
⍝+/a+a←1 ⋄
       →
⍝+/a+a←⋄1
      →
⍝+/a+a⋄←1
     ∘
⍝+/a+⋄a←1
      ↓↓↓
⍝+/a+⋄1
    →
⍝+/a⋄+1
   →
⍝+/⋄1+1
  →
⍝+⋄/1+1
    ↓↓↓
⍝+⋄/1
 →
⍝⋄+/1
→
⋄⍝+/1
  ↓↓
⋄⍝+1
  ↓↓
⋄⍝1
</pre>
</td><td nowrap><tt>&nbsp; &nbsp; &nbsp;</tt></td><td valign=top>
<p>The<tt> parse </tt>function illustrated at
left is defined in 
<a href="APLDictionary1.htm#tab2">Table 2</a>; it is a
complete formal statement of the
parsing procedure that may be consulted
for a deeper understanding
of the process. It may be read by
anyone conversant with APL, or entered
on an APL system for experimentation
of the kind illustrated here. 
In the accompanying example,
the<tt> ⋄ </tt>indicates the division between
the &ldquo;left (input) stack&rdquo; and
the &ldquo;right (execution) stack&rdquo;; 
the arrow<tt> → </tt>indicates that the element
above it is evaluated and moved to
the execution stack, the symbol<tt> ∘ </tt>
indicates that the element is moved
without evaluation 
(i.e., as a <i>name</i> to be 
assigned as a pronoun); 
and vertical arrows indicate the phrase
to be evaluated and replaced by a
single result, as where<tt> 1+1 </tt>
(noun plus noun) is to be replaced 
by a<tt> 1 </tt>(a noun).
</p></td></tr></table>


<a name="2j"></a>
<p><b>J. Verb Definition</b></p>

<p>The conjunction<tt> ∇ </tt>
provides a general means for defining
a new verb, as discussed in 
<a href="APLDictionary1.htm#del">Section VI</a>. 
A simpler informal
scheme called <i>direct definition</i>
<acronym title="Iverson, K.E., 
Elementary Analysis, APL Press, 1976.">[6]</acronym>
will be adopted for
definitions used for exposition in this dictionary. 
It defines a function by either one or three sentences, 
as illustrated below:</p>

<pre>
   sqrt: ⍵*.5
   sqrt 5 5 6
2 2.2361 2.4495

   root: ⍵*÷⍺
   2 root 64                 3 root 64
8                         4

   f: ⍵:⍺=1:~⍵
   0 f 0 1                   1 f 0 1
0 1                       1 0
</pre>

<p>The symbols<tt> ⍺ </tt>and<tt> ⍵ </tt>
denote the left and right arguments.
In a three-sentence definition, the middle sentence
is a <i>conditional</i> which is executed first; 
the first or last sentence
is then executed according to whether the result of
the conditional is<tt> 0 </tt>or<tt> 1</tt>&nbsp;.</p>

<p>Since direct definition is informal, 
its use on any APL
system requires a translation provided 
by the functions<tt> translate </tt>
and<tt> ∆</tt>&nbsp;,<tt> </tt>
themselves defined in the canonical
form discussed in <a href="APLDictionary1.htm#3d">Section III</a>. 
They appear in <a href="APLDictionary1.htm#tab3">Table 3</a>, 
together with examples of use.</p>


<a name="2j1"></a>
<p><b>Local and global names</b>. A name may be <i>local</i> to a
function in the sense that its use in the execution of the
function has no relation to its use outside the function. 
For example, in direct definition, 
the argument names<tt> ⍺ </tt>and<tt> ⍵ </tt>
are local, as are any names that occur immediately to the
left of a copula. For example:</p>

<pre>
   f:axa ←1+b←2×⍵
   a←b←⍵←3
   f 2
25
   a,b,⍵
5 3 3
</pre>

<p>A name that is not local to a function is said to be
<i>global</i> to it; a name not local to any function is said to be
a <i>global</i> name.</p>

<p>In functions produced 
by the conjunction<tt> ∇</tt>&nbsp;,<tt> </tt>
the names<tt> ⍺</tt>&nbsp;,<tt> ⍵</tt>&nbsp;,<tt> →</tt>&nbsp;,<tt> </tt>
and<tt> $ </tt>
are local, and other localizations may be
produced <i>dynamically</i>: 
when any name<tt> a </tt>is to be assigned
by an expression of the 
form<tt> a←b </tt>or<tt> (a)←b</tt>&nbsp;,<tt> </tt>
then<tt> a </tt>is first
made local if it is not already so. 
Expressions of the 
form<tt> a&#x2345;b </tt>and<tt> (a)&#x2345;b </tt>
do not produce localization.
<br>&nbsp;</p>



<a name="3"></a>
<p><b>III: Dialects</b></p>

<p>The vexing question of what to include in a dictionary
as standard, and what to relegate to dialects is settled here
as follows: a construct is excluded if 
a) it is anomalous,
and itself requires special rules, and 
b) is obsolescent, in
the sense that its use can be avoided by the use of other
(usually newer) constructs that are at least as convenient.
Variations in word-formation were discussed in 
<a href="APLDictionary1.htm#1">Section I</a>.</p>

<p>Anyone beginning to write for a particular APL system
should consult the manual for it, and should probably do
so rather early so as to avoid the use of constructs that it
does not include. On the other hand, the use of such alien
constructs may prove beneficial, since they may lead to
an improved style of programming, and may, in effect, be
partially or fully incorporated into the dialect by designing
functions to simulate them.</p>

<p>A sentence may fail to execute either because it is
ill-formed (for example,<tt> 2+ </tt>or<tt> a← </tt>
or<tt> a←←3</tt>)<tt> </tt>or because
a verb is applied to arguments not in its domain. 
Most dialects provide a set of <i>error reports</i> 
which are used to
indicate the type of failure in a sentence. 
The error report
is normally followed by a display of the sentence, with a
caret marking the point at which execution stopped.</p>

<p>Dialectal definitions are included in Sections IV-VI,
together with explicit references to the relevant manuals.
Certain dialectal constructions are excluded from such discussion
because they depart too strongly from the grammar
defined here. These excluded topics include 
<i>strands</i> (which,
in effect, allow elision of the verb <i>link</i>), 
<i>ambiguous symbols</i> (which allow certain symbols 
such as<tt> / </tt>to denote either
a verb or an adverb), 
and <i>selective specification</i> 
(such as<tt> (c/[a]v)←x</tt>).</p>

<p>Certain important constructs excluded from standard
APL occur in nearly all dialects and are therefore discussed
here, even though such discussion cannot completely obviate
the consultation of other manuals. In each case the
major reasons for exclusion are presented, as are alternative
phrasings in the standard language.</p>


<a name="3a"></a>
<p><b>A. Bracket-Semicolon Indexing</b></p>

<p>Brackets and semicolons are commonly used for indexing
in dialects, and a good definition may be found in
<acronym title="Falkoff, A.D. and K.E. Iverson, 
APL Language (IBM GC26-3847).">[7]</acronym>. 
For example:</p>

<pre>
   ⊢a←2 3 4⍴⍳24
 0  1  2  3
 4  5  6  7
 8  9 10 11

12 13 14 15
16 17 18 19
20 21 22 23

   a[1;2;1]         a [1;1 2;1]         a [1;;1]
21               17 21               13 17 21
</pre>

<p>Deficiencies of bracket-semicolon indexing include:</p>

<table>
<tr><td valign=top>a)</td><td>&nbsp;</td><td>
Anomalous syntax due to the use of two separated
symbols<tt> </tt>(<tt>[ </tt>and<tt> ]</tt>)<tt> </tt>
for the indexing function. In particular,
this leads to different interpretations of phrases
such as<tt> a[i;][j] </tt>
and<tt> a[] </tt>in different dialects.
 </td></tr>
<tr><td valign=top>b)</td><td>&nbsp;</td><td>
The phrase enclosed in brackets does not obey normal
rules. For example, it has no explicit result to which
a name can be assigned 
(as in<tt> a [i←(j;k)]</tt>),<tt> </tt>and
&ldquo;implied&rdquo; parentheses surround 
the portions separated
by semicolons 
(that is,<tt> a[2×i;j] ←→ a[(2×i);j]</tt>) .
 </td></tr>
</table>

<p>This form of indexing can easily be expressed in terms
of<tt> {</tt>&nbsp;.<tt> </tt>For example:</p>

<pre>
   a[i;j;k] ←→ (&lt;i⊃j⊃k){ a
   a[i;j; ] ←→ (&lt;i⊃j){ a
   a[i; ;k] ←→ (&lt;i⊃∘⊃k){ a
</pre>

<p>On the other hand, an expression such 
as<nobr><tt> (0 1⊃1 2⊃2 3){a </tt></nobr>
(that provides &ldquo;scattered indexing&rdquo;, 
to yield an array whose major cells 
are<tt> a[0;1;] </tt>and<tt> a[1;2;] </tt>
and<tt> a[2;3;]</tt>)<tt> </tt> 
is <i>not</i> easily written 
in the bracket-semicolon form.</p>


<a name="3b"></a>
<p><b>B. Indexed Assignment</b></p>

<p>The effect on the value of the name<tt> a </tt>
produced by an
expression of the form<tt> a[i]←b</tt>&nbsp;,<tt> </tt> 
is to assign to it a <i>merge</i>
of the values of<tt> a </tt>and<tt> b </tt>
controlled by the index<tt> i</tt>&nbsp;.<tt> </tt>
The same effect can be obtained 
by applying the <i>merge</i> adverb<tt> } </tt>to 
the selection function<tt> i¨{</tt>&nbsp;,<tt> </tt> 
that is,<tt> a←b i¨{} a</tt>&nbsp;.</p>

<p>Indexed assignment shares the deficiencies already
noted for the related bracket-semicolon indexing. Moreover,
it applies only to the particular form of indexing provided
by the brackets, rather than to any function, 
as in<nobr><tt> l 0 0¨⍉}t </tt></nobr>
to merge the list<tt> l </tt>in as the diagonal elements
of<tt> t</tt>&nbsp;.<tt> </tt>
Finally, the result of the expression a[i]←b 
(as assigned to the name<tt> c </tt>in the 
expression<tt> c←a[i]←b</tt>)<tt> </tt>is <i>not</i>
the merged result, which can be obtained only by a separate
reference to<tt> a</tt>&nbsp;.</p>


<a name="3c"></a>
<p><b>C. Bracket Axis Notation</b></p>

<p>Expressions such as<tt> ⌽[i]a </tt>
and<tt> +/[i]a </tt>and<tt> +\[i]a </tt>
apply the (possibly derived) function preceding the brackets
&ldquo;along axis<tt> i</tt>&rdquo; 
of the argument<tt> a</tt>&nbsp;.<tt> </tt>
For example:</p>

<pre>
   ⊢a←2 3⍴⍳6
0 1 2
3 4 5

   ⌽[0]a            +/[0]a            +\[0]a
3 4 5            3 5 7             0 1 2
0 1 2                              3 5 7
</pre>

<p>Phrases of the form<tt> f[i]a </tt>
can be re-expressed in
terms of the rank conjunction. 
For example,<tt> ⌽[i]a </tt>
and<tt> +/[i]a </tt>and<tt> +\[i]a </tt>
can be expressed as<tt> ⊖⍤k&nbsp;a </tt>
and<tt> +⌿⍤k&nbsp;a </tt>
and<tt> +⍀⍤k&nbsp;a</tt>&nbsp;,<tt> </tt> 
respectively, where<tt> k←(⍴⍴a)-i</tt>&nbsp;.</p>

<p>Similar remarks apply to a dyad, 
that is,<tt> a,[i] b </tt>is equivalent 
to<nobr><tt> a ⍪⍤k b ⊣ k←(⍴⍴a)-i</tt>&nbsp;.</nobr></p>

<p>A fractional value of<tt> i </tt>
in the expression<tt> a,[i]b </tt>provides
<i>lamination</i>, inserting a new axis 
of length<tt> 2 </tt>between
axes<tt> ⌊i </tt>and<tt> ⌈i</tt>&nbsp;.<tt> </tt>
For example:</p>

<pre>
   a←3+b←⍳3
   a,[.5]b                a,[¯.5]b
3 0                    3 4 5
4 1                    0 1 2
5 2
</pre>

<p>The verb<tt> ,¨&lt; </tt>is equivalent 
to<tt> ,[¯.5]</tt>&nbsp;,<tt> </tt>
and<tt> ,¨&lt;⍤k ←→ ,[¯.5+(⍴⍴a)-k]</tt>&nbsp;.</p>


<a name="3d"></a>
<p><b>D. Canonical Function Definition</b></p>

<p>In most dialects, the system 
function<tt> ⎕fx </tt>applies to
a character matrix argument that represents a function in
canonical form, and establishes the definition of the function.
The first row of the matrix is called a <i>header</i>; 
it is a paradigm of the use of the function 
(such as<nobr><tt> 'z←a plus b'</tt>)</nobr><tt> </tt>
followed by a list of those names that are to be made
local to the function, each prefaced by a semicolon. 
For example:</p>

<pre>
   m                         ⎕fx m           
z←a root b;c              root
c←÷a
z←b*c

   2 root 64                 3 root 64
8                         4
</pre>

<p>The major anomaly to be noted in canonical definition
is that although<tt> ⎕fx </tt>produces a function (verb), 
it is itself
a function rather than an operator (adverb or conjunction).
Moreover, it produces a defined function not as an explicit
result to which a name may be assigned, but rather as a
covert effect, a function with a specific name determined
by the header of the argument of<tt> ⎕fx</tt>&nbsp;.</p>

<p>The major deficiencies are:</p>

<table>
<tr><td valign=top>a)</td><td>&nbsp;</td><td>
a) The inability to make self-reference to the function
being defined, as provided by the symbol<tt> $ </tt>
in the definition produced by the 
conjunction<tt> ∇</tt>&nbsp;,<tt> </tt>
by any means other than the explicit name 
specified in the header.
This makes it impossible to produce 
a recursive definition
in which the function can be safely renamed.
An attempt to make a systematic name substitution
in the argument of<tt> ⎕fx </tt>will founder 
on any use of 
execute<tt> </tt>(<tt>⍎</tt>)<tt> </tt>on pronouns.
 </td></tr>
<tr><td valign=top>b)</td><td>&nbsp;</td><td>
A branch in canonical definition can specify 
only a beginning point<tt> b</tt>&nbsp;,<tt> </tt>
the subsequent sequence being limited
to the specific 
sequence<tt> b+1</tt>&nbsp;,<tt> b+2</tt>&nbsp;,<tt> </tt>
etc., to the point of the next branch. 
In a definition of the form<tt> m∇d</tt>&nbsp;,<tt> </tt>
the branch<tt> →←l </tt>can specify an arbitrary sequence of
any length, as determined 
by the list<tt> l</tt>&nbsp;.<tt> </tt>
For example,
the expression<tt> →←(k⍴2),4 </tt>
will repeat<tt> </tt>(<tt>k </tt>times) the
single line<tt> 2</tt>&nbsp;,<tt> </tt>
and then finish with<tt> 4</tt>&nbsp;;<tt> </tt>
and if<tt> l1 </tt>is any label, 
then<tt> →←,&gt;k⍴&lt;l1 </tt>
will repeat<tt> k </tt>
times the entire segment 
whose beginning is labelled by<tt> l1</tt>&nbsp;.
 </td></tr>
</table>

<p>Most APL systems provide special editing facilities to
make convenient the revision of functions 
defined in canonical form. 
Corresponding editing facilities can be provided
for direct definition by writing editing functions in APL
using<nobr><tt> ⎕fx edit ⎕cr 'f' </tt>&nbsp;,</nobr><tt> </tt> 
where<tt> ⎕cr </tt>yields the matrix
that represents the function named<tt> f</tt>&nbsp;.<tt> </tt> 
However, the general editing facilities 
provided on modern computing systems
(particularly those with screen terminals) 
often make such special editing unnecessary.</p>

<p>APL systems also provide facilities for monitoring and
controlling the execution (<i>trace</i> and <i>stop</i>) 
of canonically defined functions. 
Editing to insert expressions such as<tt> ⎕← </tt>
or<tt> m </tt>(where<tt> m </tt>is any desired 
monitoring function whose explicit
result is its argument) 
can provide equivalent facilities
for functions produced 
by the conjunction<tt> ∇</tt>&nbsp;.</p>

<p>Any function definition 
of the form<tt> ⎕fx&nbsp;t </tt>can be
mimicked by an expression 
of the form<tt> f←m∇d</tt>&nbsp;,<tt> </tt>and the
appropriate values of<tt> m </tt>or<tt> d </tt>
can be obtained from<tt> t </tt>rather simply. 
For example, in any assignment to a global variable,
the arrow<tt> ← </tt>
must be replaced by<tt> &#x2345; </tt>
and a branch of the 
form<tt> →u/l1,12,13 </tt>
may be replaced by<tt> →←&gt;0{u/l1⊃l2⊃l3</tt>&nbsp;.</p>

<a name="3d1"></a>
<p><b>Niladic functions</b>. The function<tt> f </tt>
defined by<nobr><tt> ⎕fx 2 4⍴'z←f z←○a' </tt></nobr>
is said to be <i>niladic</i> because the header
indicates no explicit argument; it behaves syntactically as
a noun, although its result may vary because of its dependence
on the pronoun<tt> a</tt>&nbsp;.</p>

<p>The behaviour of a niladic function is therefore the
same as that of a normal function provided with an argument.
If the result of a function does not depend on the
explicit argument, then any argument may be used. For
example, if<tt> g←'○a'∇''</tt>&nbsp;,<tt> </tt>
then the phrase<tt> g∘ </tt> is equivalent
to the niladic function<tt> f </tt>defined above.</p>

<a name="3d2"></a>
<p><b>Adverbs and Conjunctions</b>. Some dialects provide for the
definition of adverbs and conjunctions, using the canonical
scheme used for defining functions, but allowing the use of
parentheses in the header as follows:

<table>
<tr><td><tt>z←a(f adv g) b</tt>&nbsp;</td><td>&nbsp;</td><td>Conjunction<tt> → </tt>Conjunction</td></tr>
<tr><td><tt>z← (f adv g) b</tt>&nbsp;</td><td>&nbsp;</td><td>Conjunction<tt> → </tt>Adverb</td></tr>
<tr><td><tt>z←a(f adv) b </tt>&nbsp;</td><td>&nbsp;</td><td>Adverb<tt> → </tt>Conjunction</td></tr>
<tr><td><tt>z← (f adv) b</tt>&nbsp;</td><td>&nbsp;</td><td>Adverb<tt> → </tt>Adverb</td></tr>
</table>


<a name="3e"></a>
<p><b>E. Comments and Statement Separators</b></p>

<p>Anything following a comment 
symbol<tt> </tt>(<tt>⍝</tt>)<tt> </tt>in an expression
is ignored in its execution. Comment can be similarly
added to the end of a line by appending
<nobr><tt> ⊣'This is is a comment'</tt>&nbsp;,</nobr><tt> </tt>
but can also be inserted anywhere in a line.
Thus:</p>

<pre>
   a←⍵× ⊢'count to n'⊢ ⍳n← ⊢'length of r' ⊢ ⍴r
</pre>

<p>Expressions using the statement 
separator<tt> </tt>(<tt>⋄</tt>)<tt> </tt>can be
mimicked by expressions using the verb <i>left</i>. 
The primary difference is that the separation 
imposed by<tt> ⊣ </tt>follows the
normal rules for order of execution. 
For example, either of
the following expressions will determine 
the coefficients<tt> c </tt>
of a polynomial equivalent 
to a polynomial with roots<tt> r</tt>&nbsp;:</p>

<pre>
   n←⍴r⋄b←n⍴2⋄t←b⊤⍳×/b⋄s←(⍳1+n)∘.=+⌿t⋄c←s+.×p⊣p←r×.*t
   c←s+.×p⊣p←r×.*t⊣s←(⍳1+n)∘.=+⌿t⊣t←b⊤⍳×/b⊣b←n⍴2⊣n←⍴r
</pre>

<p>Since<tt> ⊣ </tt>is a normal verb with simple properties, 
the phrase<tt> b⊣b </tt>can be simplified to<tt> b</tt>&nbsp;,<tt> </tt>
and (since<tt> p </tt>is used nowhere else) 
the phrase<tt> p⊣p← </tt>can be omitted entirely,
allowing the second expression to be simplified to:</p>

<pre>
   c←s+.×r×.*t⊣s←(⍳1+n)∘.=+⌿t←b⊤⍳×/b←n⍴2⊣n←⍴r
</pre>

<p>The difficulty with the seemingly-simple statement
separator is that it raises questions about many issues, such
as the behaviour of a branch between separators, and the interaction
between separators and comments. An indication
of the complexity is given by the index entry 
for &ldquo;diamond&rdquo; in Berry 
<acronym title="Berry, P.C., SHARP APL Reference Manual, 
(with Additions and Corrections). Toronto, 
I.P. Sharp Associates, 1981. ISBN 0 86493 0011.">[8]</acronym>;
references are made to eight distinct sections
of the manual.</p>


<a name="3f"></a>
<p><b>F. Permissive Treatment of One-Element Arrays</b></p>

<p>Most dialects are permissive 
in allowing one-element lists 
(and sometimes one-element arrays of any rank) 
to be treated exactly as the corresponding scalar. 
For example, the shapes 
of<tt> (,2)⌽⍳5 </tt>and<tt> 2⌽⍳5 </tt>
are both<tt> 5</tt>&nbsp;,<tt> </tt>although the
shape of the former should be<tt> 1&nbsp;5</tt>&nbsp;.</p>

<p>In dialects which assign ranks to primitive verbs,
agreement with the established permissive definition 
is obtained by making the rank unbounded, 
thus permitting any desired behaviour. 
In such cases, standard behaviour for a
primitive<tt> p </tt>can be obtained 
by imposing the proper rank<tt> r</tt>&nbsp;,<tt> </tt>
as in<tt> p⍤r</tt>&nbsp;.</p>

<p>For example, the fundamental definition of 
antibase<tt> </tt>(<tt>⊤</tt>)<tt> </tt>
is on a list left argument and a scalar right argument, 
and it therefore has rank<tt> 1&nbsp;0</tt>&nbsp;.<tt> </tt> 
However, because the extra result
axis was traditionally placed first rather than last, 
dialects assign it unbounded right rank. 
Standard behaviour can thus be obtained 
by using<tt> ⊤⍤1&nbsp;0</tt>&nbsp;.<tt> </tt> 
For example, most dialects would yield:</p>

<pre>
   ⊢m←2 2 2⊤⍳2*3
0 0 0 0 1 1 1 1
0 0 1 1 0 0 1 1
0 1 0 1 0 1 0 1
</pre>

<p>whereas<nobr><tt> 2 2 2⊤⍤1 0 ⍳2*3 </tt></nobr>
would yield<tt> ⍉m</tt>&nbsp;.
<br>&nbsp;</p>



<a name="4"></a>
<p><b>IV. Verbs</b></p>

<p>The ranks specified for a function are <i>very important</i> in
reading its definition, since the basic definition is given only
for cells of the indicated rank, and extension to higher-rank
arrays follows the general rules for verbs stated 
in <a href="APLDictionary1.htm#2b">Section II.B</a>. 
For example, the ranks of the verb<tt> ⌽ </tt>
are<nobr><tt> 1 0 1 </tt></nobr>
(monadic, left dyadic, and right dyadic, respectively), 
and<tt> ⌽⍵ </tt>need therefore be explicitly defined 
only for the simple case of a list. 
Similarly, the dyadic case need be defined
only for a scalar left argument and a list right argument.
For example:</p>

<pre>
   2⌽⍳5                     1 3⌽2 5⍴⍳10
2 3 4 0 1                1 2 3 4 0
                         8 9 5 6 7
</pre>

<p>Unless otherwise clear from the definition of a verb,
the rank of the result it produces is the same as the rank
of its right argument. For example, the 
functions<tt> +</tt>&nbsp;,<tt> -</tt>&nbsp;,<tt> ×</tt>&nbsp;,<tt> ⌊</tt>&nbsp;,<tt> </tt>
and<tt> *</tt>&nbsp;,<tt> </tt>
all produce item results, 
but<tt> ⍺?⍵ </tt>(as stated in its definition) does not.</p>

<p>The first line of each main entry contains:</p>

<table>
<tr><td valign=top nowrap>&#149;&nbsp;</td><td>symbols of the verbs treated
 </td></tr>
<tr><td valign=top>&#149; &nbsp;</td><td><b>Rank</b>: 
followed by the ranks in the order <i>monadic</i>,
<i>left</i>, <i>right</i>, 
each indicated by a digit, the symbol<tt> ¯ </tt> 
(for unbounded), or<tt> * </tt>for an undefined case
 </td></tr>
<tr><td valign=top>&#149; &nbsp;</td><td>the heading<tt> v⌿: </tt> 
followed by the identity element 
(or if none exists) for each function, 
as defined in the discussion of<tt> ⌿ </tt>in Section V
 </td></tr>
<tr><td valign=top>&#149; &nbsp;</td><td>the names 
of the verbs 
(as in Floor/Ceiling; Minimum/Maximum for<tt> ⌊&nbsp;⌈</tt>). 
Although these names are
suggested for general use, they are often replaced by
words suited to a given context. 
See <a href="APLDictionary1.htm#2g">Section II.G</a>
and <a href="APLDictionary1.htm#tab4">Table 4</a>.
 </td></tr>
</table>

<p>It should not be surprising that many of the names do
not have the form of English verbs; English phrases such
as<tt> 3 </tt><i>and</i><tt> 4</tt>&nbsp;,<tt> 3 </tt><i>plus</i><tt> 4</tt>&nbsp;,<tt> 3 </tt><i>times</i><tt> 4</tt>&nbsp;,<tt> </tt>
and<tt> p </tt><i>or</i><tt> q </tt>denote the
action by prepositions or conjunctions rather than by verbs,
and even where a verb is available 
(as in <i>deny</i><tt> p </tt>for<tt> ~p</tt>) 
it may be more appropriate to use an adjective 
(as in <i>not</i><tt> p</tt>).</p>

<span style='font-size:5pt'><p>&nbsp;</p></span>


<a name="plus"></a>
<a name="minus"></a>
<a name="times"></a>
<a name="divide"></a>
<table><td width=100><tt>+ - × ÷ </tt></td>
 <td width=120>Rank:<tt> 0 0 0</tt></td>
 <td width=100><tt>v⌿: 0 0 1 1</tt></td>
 <td>Mate/Minus/Trend/Per; </td></tr>
<tr><td align=right colspan=4>
Plus/Minus/Times/Per &nbsp;</td></tr>
</table>

<b>Monad</b>. The following definitions 
and examples apply:

<table>
<tr><td>Mate </td><td>&nbsp;</td><td><tt>+⍵ ←→ (|⍵×⍵)÷⍵</tt></td><td>&nbsp;</td><td><tt>&nbsp; &nbsp;+3j5 ←→ 3j¯5  </tt></td></tr>
<tr><td>Minus</td><td>&nbsp;</td><td><tt>-⍵ ←→ 0-⍵     </tt></td><td>&nbsp;</td><td><tt>&nbsp; &nbsp; &nbsp;-7 ←→ ¯7    </tt></td></tr>
<tr><td>Trend</td><td>&nbsp;</td><td><tt>×⍵ ←→ ⍵÷|⍵    </tt></td><td>&nbsp;</td><td><tt>×3 0 ¯5 ←→ 1 0 ¯1</tt></td></tr>
<tr><td>Per  </td><td>&nbsp;</td><td><tt>÷⍵ ←→ 1÷⍵     </tt></td><td>&nbsp;</td><td><tt>&nbsp; &nbsp; &nbsp;÷4 ←→ .25   </tt></td></tr>
</table>

<p><b>Dyad</b>. These functions are defined as in elementary arithmetic,
except that<tt> 0÷0 </tt>is defined as<tt> 0</tt>&nbsp;,<tt> </tt>
for reasons presented by McDonnell 
<acronym title="McDonnell E.E., “Zero Divided by Zero”, New York: 
Association for Computing Machinery, 
Proceedings of APL76, pp. 295-302.">[9]</acronym>. 
Most dialects define<tt> 0÷0 </tt>as<tt> 1</tt>&nbsp;,<tt> </tt>
and most restrict the domains to real numbers.</p>

<span style='font-size:5pt'><p>&nbsp;</p></span>


<a name="star"></a>
<a name="log"></a>
<table><td width=100><tt>* ⍟</tt></td>
 <td width=120>Rank:<tt> 0 0 0</tt></td>
 <td width=100><tt>v⌿: 1 *</tt></td>
 <td>Power/Log; Power/Log</td></tr>
</table>
<span style='font-size:1pt'><p>&nbsp;</p></span>

<b>Monad</b>. The <i>exponential</i>
<acronym title="Gellert, W., et al, 
The VNR Concise Encyclopedia of Mathematics, 
Van Nostrand Reinhold.">[10]</acronym>
denoted by<tt> *⍵ </tt>is equivalent
to<tt> </tt><i>e</i><tt>*⍵</tt>&nbsp;,<tt> </tt>
where <i>e</i> is the base of the natural logarithms, 
given approximately by:

<pre>
   *1
2.718281828
</pre>

<p>The <i>natural logarithm</i><tt> ⍟ </tt>
is inverse to<tt> *</tt>&nbsp;,<tt> </tt>
that is,<tt> ⍵ ←→ ⍟*⍵ ←→ *⍟⍵</tt>&nbsp;.<tt> </tt>
Moreover,<tt> ⍟⍵ ←→ </tt><i>e</i><tt>⍟⍵</tt>&nbsp;.</p>

<p><b>Dyad</b>.<tt> a*2 </tt>
and<tt> a*3 </tt>and<tt> a*.5 </tt>
are the square, cube, and
square root of<tt> a</tt>&nbsp;.<tt> </tt>
The general definition of<tt> ⍺*⍵ </tt>
is<tt> *⍵*⍟⍺</tt>&nbsp;,<tt> </tt>
and applies for complex numbers as well as real. 
For the simple case of an integer right argument 
it is equivalent to<tt> ×/⍵⍴⍺</tt>&nbsp;;<tt> </tt> 
in particular,<tt> ×/ </tt>applied to an empty list 
yields<tt> 1</tt>&nbsp;,<tt> </tt>
and<tt> ⍺*0 </tt>is<tt> 1 </tt>
for any<tt> ⍺</tt>&nbsp;,<tt> </tt>
including the case where<tt> ⍺ </tt>is zero.
The expression<tt> ⍺*⍵ </tt>is often read 
as<tt> </tt>&ldquo;<tt>⍺ </tt>to the power<tt> ⍵</tt>&rdquo;.</p>

<p>The base-<tt>b </tt>logarithm<tt> b⍟⍵ </tt>is inverse to power, 
in the sense that<tt> ⍵ ←→ b⍟b*⍵ ←→ b*b⍟⍵</tt>&nbsp;.</p>

<span style='font-size:5pt'><p>&nbsp;</p></span>


<a name="lt"></a>
<table><td width=100><tt>&lt;</tt></td>
 <td width=120>Rank:<tt> ¯ 0 0</tt></td>
 <td width=100><tt>v⌿: 0</tt></td>
 <td>Box; Before</td></tr>
</table>
<span style='font-size:1pt'><p>&nbsp;</p></span>

<b>Monad</b>. The result of<tt> &lt;⍵ </tt>
is a scalar encoding of<tt> ⍵ </tt>in
the sense that it has rank<tt> 0 </tt>
and can be decoded (by<tt> &gt;</tt>).<tt> </tt>
Moreover<tt> &lt;⍵ </tt>differs from<tt> ⍵</tt>&nbsp;.<tt> </tt> 
See the discussion of boxed
nouns in <a href="APLDictionary1.htm#2a4">Section II</a>, 
and of their display 
under<tt> ⍕</tt>&nbsp;.<br>

<p><b>Dyad</b>. The result of<tt> ⍺&lt;⍵ </tt>is<tt> 1 </tt>if<tt> ⍺ </tt>
is less than<tt> ⍵</tt>&nbsp;,<tt> </tt>and is<tt> 0 </tt>
otherwise. 
Also see<tt> ≤</tt>&nbsp;.</p>

<span style='font-size:5pt'><p>&nbsp;</p></span>


<a name="le"></a>
<table><td width=100><tt>≤</tt></td>
 <td width=120>Rank:<tt> 1 0 0</tt></td>
 <td width=100><tt>v⌿: 1</tt></td>
 <td>Cycle; Fore</td></tr>
</table>
<span style='font-size:1pt'><p>&nbsp;</p></span>

<b>Monad</b>. If<tt> s </tt>is a mix 
(as defined under<tt> ]</tt>),<tt> </tt>
and if<tt> s{a </tt>
replaces<tt> i{a </tt>by<tt> j{a</tt>&nbsp;,<tt> </tt>
and<tt> j{a </tt>by<tt> k{a</tt>&nbsp;,<tt> </tt>
and<tt> k{a </tt>by<tt> i{a</tt>&nbsp;,<tt> </tt>
then the list<tt> i,j,k </tt>
is said to be a <i>cycle</i> 
of the mix<tt> s</tt>&nbsp;.<tt> </tt> 
Every mix can be conceived as a collection 
of disjoint cycles of various lengths, 
including length one for those elements that
do not move. For example, 
if<nobr><tt> s←4 5 2 1 0 3</tt>&nbsp;,</nobr><tt> </tt> 
then<tt> s </tt>
has the cycles<nobr><tt> 5 3 1 </tt></nobr>
and<tt> 4&nbsp;0 </tt>
and<tt> 2</tt>&nbsp;.<br>

<p>A mix<tt> c </tt>is said 
to be a <i>cycle</i> representation 
of a mix<tt> s </tt>if the cycles of<tt> s </tt>
are the boxed elements of the 
vector<tt> b←(a=⌈\a)1⍤&lt;a←(⍴c)|c</tt>&nbsp;.<tt> </tt> 
For example:</p>

<pre>
   c←2 4 0 5 3 1
   (c=⌈\c)1⍤&lt;c
|¯||¯¯¯||¯¯¯¯¯|
|2||4 0||5 3 1|
|_||___||_____|
</pre>

<p>and<tt> c </tt>is therefore the cycle representation 
of the mix<nobr><tt> s←4 5 2 1 0 3 </tt></nobr>used above.</p>

<p>If<tt> s </tt>is a mix, then<tt> ≤s </tt>
yields its cycle representation;<tt> ≥ </tt>
is the inverse function, 
and<tt> ≥≤s </tt>is the standard 
form of<tt> s</tt>&nbsp;.<tt> </tt> 
The results of both<tt> ≥ </tt>and<tt> ≤ </tt>
are mixes in standard form.</p>

<p>More generally, 
if the elements of<tt> ⍵ </tt>are distinct 
nonnegative integers, 
then<tt> (≤⍵)≡≤⍵,(⍳⌈/⍵)~⍵</tt>&nbsp;.<tt> </tt> 
For example,<nobr><tt> (≤3 5 1)<nobr>≡≤3 5 1 0 2 4</tt>&nbsp;.</nobr><tt> </tt> 
In other words, the missing elements 
of<tt> ⍳1+⌈/⍵ </tt>
are first appended to produce
a complete permutation.</p>

<p><b>Dyad</b>. The result of<tt> ⍺≤⍵ </tt>
is<tt> 1 </tt>if<tt> ⍺ </tt>is less than or equal to<tt> ⍵ </tt>
and<tt> 0 </tt>otherwise. 
However, the comparison is made with a
<i>tolerance</i> specified 
by the system variable<tt> ⎕ct </tt>as 
follows:<tt> ⍺≤⍵ </tt>is<tt> 1 </tt>if<tt> |⍺-⍵ </tt>
does not exceed<tt> ⎕ct </tt>multiplied by the
larger of their magnitudes, 
that is, if<tt> |⍺-⍵ </tt>is less than or
equal to<tt> ⎕ct×(|⍺)⌈|⍵</tt>&nbsp;.</p>

<p>Similar comparisons apply to the other relations. 
For example,<tt> ⍺≥⍵ </tt>is<tt> 1 </tt>
if<tt> |⍺-⍵ </tt>is greater than or equal 
to<tt> ⎕ct×⌈/|⍺,⍵</tt>&nbsp;,<tt> </tt>
and<tt> ⍺&gt;⍵ </tt>
is<tt> 1 </tt>if<tt> (⍺≥⍵)^~⍺=⍵</tt>&nbsp;.<tt> </tt>
The <i>custom</i> 
conjunction<tt> </tt>(<tt>:</tt>&nbsp;,<tt> </tt><a href="APLDictionary1.htm#colon">which see</a>) 
may be used with any of the relations, 
that is,<tt> ⍺<:t ⍵ </tt>provides comparison with a
tolerance<tt> t</tt>&nbsp;,<tt> </tt>
regardless of the value of<tt> ⎕ct</tt>&nbsp;.</p>

<p>The relations are commonly applied to boolean arguments.
For example,<tt> ⍺≠⍵</tt>&nbsp;,<tt> </tt>
is the <i>exclusive-or</i> of boolean<tt> ⍺ </tt>
and<tt> ⍵</tt>&nbsp;,<tt> </tt>
and<tt> ⍺≤⍵ </tt>
is <i>implication</i>.</p>

<span style='font-size:5pt'><p>&nbsp;</p></span>


<a name="ge"></a>
<table><td width=100><tt>≥</tt></td>
 <td width=120>Rank:<tt> 1 0 0</tt></td>
 <td width=100><tt>v⌿: 1</tt></td>
 <td>Mix; Aft</td></tr>
</table>
<span style='font-size:1pt'><p>&nbsp;</p></span>

<b>Monad</b>. The function<tt> ≥ </tt>
is the inverse of<tt> ≤</tt>&nbsp;,<tt> </tt>
and<tt> ≥⍵ </tt>produces
the standard representation of the mix whose cycle
representation is<tt> ⍵</tt>.&nbsp;<tt> </tt>
See<tt> ≤ </tt>and<tt> ]</tt>&nbsp;.

<p>More generally, if the elements of<tt> ⍵ </tt>
are distinct nonnegative
integers, then<tt> ≥⍵</tt>&nbsp;,<tt> </tt>
is the mix whose elements are
determined by<tt> ⍵</tt>&nbsp;,<tt> </tt>
in the normal manner, but whose missing
elements<tt> (⍳⌈/⍵)~⍵ </tt>are treated as cycles 
of length<tt> 1</tt>&nbsp;,<tt> </tt>and
therefore stay fixed. 
For example,<nobr><tt> (≥5 3 1)≡0 5 2 1 4 3</tt>&nbsp;,</nobr><tt> </tt>
and the corresponding standard cycle 
representation<tt> ≤≥5 3 1 </tt>
is<nobr><tt> 0 2 4 5 3 1</tt>&nbsp;.</nobr></p>

<p><b>Dyad</b>. The result of<tt> ⍺≥⍵</tt>&nbsp;,<tt> </tt>
is<tt> 1 </tt>if a is greater than or equal
to<tt> ⍵</tt>&nbsp;,<tt> </tt>
and is<tt> 0 </tt>otherwise. 
Also see<tt> ≤</tt>&nbsp;.</p>

<span style='font-size:5pt'><p>&nbsp;</p></span>


<a name="gt"></a>
<table><td width=100><tt>&gt;</tt></td>
 <td width=120>Rank:<tt> 0 0 0</tt></td>
 <td width=100><tt>v⌿: 0</tt></td>
 <td>Open; After</td></tr>
</table>
<span style='font-size:1pt'><p>&nbsp;</p></span>

<b>Monad</b>. Open<tt> </tt>(<tt>&gt;</tt>)<tt> </tt>
is the inverse of box<tt> </tt>(<tt>&lt;</tt>)&nbsp;,<tt> </tt>
that is,<tt> ⍵≡&gt;&lt;⍵</tt>&nbsp;.<tt> </tt>
When applied to an open array 
(that contains no boxed elements), 
open has no effect. For example:

<pre>
   ><1 2 3               >1 2 3
1 2 3                 1 2 3
</pre>

<p>The opened elements are brought to a common shape
as discussed in <a href="APLDictionary1.htm#assembly">Section II.B</a>.</p>

<p><b>Dyad</b>. The result of<tt> ⍺&gt;⍵ </tt>is<tt> 1 </tt>
if<tt> ⍺ </tt>is greater than<tt> ⍵</tt>&nbsp;,<tt> </tt>
and is<tt> 0 </tt>otherwise. Also see<tt> ≤</tt>&nbsp;.</p>

<span style='font-size:5pt'><p>&nbsp;</p></span>


<a name="eq"></a>
<table><td width=100><tt>=</tt></td>
 <td width=120>Rank:<tt> ¯ 0 0</tt></td>
 <td width=100><tt>v⌿: 1</tt></td>
 <td>Nub in; Equal</td></tr>
</table>
<span style='font-size:1pt'><p>&nbsp;</p></span>

<b>Monad</b>. The function<tt> = </tt>
classifies the major cells of the nub of<tt> ⍵ </tt>
according to equality with the major cells 
of<tt> ⍵</tt>&nbsp;,<tt> </tt>
producing an<tt> m </tt>by<tt> n </tt>boolean table, 
where<tt> m </tt>and<tt> n </tt>are the
number of major cells of the nub of<tt> ⍵ </tt>
(that is,<tt> ↑⍵</tt>)<tt> </tt> 
and of<tt> ⍵</tt>&nbsp;,<tt> </tt>respectively. 
For example:

<pre>
   a              ↑a           =a
allah          alh          1 0 0 1 0
                            0 1 1 0 0
                            0 0 0 0 1

   b              ↑b           =b
abc            abc          1 0 1
def            def          0 1 0
abc
</pre>

<p>Formally,<tt> =⍵ ←→ (MC↑⍵)∘.=MC⍵</tt>&nbsp;,<tt> </tt>
where<tt> MC:,&lt;⍤¯1 ⍵ </tt>
boxes the major cells of its argument. 
Hence,<tt> =s ←→ =,s </tt>
for any scalar argument<tt> s</tt>&nbsp;.</p>

<p><b>Dyad</b>. The function<tt> = </tt>
is a rank<tt> 0 </tt>form 
of match<tt> </tt>(<tt>≡</tt>);<tt> </tt>
formally,<nobr><tt> ⍺ ≡⍤0 ⍵</tt>&nbsp;.</nobr><tt> </tt>
See<tt> ≡ </tt>and<tt> ≤</tt>&nbsp;.<tt> </tt>
For example:</p>

<pre>
   ⊢a←3 5⍴'abcdefghijklmno'
abcde
fghij
klmno

   a=⌽a            ⊢b←&lt;⍤1 a
0 0 1 0 0       |¯¯¯¯¯||¯¯¯¯¯||¯¯¯¯¯|
0 0 1 0 0       |abcde||fghij||klmno|
0 0 1 0 0       |_____||_____||_____|

   b=⌽b
0 1 0
</pre>

<p><b>Dialects</b>. Some define<tt> = </tt>
differently on boxed arrays; 
it may therefore be necessary to 
use<nobr><tt> ⍺ ≡⍤0 ⍵ </tt></nobr>instead of<tt> ⍺=⍵</tt>&nbsp;.</p>

<span style='font-size:5pt'><p>&nbsp;</p></span>


<a name="ne"></a>
<table><td width=100><tt>≠</tt></td>
 <td width=120>Rank:<tt> ¯ 0 0</tt></td>
 <td width=100><tt>v⌿: 0</tt></td>
 <td>Nubsieve; Unequal</td></tr>
</table>
<span style='font-size:1pt'><p>&nbsp;</p></span>

<b>Monad</b>. <i>Nubsieve</i><tt> </tt>(<tt>≠⍵</tt>)<tt> </tt> 
provides a boolean list that selects
the nub of<tt> ⍵</tt>&nbsp;,<tt> </tt>
that is,<tt> ↑⍵ ←→ (≠⍵)⌿⍵</tt>&nbsp;.<tt> </tt>
For example,<tt> ≠'abacus' ←→ <nobr>1 1 0 1 1 1</nobr></tt>&nbsp;,<tt> </tt>
and<tt> ≠3 ←→ 1⍴1</tt>&nbsp;,<tt> </tt>
Formally,<tt> ≠⍵ ←→ (c⍳c)=⍳0{⍴c←,<⍤¯1&nbsp;⍵</tt>&nbsp;.</p>

<p><b>Dyad</b>. The result of<tt> ⍺≠⍵ </tt>is<tt> 1 </tt>
if<tt> ⍺ </tt>is unequal<tt> ⍵</tt>&nbsp;,<tt> </tt>
and is <tt>0</tt> otherwise. 
Also see<tt> ≤</tt>&nbsp;.</p>

<span style='font-size:5pt'><p>&nbsp;</p></span>


<a name="match"></a>
<table><td width=100><tt>≡</tt></td>
 <td width=120>Rank:<tt> * ¯ ¯</tt></td>
 <td width=100>&nbsp;</td>
 <td>; Match</td></tr>
</table>
<span style='font-size:1pt'><p>&nbsp;</p></span>

<b>Dyad</b>. The expression<tt> ⍺≡⍵ </tt>
yields a scalar boolean 
result;<tt> 1 </tt>if the arguments match completely, 
in shapes, in boxing
structure, and in elements. 
The comparison of numeric
elements is made under the normal rules of comparison
tolerance described under<tt> ≤</tt>&nbsp;.<tt> </tt>
In particular, the custom conjunction applies 
to<tt> ≡</tt>&nbsp;.</p>

<span style='font-size:5pt'><p>&nbsp;</p></span>


<a name="tilde"></a>
<table><td width=100><tt>~</tt></td>
 <td width=120>Rank:<tt> 0 ¯ ¯</tt></td>
 <td width=100>&nbsp;</td>
 <td>Not; Less</td></tr>
</table>
<span style='font-size:1pt'><p>&nbsp;</p></span>

<b>Monad</b>.<tt> ~ </tt>applies only to 
boolean arguments, 
and negates them:<tt> ~0&nbsp;1 ←→ 1&nbsp;0</tt>&nbsp;.

<p><b>Dyad</b>. The result of<tt> ⍺~⍵ </tt>
is the array whose major cells are
the major cells of<tt> ⍺ </tt>less the major cells 
of<tt> ⍵</tt>&nbsp;.<tt> </tt>
For example:</p>

<pre>
   (⍳6)~7 2 4
0 1 3 5
   ⍺←3 4⍴'abcdefghijkl'
   ⍵←2 4p 'mnopabcd'
   ⍺~⍵
efgh
ijkl
</pre>

<p>Formally,<tt> ⍺~⍵ ←→ (~(MC ⍺)∊MC ⍵)⌿⍺</tt>&nbsp;,<tt> </tt>
where<tt> MC:&nbsp;,<⍤¯1&nbsp;⍵</tt>&nbsp;.<tt> </tt> 
The result of<tt> a~a~b </tt>is called the <i>intersection</i>
of<tt> a </tt>and<tt> b</tt>&nbsp;.<tt> </tt> 
For example, if<tt> a←⍳6 </tt>and<tt> b←7&nbsp;4&nbsp;2</tt>&nbsp;,<tt> </tt>
then<tt> a~a~b </tt>is<tt> 2&nbsp;4</tt>&nbsp;.<tt> </tt> 
The result for any scalar argument<tt> s </tt>
is the same as for<tt> ,s</tt>&nbsp;.</p>

<span style='font-size:5pt'><p>&nbsp;</p></span>


<a name="and"></a>
<a name="or"></a>
<a name="nand"></a>
<a name="nor"></a>
<table><td width=100 valign=top><tt>^ ∨ ⍲ ⍱</tt></td>
 <td width=120 valign=top>Rank:<tt> * 0 0</tt></td>
 <td width=100 valign=top><tt>v⌿: 1 0 * *</tt></td>
 <td>; And (LCM)/Or (GCD)/<br>Nand/Nor</td></tr>
</table>
<span style='font-size:1pt'><p>&nbsp;</p></span>

<b>Dyad</b>.<tt> p^q </tt>is the least common multiple 
of<tt> p </tt>and<tt> q</tt>&nbsp;,<tt> </tt>
and<tt> p∨q </tt>is the greatest common divisor. 
For example:</p>

<pre>
   12∨30                 12∧30
6                     60
</pre>

<p>For boolean arguments<tt> </tt>(<tt>0 </tt>and<tt> 1</tt>)
the<tt> ∨ </tt>is equivalent to the logical <i>or</i>,
and the<tt> ∧ </tt>to the logical <i>and</i>.  Thus:</p>

<pre>
  p←0 0 1 1
  q←0 1 0 1
  p^q                    p∨q
0 0 0 1               0 1 1 1
</pre>

<p>Finally,<tt> ⍲ </tt>and<tt> ⍱ </tt>
(called <i>nand</i> and <i>nor</i>)
are defined only on boolean arguments,
and are negations of<tt> ^ </tt>
and<tt> ∨</tt>&nbsp;,<tt> </tt>
that is:</p>

<pre>
  (⍺⍲⍵)≡(~⍺∨⍵)        (⍺⍱⍵)≡(~⍺∨⍵)
</pre>

<span style='font-size:5pt'><p>&nbsp;</p></span>


<a name="dex"></a>
<a name="lev"></a>
<table><td width=100><tt>⊢ ⊣</tt></td>
 <td width=120>Rank:<tt> ¯ ¯ ¯</tt></td>
 <td width=100>&nbsp;</td>
 <td>Right/Left; Right/Left</td></tr>
</table>
<span style='font-size:1pt'><p>&nbsp;</p></span>

<b>Monad</b>. Both<tt> ⊢ </tt>and<tt> ⊣ </tt>
are <i>identity</i> functions, 
that is,<tt> ⊢⍵ ←→ ⍵</tt>&nbsp;,<tt> </tt> 
and<tt> ⊣⍵ ←→ ⍵</tt>&nbsp;.

<p><b>Dyad</b>. <i>Left</i> yields the left argument, 
and <i>right</i> the right, 
that is,<nobr><tt> ⍺ ←→ ⍺⊣⍵ </tt></nobr>
and<nobr><tt> ⍵ ←→ ⍺⊢⍵</tt>&nbsp;.</nobr></p>

<span style='font-size:5pt'><p>&nbsp;</p></span>


<a name="base"></a>
<table><td width=100><tt>⊥</tt></td>
 <td width=120>Rank:<tt> 1 1 1</tt></td>
 <td width=100>&nbsp;</td>
 <td>Words; Base</td></tr>
</table>
<span style='font-size:1pt'><p>&nbsp;</p></span>

<b>Monad</b>.<tt> ⊥ </tt>provides the word formation 
described in <a href="APLDictionary1.htm#1">Section I</a>.
For example:

<pre>
   ⊥'3 4.5×ABC DE⍴Q'
|¯¯¯¯¯||¯||¯¯¯||¯¯||¯||¯|
|3 4.5||×||ABC||DE||⍴||Q|
|_____||_||___||__||_||_|
</pre>

<p>It is equivalent to the function<tt> words </tt>defined below:</p>

<pre>
words:f(c g(q∧¯1↓0,q←∨⌿3↑c)⍱q∧¯1↓0,q) 1⍤&lt;,⍵⊣
                                    q←q∨≠\q←,¯1↑c←(&lt;,⍵)∊⍤&gt;p
    f:(0≠,⍴⍤c)/c←(r⊥⍤r←⌽¨&gt;a)↓¨&gt;(-a⊥⍤&gt;a←⍵=¨&gt;' ')↓¨&gt; ⍵
    g:⍵\q⍲¯1↓0,q←⍵/(∨⌿⍺[1 3;])∨(⍺[2;])∧1↓(∨⌿⍺[1 2;]),0
</pre>

<p>The parameter<tt> p </tt>is a 5-element list of boxed lists consisting
of the quad<tt> </tt>(<tt>⎕</tt>)<tt> </tt>and the native alphabet, 
the macron<tt> </tt>(<tt>¯</tt>)<tt> </tt>and the decimal digits, 
the period<tt> </tt>(<tt>.</tt>),<tt> </tt> 
the space, and the quote<tt> </tt>(<tt>'</tt>).</p>

<p><b>Dyad</b>.<tt> ⍺⊥⍵ </tt>is the item<tt> +/W×⍵</tt>&nbsp;,<tt> </tt>
where<tt> W </tt>is the list of <i>weights</i>
such that<tt> k{W </tt>is<tt> ×/(k+1)↓(⍴⍵)⍴⍺</tt>&nbsp;.<tt> </tt>
For example if<nobr><tt> ⍺←24 60 60</tt></nobr>
and<nobr><tt> ⍵←1 2 3</tt>&nbsp;,</nobr><tt> </tt>
then<tt> 10⊥⍵ </tt>is<tt> 123</tt>&nbsp;,<tt> </tt>and:</p>

<pre>
   ⍺⊥⍵             ⊢W←1+⌽×\⌽⍺,1              +/W×⍵
3723            3600 60 1                 3723
</pre>

<p><b>Dialects</b>. Most dialects differ in their treatment of higher
rank arguments, for both<tt> ⊥ </tt>and<tt> ⊤</tt>&nbsp;.</p>

<span style='font-size:5pt'><p>&nbsp;</p></span>


<a name="representation"></a>
<table><td width=100><tt>⊤</tt></td>
 <td width=120>Rank:<tt> * 1 0</tt></td>
 <td width=100>&nbsp;</td>
 <td>; Antibase</td></tr>
</table>
<span style='font-size:1pt'><p>&nbsp;</p></span>

<b>Dyad</b>. For simple cases,<tt> ⊤ </tt>is inverse to 
the base<tt> ⊥</tt>&nbsp;.<tt> </tt>
For example, if<nobr><tt> ⍺←24 60 60</tt>&nbsp;,</nobr><tt> </tt>
then<nobr><tt> ⍺⊥1 2 3 </tt></nobr>
is<tt> 3723 </tt>and<tt> ⍺⊤3723 </tt>
is<nobr><tt> 1 2 3</tt>&nbsp;.</nobr><tt> </tt>
More generally (since the largest number representable 
in base<tt> ⍺ </tt>is<tt> ⍺⊥⍺-1</tt>),<tt> ⍺⊥⍺⊤⍵ </tt>equals<tt> (x/⍺)|⍵ </tt>
rather than<tt> ⍵</tt>&nbsp;.<tt> </tt>
For example,<tt> (3⍴10)⊤3247 </tt>
is<nobr><tt> 2 4 7</tt>&nbsp;,</nobr><tt> </tt>
and<nobr><tt> (3⍴10)⊥2 4 7 </tt></nobr>
is<tt> 247</tt>&nbsp;,<tt> </tt>
that is,<tt> (×/3⍴10)|3247</tt>&nbsp;.

<span style='font-size:5pt'><p>&nbsp;</p></span>


<a name="execute"></a>
<table><td width=100><tt>⍎</tt></td>
 <td width=120>Rank:<tt> 1 1 1</tt></td>
 <td width=100>&nbsp;</td>
 <td>Execute; Execute</td></tr>
</table>
<span style='font-size:1pt'><p>&nbsp;</p></span>

<b>Monad</b>. The result of lea is the result of executing the
character list =. For example, l'a+3+t~' assigns the value
7 to the name a. The result of t' ' is *.

<p><b>Dyad</b>. The result of alto is the result of lo if ~a is a
valid expression (that is, its execution completes properly).
Otherwise, the result of ale0 is the result of ia, which may
itself invoke an error report. Effects may also be produced
by any partial execution of ~ that has occurred.</p>

<span style='font-size:5pt'><p>&nbsp;</p></span>


<a name="format"></a>
<table><td width=100><tt>⍕</tt></td>
 <td width=120>Rank:<tt> ¯ 2 2</tt></td>
 <td width=100>&nbsp;</td>
 <td>Format; Format</td></tr>
</table>
<span style='font-size:1pt'><p>&nbsp;</p></span>

Briefly stated, the format function produces a character
array that represents numeric results in familiar forms.
However, the exact rules for rounding the numbers, for inserting
spaces to align columns, and for replacing leading
and trailing zeros by spaces, become rather intricate.

<p><b>Monad</b>. If<tt> ⍵ </tt>is an open character array, 
then<tt> ⍵≡⍕⍵</tt>&nbsp;.<tt> </tt>
Although the monadic rank of<tt> ⍕ </tt>is unbounded, 
we will first restrict attention to arguments 
of rank<tt> 2</tt>&nbsp;.</p>

<p>If<tt> ⍵ </tt>is an open numeric, 
then<tt> ⍕⍵ </tt>is, with the exceptions
stated below, equivalent 
to<tt> ((m+1),⎕pp)⍕⍵</tt>&nbsp;,<tt> </tt>
where<tt> m </tt>is
the greatest width required for any of the fields, 
and where<tt> ⎕pp </tt>is the system variable 
that controls printing precision.</p>

<p>Leading zeros preceding the decimal point and trailing
zeros following it are replaced by spaces, except that
if all digits are zero, the one before the decimal point
is retained, and the decimal point itself is replaced by
a space.</p>

<p>In extending the definition of<tt> ⍕ </tt>
to arguments of rank greater 
than<tt> 2</tt>&nbsp;,<tt> </tt> 
it is necessary to choose a value of<tt> m </tt>for use
in the expression<tt> ((m+1),⎕pp)⍕⍵ </tt>
that is large enough for all 
of the individual rank<tt> 2 </tt>cells. 
We therefore define a
dyadic function<tt> F </tt>of rank<tt> 0&nbsp;2 </tt>
such that<tt> n&nbsp;F&nbsp;⍵ </tt>is equivalent
to<tt> ⍕⍵ </tt>if<tt> 2=⍴⍴⍵ </tt>
and if<tt> n </tt>is the maximum field width required. 
Moreover, if<tt> om </tt>is the overall maximum width
required for all rank<tt> 2 </tt>cells 
of an argument<tt> ⍵</tt>&nbsp;,<tt> </tt>
then<tt> om&nbsp;F&nbsp;⍵ </tt>
provides a useful extension to arguments of higher rank.
We adopt this extension 
as a definition of<tt> ⍕</tt>&nbsp;,<tt> </tt>
with a modification that inserts rows 
of spaces between the results for
individual cells. 
Using the subsequent definition of<tt> ⍕ </tt>on
boxed arrays, these insertions 
may be expressed as follows:</p>

<p>If<tt> 3=⍴⍴⍵</tt>&nbsp;,<tt> </tt>
and if<tt> r←om&nbsp;F&nbsp;⍵</tt>&nbsp;,<tt> </tt>
then the result of<tt> ⍕⍵ </tt>
matches<tt> ⍕⍪&lt;⍤2r</tt>&nbsp;,<tt> </tt>
evaluated with<tt> ⎕ps←0 0 1 0</tt>&nbsp;.</p>

<p>If<tt> 3&lt;n←⍴⍴⍵</tt>&nbsp;,<tt> </tt>then<tt> ⍕⍵ </tt>
matches<tt> ⍕⍪&lt;⍤2⍕⍤(n-1)⍵</tt>&nbsp;.</p>

<p>The degenerate cases of vector and scalar arguments
are defined by the expression<tt> ,⍕⍉⍪,⍵</tt>&nbsp;.</p>

<p>The normal display of any result<tt> r </tt>
matches the display of<tt> ⍕r</tt>&nbsp;.<tt> </tt>
For example:</p>

<pre>
   1 100∘.+.1 1 ∘.×¯1 0 1
  0.9     1     1.1
  0       1     2

 99.9   100   100.1
 99     100   101
</pre>

<p>If the argument of<tt> ⍕ </tt>
is a boxed array, a width sufficient
for all elements in a column of the display is allotted
for each column, and sufficient height is similarly allotted
to each row. The justification within the allotted space is
then determined by the first two elements 
of the &ldquo;position and spacing&rdquo; 
system variable<tt> ⎕ps </tt>as follows: justify top,
centre, or bottom in each row if<tt> 0{⎕ps </tt>
is<tt> ¯1</tt>&nbsp;,<tt> 0</tt>&nbsp;,<tt> </tt>
or<tt> 1</tt>&nbsp;,<tt> </tt>and
left, centre, or right in each column 
if<tt> 1{⎕ps </tt>is<tt> ¯1</tt>&nbsp;,<tt> 0</tt>&nbsp;,<tt> </tt>
or<tt> 1</tt>&nbsp;.</p>

<p>Space between successive rows and columns is allotted
as follows:<tt> |2{⎕ps </tt>spaces between successive rows,
and<tt> |3{⎕ps </tt>spaces between successive columns. Finally,
each element is bordered by horizontal 
lines<tt> </tt>(<tt>¯ </tt>and<tt> _</tt>)<tt> </tt>
immediately above and below 
if<tt> 2{⎕ps </tt>is negative, and by
vertical lines immediately to the left and right 
if<tt> 3{⎕ps </tt>is negative.</p>

<p>For example:</p>

<pre>
   b←2 2⍴(3 5⍴'ab')⊃1 2⊃'cd'⊃'efghij'
   ⎕ps←-1 1 3 3
   b
|¯¯¯¯¯| |¯¯¯|
|ababa| |1 2|
|babab| |___|
|ababa|
|_____|

|¯¯|    |¯¯¯¯¯¯|
|cd|    |efghij|
|__|    |______|

   ⎕ps←0 0 0 0
   b
ababa
babab 1 2
ababa
 cd  efghiff
</pre>

<p>All other examples of boxed arrays in the dictionary
are shown as if <nobr><tt> ⎕ps←-1 1 2 2</tt>&nbsp;.</nobr></p>

<p>The custom conjunction (which see) applies to<tt> ⍕ </tt>to
specify the position and spacing independently 
of<tt> ⎕ps</tt>&nbsp;,<tt> </tt>as
in<nobr><tt> ⍕:(-1 1 3 3)</tt>&nbsp;.</nobr></p>

<p><b>Dialects</b>. Display, and the result 
of<tt> ⍕</tt>&nbsp;,<tt> </tt>differ somewhat
among dialects. 
However, most control display and the
result of w by the system name<tt> ⎕pp </tt>
(printing precision),
whose value determines the maximum space 
allotted to the printing of each number. 
They also use<tt> ⎕pw </tt>to control
the <i>printing width</i> (the point at which the line is broken
to continue indented on a subsequent line); this applies to
normal display, but not to the result of<tt> ⍕</tt>&nbsp;.</p>

<p><b>Dyad</b>. The expression<tt> ⍺⍕⍵ </tt>
yields a character array; the
form of the result is controlled 
by<tt> ⍺ </tt>in two different ways,
depending upon whether<tt> ⍺ </tt>
is numeric or character.</p>

<p>If<tt> ⍺ </tt>and<tt> ⍵ </tt>
are both numeric tables, the result of<tt> ⍺⍕⍵ </tt>is
a table of<tt> 1↑⍴⍵ </tt>rows, 
in which groups of adjacent columns
(called <i>fields</i>) are determined 
by each column of<tt> ⍵ </tt>together
with a two-element control vector<tt> c</tt>&nbsp;.<tt> </tt> 
The control for field<tt> j </tt>
is given by<tt> c←j{⍺</tt>&nbsp;;<tt> </tt>
the element<tt> 0{c </tt>determines the width
of the field, and<tt> 1{c </tt>
determines the number of decimal
places used.</p>

<p>If<tt> k←1{c </tt>is negative, 
the result is represented 
in <i>exponential form</i>, 
as illustrated below:</p>

<pre>
   (⍉⍪8 ¯3)⍕ ⍉123.45678 .00876543
1.23E2 8.77E¯3
</pre>

<p>To obtain the exponential form 
of a number<tt> n</tt>&nbsp;,<tt> </tt>
it is first <i>normalized</i> to the 
equivalent<tt> m×10*p</tt>&nbsp;,<tt> </tt>
where<tt> p </tt>is an integer, 
and<tt> 0≤|m</tt>&nbsp;,<tt> </tt>
and<tt> 10&gt;|m</tt>&nbsp;.<tt> </tt>
The number<tt> m </tt>is then
rounded to<tt> |k </tt>places 
(as described below) and is suffixed
by one of the forms<tt> e¯qr </tt>
or<tt> e&nbsp;qr</tt>&nbsp;,<tt> </tt>
where<tt> qr </tt>denotes the
representation of<tt> |p</tt>&nbsp;.</p>

<p>The rounding of a number<tt> n </tt>
is determined by<tt> k←1{c </tt>as follows:</p>

<pre>
   (10*-|k)×⌊.5+(|n)×10*|k
</pre>

<p>The character string that represents this result is then
prefixed by enough spaces to bring it to the width determined
by<tt> 0{c</tt>&nbsp;,<tt> </tt>
after being prefixed by the 
symbol<tt> ¯ </tt>if<tt> n </tt>is negative.</p>

<p>The width of a field is equal 
to<tt> 0{c</tt>&nbsp;,<tt> </tt>
unless<tt> 0{c </tt>is zero, 
in which case the width is one more than the maximum
width required to represent any one of the numbers
in the entire column of<tt> ⍵</tt>&nbsp;.</p>

<p>The degenerate case of a scalar or vector right argument
is treated as<tt> ,⍺⍕⍉⍪,m</tt>&nbsp;.<tt> </tt>
The degenerate case of a (2-element) vector left argument 
is treated as<tt> (((1↑⍴⍵),2)⍴⍺)⍕⍵</tt>&nbsp;,<tt> </tt>
and the case of a scalar left argument<tt> ⍺ </tt>
is treated as the vector<tt> 0,⍺</tt>&nbsp;.</p>

<p><b>Dialects</b>. Dialects commonly use the ravel of the table left
argument described above, rather than the table itself. For
example:</p>

<pre>
   ⊢a←3 2⍴24.34 ¯57.684 ¯0.45 ¯134.27
24.34     ¯57.684
¯0.45    ¯134.27
24.34     ¯57.684

   12 3⍕a
      24.340     ¯57.684
      ¯0.450    ¯134.270
      24.340     ¯57.684

   5 2 8 0⍕a          8 2 0 ¯2⍕a
24.34     ¯58         24.34 ¯5.8e1
¯0.45    ¯134         ¯0.45 ¯1.3e2
24.34     ¯58         24.34 ¯5.8e1
</pre>

<p>If<tt> ⍺ </tt>is a character array, 
the expression<tt> ⍺⍕⍵ </tt>is called
<i>format by example</i>, 
since<tt> ⍺ </tt>provides a pattern for the result.
In the standard case of a single 
cell,<tt> ⍺ </tt>is a one-row table,
and the last dimension of the table<tt> ⍺⍕⍵ </tt>
agrees with the last
dimension of<tt> ⍺</tt>&nbsp;.</p>

<p>Since the left rank 
of<tt> ⍕ </tt>is<tt> 2</tt>&nbsp;,<tt> </tt>
the standard case requires
a table left argument<tt> ⍺</tt>&nbsp;;<tt> </tt>
since that table consists of a single row, 
the equivalent degenerate 
case<tt> (,⍺)⍕⍵ </tt>is commonly used. 
Degenerate cases of the right argument<tt> ⍵ </tt>are treated
as<tt> ,⍺⍕⍉⍪,⍵</tt>&nbsp;.<tt> </tt>
For example:</p>

<pre>
   ⍺←'Balance is $(55,510.50)  on 05/55/55'

   ⍺⍕23456.714 61184
Balance is   23,456.71   on 06/11/84

   ⍺⍕456.78, 100⊥6 11 84
Balance is      456.78   on 06/11/84

   ⍺⍕¯23456.714 61184
Balance is $(23,456.71)  on 06/11/84

   ⍺⍕¯456.78 61184
Balance is    $(456.78)  on 06/11/84

   ⊢r←'555.55'⍕1 0 10.1 100              ⍴r
1           10.1  100                 24
</pre>

<p>A numerical field in<tt> ⍺ </tt>
is bounded by blanks or 
(on the right) by the first non-control character 
following a six, and must contain at least one digit. 
The digits in a field are both
place-holders and control characters for that field. 
Nondigits are <i>decorators</i>, simple, 
controlled, or conventional:</p>

<table>
<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
A simple decorator may be embedded in a numerical
field or stand alone; it is reproduced in place.
<br>&nbsp;
 </td></tr>
<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
A controlled decorator is a group of 
one or more characters
immediately adjacent to a leading or trailing
digit in a numerical field that contains 
a<tt> 1</tt>&nbsp;,<tt> 2</tt>&nbsp;,<tt> </tt>or<tt> 3 </tt>
nearer that decorator than a<tt> 4</tt>&nbsp;.<tt> </tt>
For example, if<tt> y </tt>
is<tt> 1&nbsp;¯1∘.×123 321</tt>&nbsp;,<tt> </tt>
then:
<pre>
   'CONTROL55154NOT NOT5q3215CONTROL'⍕y
       123NOT NOT   321
CONTROL123NOT NOT   321CONTROL
</pre>
 </td></tr>
<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
The dot and comma are conventional decorators; they
specify decimal digits or group separators according
to common conventions (as in<tt> 23,456.78</tt>).<tt> </tt>
A dot is a decimal point conventional decorator 
if it either precedes the first digit 
or is surrounded by digits in a numerical field, 
and if it is the only <i>such</i> dot in
the field. A comma is a conventional decorator if it is
surrounded by digits in a numerical field. 
For example:</p>

<pre>
   '5...55.55' ⍕ 1 12.3 123.45
... 1     ...12.3 1...23.45
   'LF,55,525,,5,RT'⍕ 12345 ¯12345 123 ¯123
LF,1,234,,5,RT     1,234,,5       LF,12,,3,RT       12,,3
</pre>
 </td></tr>
</table>

<p>These conventional dots and commas <i>print</i> as the 
elements<tt> 0{⎕fc </tt>and<tt> 1{⎕fc </tt>
of the <i>format control</i> variable<tt> ⎕fc</tt>&nbsp;.<tt> </tt>
(The normal value of<tt> 0&nbsp;1{⎕fc </tt>
is<tt> '.,'</tt>&nbsp;;<tt> </tt>
reversal of these values provides printing 
according to a common European convention.)</p>

<p>A decimal point not followed by a fractional value is
a part of the trailing decorator, and as such is suppressed
according to the rules that apply to any trailing decorator.
For example:</p>

<pre>
   '-5125.POS'⍕ 123 ¯123
123.POS -123
</pre>

<p>The control characters have the following significance:</p>

<table>
<tr><td valign=top><tt>0</tt>&nbsp;</td><td>&nbsp;</td><td>
<b>Leading/trailing zeros</b>: unused positions are filled
with<tt> 0 </tt>from here toward the decimal point. 
For example:</p>

<pre>
   '55,550.09'⍕1 0 1000.1
1.00     0.0  1,000.10</pre>
 </td></tr>
<tr><td valign=top><tt>1</tt>&nbsp;</td><td>&nbsp;</td><td>
<b>For negative values</b>, the decorator text on this side
(of the decimal point) is included and floats (to abut
the digits of the number); otherwise, it is replaced by
blanks.

<p>The effects of the digits 1,2, and 3 do not depend
in any way on the decimal point. For example:</p>

<pre>
   'THIS1555.55HERE'⍕ 12 ¯12
12        THIS12HERE</pre>
 </td></tr>
<tr><td valign=top><tt>2</tt>&nbsp;</td><td>&nbsp;</td><td>
<p><b>For nonnegative values</b>, the decorator text on this
side is included and floats; otherwise, it is replaced by
blanks.<br>&nbsp;</p>
 </td></tr>
<tr><td valign=top><tt>3</tt>&nbsp;</td><td>&nbsp;</td><td>
<p><b>Float</b>: for all values, the decorator text on this side
floats.<br>&nbsp;</p>
 </td></tr>
<tr><td valign=top><tt>4</tt>&nbsp;</td><td>&nbsp;</td><td>
<b>No float</b>: for all values, the decorator text on this side
does not float; nullifies the floating specified by 
a<tt> 1</tt>&nbsp;,<tt> 2</tt>&nbsp;,<tt> </tt>or<tt> 3 </tt>
further from this side. For example:</p>

<pre>
   '→→55125.5←← →→54124.5←← →→54125.5←← 55124.5←←' 
                                         ⍕ 1 ¯1 +.×4⍴1234
  1234←←   →→ 1234  ←← →→ 1234←←      1234  ←←
→→1234     *********** →→ 1234      →→1234  ←←
</pre>
 </td></tr>
<tr><td valign=top><tt>5</tt>&nbsp;</td><td>&nbsp;</td><td>
<p><b>Normal digit</b>: position available for digit, or for sign
decorator (when supplied and selected 
by<tt> 1</tt>&nbsp;,<tt> 2</tt>&nbsp;,<tt> </tt>
or<tt> 3</tt>).<br>&nbsp;</p>
 </td></tr>
<tr><td valign=top><tt>6</tt>&nbsp;</td><td>&nbsp;</td><td>
<p><b>Field delimiter</b>: next rightward noncontrol character
(that is, any character other than<tt> 01234.56789.,</tt>)<tt> </tt>
starts a new field; needed where fields are not separated
by blank.<br>&nbsp;</p>
 </td></tr>
<tr><td valign=top><tt>7</tt>&nbsp;</td><td>&nbsp;</td><td>
<b>Exponential format</b>: value is represented in exponential
notation; next rightward noncontrol character
(for example,<tt> e</tt>)<tt> </tt>
separates characteristic from mantissa.
Engineering notation differs from scientific notation
in requiring all exponents to be multiples 
of<tt> 3</tt>&nbsp;.<tt> </tt>
For example:

<pre>
   '¯1.75E5 VS ¯155.75E5' ⍕ (10*⍳8)∘.×1 1
1.00E0 VS   1.00E0
1.00E1 VS  10.00E0
1.00E2 VS 100.00E0
1.00E3 VS   1.00E3
1.00E4 VS  10.00E3
1.00E5 VS 100.00E3
1,00E6 VS   1.00E6
1.00E7 VS  10.00E6
</pre>
 </td></tr>
<tr><td valign=top><tt>8</tt>&nbsp;</td><td>&nbsp;</td><td>
<b>&ldquo;Cheque protection&rdquo;</b>: 
unused positions from here to
the decimal point are filled with<tt> 2{⎕fc</tt>&nbsp;.

<pre>
   '$558,555,535.50'⍕ 123 12345 1234567
$******123.00 $***12,345.00 $1,234,567.00
</pre>
 </td></tr>
<tr><td valign=top><tt>9</tt>&nbsp;</td><td>&nbsp;</td><td>
<p><b>Conditional zero-fill</b>: effect same as o for nonzero
values, but blank when value is zero.</p>
 </td></tr>
</table>

<p><b>Notes</b>.</p>

<table>
<tr><td valign=top>a)</td><td>&nbsp;</td><td>
<p>The digit<tt> 6 </tt>provides an additional field break at the
next non-control character. 
This allows, for example,
the use of slashes desired in display of a date as field
delimiters as well. For example:</p>

<pre>
   '06/06/05'⍕7 11 84
07/11/84
</pre>
 </td></tr>
<tr><td valign=top>b)</td><td>&nbsp;</td><td>
<p>The system variable<tt> ⎕fc</tt>&nbsp;,<tt> </tt>
referred to under digit<tt> 8</tt>&nbsp;,<tt> </tt>
contains six elements whose normal values are the
characters:<nobr><tt> . , * * _ ¯</tt>&nbsp;.</nobr>
 <br>&nbsp;</p></td></tr>
<tr><td valign=top>c)</td><td>&nbsp;</td><td>
<p>If space in a field is insufficient to represent a large
element of<tt> ⍵</tt>&nbsp;,<tt> </tt>
then an error is evoked if<tt> 3{⎕fc </tt>
is<tt> '0'</tt>&nbsp;;<tt> </tt>
otherwise the element<tt> 3{⎕fc </tt>
is used to fill the offending field.
 <br>&nbsp;</p></td></tr>
<tr><td valign=top>d)</td><td>&nbsp;</td><td>
<tt> 4{⎕fc </tt>is a &ldquo;pseudo-blank&rdquo;; 
that is, its occurrence in a
decorator displays a blank, but the character does not
delimit a field as a blank would.
 <br>&nbsp;</p></td></tr>
</table>

<span style='font-size:5pt'><p>&nbsp;</p></span>


<a name="circle"></a>
<table><td width=100><tt>○</tt></td>
 <td width=120>Rank:<tt> 0 0 0</tt></td>
 <td width=100>&nbsp;</td>
 <td>Pi; Circle</td></tr>
</table>
<span style='font-size:1pt'><p>&nbsp;</p></span>

<b>Monad</b>. The expression<tt> ○⍵ </tt>is 
equivalent to<tt> pi×⍵</tt>&nbsp;,<tt> </tt>
where<tt> pi </tt>is the ratio of the circumference 
of a circle to its diameter,
and is given approximately by:

<pre>
   ○1
3.141592654
</pre>

<p><b>Dyad</b>. The expressions<tt> k○⍵ </tt>
and<tt> (-k)○⍵ </tt>
produce several families of related functions, 
<i>circular</i> or <i>trigonometric</i>
(for<tt> k∊1&nbsp;2&nbsp;3</tt>),<tt> </tt> 
<i>hyperbolic</i> (for<tt> k∊5&nbsp;6&nbsp;7</tt>),<tt> </tt> 
<i>pythagorean</i> (for<tt> k∊0&nbsp;4&nbsp;8</tt>),<tt> </tt> 
and <i>complex</i> (for<nobr><tt> k∊9 10 11 12</tt>).</nobr><tt> </tt> 
The trigonometric functions are based on radian arguments, and
the sine of<tt> d </tt>degrees would therefore 
be written as<tt> 1○○d÷180</tt>&nbsp;.<tt> </tt>
All apply to complex arguments.</p>

<p>Corresponding positive and negative cases are <i>inverse</i>
in the sense that at least one 
of the identities<tt> ⍵≡k○(-k)○⍵ </tt>
or<tt> ⍵≡(-k)○k○⍵ </tt>
hold (at least within the principal domains,
as defined in 
<acronym title="Gellert, W., et al., 
The VNR Concise Encyclopedia of Mathematics, 
Van Nostrand Reinhold.">[10]</acronym>). 
The cases<tt> 9○⍵ </tt>and<tt> 11○⍵ </tt>give
the real and imaginary parts, 
and<tt> 12○⍵</tt>&nbsp;,<tt> </tt> 
gives the <i>arc</i> of a
polar representation.</p>

<p>As a mnemonic aid it may be noted that 
(except for<tt> k=12</tt>)<tt> </tt>
the expression<tt> k○⍵ </tt>
is <i>even</i> (that is,<tt> k○⍵ ←→ k○-⍵</tt>)<tt> </tt>
if<tt> k </tt>is even, 
and is <i>odd</i> 
(that is,<tt> k○⍵ ←→ -k○-⍵</tt>)<tt> </tt>
if<tt> k </tt>is odd. The definitions follow:</p>

<table>
<tr>
 <td align=center><tt>0</tt></td><td>&nbsp; &nbsp;</td>
 <td align=center><tt>1</tt></td><td>&nbsp; &nbsp;</td>
 <td align=center><tt>2</tt></td><td>&nbsp; &nbsp;</td>
 <td align=center><tt>3</tt></td><td>&nbsp; &nbsp;</td></tr>
<tr>
 <td><tt>(1-⍵*2)*.5</tt></td><td>&nbsp;</td>
 <td><tt>sin ⍵</tt></td><td>&nbsp;</td>
 <td><tt>cos ⍵</tt></td><td>&nbsp;</td>
 <td><tt>tan ⍵</tt></td><td>&nbsp;</td>
 <td><tt>+</tt></td></tr>
<tr>
 <td><tt>(1-⍵*2)*.5</tt></td><td>&nbsp;</td>
 <td><tt>arcsin ⍵</tt></td><td>&nbsp;</td>
 <td><tt>arccos ⍵</tt></td><td>&nbsp;</td>
 <td><tt>arctan ⍵</tt></td><td>&nbsp;</td>
 <td><tt>-</tt></td></tr>
<tr><td>&nbsp;</td></tr>

<tr>
 <td align=center><tt>4</tt></td><td>&nbsp;</td>
 <td align=center><tt>5</tt></td><td>&nbsp;</td>
 <td align=center><tt>6</tt></td><td>&nbsp;</td>
 <td align=center><tt>7</tt></td></tr>
<tr>
 <td><tt>( 1+⍵*2)*.5</tt></td><td>&nbsp;</td>
 <td><tt>sinh ⍵</tt></td><td>&nbsp;</td>
 <td><tt>cosh ⍵</tt></td><td>&nbsp;</td>
 <td><tt>tanh ⍵</tt></td><td>&nbsp;</td>
 <td><tt>+</tt></td></tr>
<tr>
 <td><tt>(¯1+⍵*2)*.5</tt></td><td>&nbsp;</td>
 <td><tt>arcsinh ⍵</tt></td><td>&nbsp;</td>
 <td><tt>arccosh ⍵</tt></td><td>&nbsp;</td>
 <td><tt>arctanh ⍵</tt></td><td>&nbsp;</td>
 <td><tt>-</tt></td></tr>
<tr><td>&nbsp;</td></tr>

<tr>
 <td align=center><tt>8</tt></td><td>&nbsp;</td>
 <td align=center><tt>9</tt></td><td>&nbsp;</td>
 <td align=center><tt>10</tt></td><td>&nbsp;</td>
 <td align=center><tt>11</tt></td></tr>
<tr>
 <td><tt>&nbsp;(¯1-⍵*2)*.5</tt></td><td>&nbsp;</td>
 <td><tt>(⍵++⍵)÷2</tt></td><td>&nbsp;</td>
 <td><tt>|⍵</tt></td><td>&nbsp;</td>
 <td><tt>(⍵-+⍵)÷0j2</tt></td><td>&nbsp;</td>
 <td><tt>+</tt></td></tr>
<tr>
 <td><tt>-(¯1-⍵*2)*.5</tt></td><td>&nbsp;</td>
 <td><tt>⍵</tt></td><td>&nbsp;</td>
 <td><tt>+⍵</tt></td><td>&nbsp;</td>
 <td><tt>⍵×0j1</tt></td><td>&nbsp;</td>
 <td><tt>-</tt></td></tr>
<tr><td>&nbsp;</td></tr>

<tr>
 <td align=center><tt>12</tt></td><td>&nbsp;</td>
 <td align=center><tt>13</tt></td><td>&nbsp;</td>
 <td align=center><tt>14</tt></td><td>&nbsp;</td>
 <td align=center><tt>15</tt></td></tr>
<tr>
 <td><tt>(⍟×⍵)÷0j1</tt></td><td>&nbsp;</td>
 <td><tt>⍵</tt></td><td>&nbsp;</td>
 <td><tt>*⍵</tt></td><td>&nbsp;</td>
 <td><tt>*⍵×0j1</tt></td><td>&nbsp;</td>
 <td><tt>+</tt></td></tr>
<tr>
 <td><tt>*⍵×0j1</tt></td><td>&nbsp;</td>
 <td><tt>⍵</tt></td><td>&nbsp;</td>
 <td><tt>⍟⍵</tt></td><td>&nbsp;</td>
 <td><tt>-0j2×⍟⍵</tt></td><td>&nbsp;</td>
 <td><tt>-</tt></td></tr>
</table>

<p>The custom conjunction (<a href="APLDictionary1.htm#colon">which see</a>) 
can be used to
specify the number of units per quadrant, 
as in<tt> 1○:90 d </tt>to
determine the sine of an angle given in degrees. 
Formally,<tt> k○:q ⍵ ←→ k○.5×○⍵÷q</tt>&nbsp;.</p>

<span style='font-size:5pt'><p>&nbsp;</p></span>


<a name="rotate"></a>
<table><td width=100><tt>⌽</tt></td>
 <td width=120>Rank:<tt> 1 0 1</tt></td>
 <td width=100>&nbsp;</td>
 <td>Reverse; Rotate</td></tr>
</table>
<span style='font-size:1pt'><p>&nbsp;</p></span>

<b>Monad</b>. <i>Reverse</i> reverses the order of a list. 
For example:</p>

<pre>
   ⌽'abc'                ⌽2 3⍴'abcdef'
cba                   cba
                      fed
</pre>

<p><b>Dyad</b>. <i>Rotate</i> cycles the elements 
of a list as illustrated below:</p>

<pre>
   2⌽l←'abcdef'
cdefab
   ¯2⌽l
efabcd
</pre>

<p>For example:</p>

<pre>
   ⊢t←2 3⍴l          1 2⌽t             1⌽t
abc                bca               bca
def                fde               efd
</pre>

<p><b>Dialects</b>. Dialects commonly depart 
from this definition in two significant ways:</p>

<table>
<tr><td valign=top>1.</td><td>&nbsp;</td><td>
If<tt> s </tt>is an item, 
then expressions such as<tt> (,s)⌽⍵ </tt>
and<tt> (1&nbsp;1⍴s)⌽⍵ </tt>are treated as equivalent 
to<tt> s⌽⍵ </tt>rather
than contributing outer axes to the result.
 </td></tr>
<tr><td valign=top>2.</td><td>&nbsp;</td><td>
Since the dyadic ranks are<tt> 0 1</tt>&nbsp;,<tt> </tt>
a right argument of
rank<tt> 1 </tt>should be extended, 
as illustrated by:

<pre>
   1 2 3⌽'abcd'
bcda
cdab
dabc
</pre>

Dialects may yield an error report instead, 
even in those 
<acronym title="Berry, P.C., SHARP APL Pocket Reference, 
Toronto, I.P. Sharp Associates, 1984. 
Publication 0199 8409 E3 R1.">[5]</acronym>
which produce the foregoing result when the
rank adverb is applied, 
as in<nobr><tt> 1 2 3⌽⍤0 1'abcd'</tt>&nbsp;.</nobr>
 </td></tr>
</table>

<span style='font-size:5pt'><p>&nbsp;</p></span>


<a name="rotate0"></a>
<table><td width=100><tt>⊖</tt></td>
 <td width=120>Rank:<tt> ¯ ¯ ¯</tt></td>
 <td width=100>&nbsp;</td>
 <td>Upset; Rowel</td></tr>
</table>
<span style='font-size:1pt'><p>&nbsp;</p></span>

<b>Monad</b>. <i>Upset</i> overturns its argument 
as illustrated below:</p>

<pre>
   ⊢t←3 4⍴'abcdefghijkl'            ⊖t
abcd                             ijkl
efgh                             efgh
ijkl                             abcd
</pre>

<p>It may be expressed in terms of reverse as
follows:<tt> (⊖⍵)≡⍉⌽⍉⍵</tt>&nbsp;.</p>

<p><b>Dyad</b>. <i>Rowel</i> is equivalent 
to<tt> ⌽¨⍉</tt>&nbsp;.<tt> </tt>For example:</p>

<pre>
   0 1 2 3⊖t
afkd
ejch
ibgl
</pre>

<span style='font-size:5pt'><p>&nbsp;</p></span>


<a name="transpose"></a>
<table><td width=100><tt>⍉</tt></td>
 <td width=120>Rank:<tt> ¯ 1 ¯</tt></td>
 <td width=100>&nbsp;</td>
 <td>Cant; Cant</td></tr>
</table>
<span style='font-size:1pt'><p>&nbsp;</p></span>

<b>Monad</b>. This function reverses the order of axes of its
argument. Thus:

<pre>
   ⊢m←3 4⍴⍳12           ⍉m             ⍴⍉m
0  1  2  3          0  4 8          4 3
4  5  6  7          1  5 9
8  9 10 11          2  6 10
                    3  7 11
</pre>

<p>It may be defined in terms of the dyad 
<i>cant</i>:<tt> (⍉⍵)≡(⌽⍳0{⍴⍴⍵)⍉⍵</tt>&nbsp;.</p>

<p><b>Dyad</b>. If<tt> p </tt>is any permutation 
of the axes of array<tt> a</tt>&nbsp;,<tt> </tt>  
then<tt> b←p⍉a </tt>is similar to<tt> a </tt>
except that its axes are permuted;
axis<tt> i </tt>of<tt> a </tt>becomes axis<tt> i{p </tt>
of<tt> b</tt>&nbsp;.<tt> </tt>For example:</p>

<pre>
   ⊢b←(p←1 2 0)⍉a←2 3 4⍴⍳24
 0  4  8                      ⍴b
12 16 20                   4 2 3
        
 1  5  9                      p{⍴b
13 17 21                   2 3 4
        
 2  6 10                      ⍴a
14 18 22                   2 3 4
        
 3  7 11                      ⍴1 0 4 2 3⍉2 3 4 5 6⍴9
15 19 23                   3 2 5 6 4
</pre>

<p>More generally,<tt> q⍉a </tt>is defined 
if<tt> (⍴q)=⍴⍴a </tt>and if
the nub of<tt> q </tt>is a permutation 
(of<tt> ⍳n</tt>&nbsp;,<tt> </tt>
for some<tt> n</tt>).<tt> </tt>
For example, each of the following values 
of<tt> r</tt>&nbsp;,<tt> s</tt>&nbsp;,<tt> </tt>
and<tt> t </tt>are
valid left arguments of<tt> ⍉ </tt>
for a right argument of rank<tt> 4</tt>:</p>

<pre>
   ↑r←2 0 1 2       ↑s←1 0 1 1         ↑t←0 0 0 0
2 0 1            1 0                0
</pre>

<p>Just as for the case<tt> b←p⍉a </tt>where<tt> p </tt>
is a permutation,
the<tt> i</tt>&nbsp;th axis of<tt> a </tt>becomes 
the<tt> i{q </tt>axis of<tt> b←q⍉a</tt>&nbsp;.<tt> </tt>
However, in this case, two or more axes of<tt> a </tt>
may map into a
single axis of<tt> b</tt>&nbsp;,<tt> </tt>
providing a diagonal section of<tt> a</tt>&nbsp;.<tt> </tt>
For example:</p>

<pre>
   a←3 3⍴⍳9                  c←3 5⍴⍳15
0 1 2                      0  1  2  3  4
3 4 5                      5  6  7  8  9
6 7 8                     10 11 12 13 14
 
   0 0⍉a                     0 0⍉c
0 4 8                     0 6 12
</pre>

<p>Formally, if<tt> i </tt>
is any complete index of<tt> q⍉a </tt>
(that is,<tt> (&lt;i){q⍉a </tt>
selects a scalar element of<tt> q⍉a</tt>),<tt> </tt> 
then<tt> (&lt;i){q⍉a </tt>is equivalent to<tt> (&lt;q{i){a</tt>.</p>

<p><b>Dialects</b>. Since the elements 
of the left argument of<tt> ⍉ </tt>are
drawn from<tt> ⍳n</tt>&nbsp;,<tt> </tt>
they commonly depend on the value 
of<tt> ⎕io</tt>&nbsp;,<tt> </tt>
as discussed in <a href="APLDictionary1.htm#2e">Section II.E</a>.
</p>

<span style='font-size:5pt'><p>&nbsp;</p></span>


<a name="stile"></a>
<table><td width=100><tt>|</tt></td>
 <td width=120>Rank:<tt> 0 0 0</tt></td>
 <td width=100><tt>v⌿: 0</tt></td>
 <td>Size; Residue</td></tr>
</table>
<span style='font-size:1pt'><p>&nbsp;</p></span>

<b>Monad</b>. The definition<tt> (⍵×+⍵)*.5 </tt>
yields the <i>size</i> 
or &ldquo;absolute value&rdquo; 
not only for a real argument, 
but also for a complex argument, 
in which case 
the result is the length
of the hypotenuse of a right-angled 
triangle whose side-lengths
are the real and imaginary parts of the number. 
For example,<tt> |3j4 </tt>is<tt> 5</tt>&nbsp;,<tt> </tt>
and<tt> |¯6 </tt>is<tt> 6</tt>.

<p><b>Dyad</b>. The most familiar use of residue is to determine the
remainder resulting from dividing a non-negative integer
dividend by a positive integer divisor. For example:</p>

<pre>
   3|0 1 2 3 4 5 6 7 8
0 1 2 0 1 2 0 1 2
</pre>

<p>The definition<tt> ⍵-⍺×⌊⍵÷⍺+0=⍺ </tt>
extends this notion to
a zero left argument 
(giving the right argument unchanged),
to non- integer right arguments, 
and to negative and fractional left arguments. 
For a negative integer left argument,
the result ranges between the argument and zero, 
as it does for a positive left argument. 
For example:</p>

<pre>
   ¯3|¯4 ¯3 ¯2 ¯1 0 1 2 3 4
¯1 0 ¯2 ¯1 0 ¯2 ¯1 0 ¯2

   1|2.5 3.64 2 ¯1.6
0.5 0.64 0 0.4
</pre>

<p>However, in order to produce a true zero (rather than
a small fraction) for cases 
such as<tt> (÷3)|2÷3</tt>&nbsp;,<tt> </tt>
the residue is made &ldquo;tolerant&rdquo; 
by the following definition:</p>

<pre>
   ⍺|⍵ ←→ ⍵-⍺×⌊s   <font face=Times size=3>if</font> (⍺≠0)^(⌈s)≠⌊s←⍵÷⍺+⍺=0
       ←→ ⍵×⍺=0    <font face=Times size=3>otherwise</font>
</pre>

<p>For example:</p>

<pre>
   .1|2.5 3.64 2 ¯1.6
0 0.04 0 0
</pre>

<p>This definition also applies to complex arguments, using
the complex properties 
of the floor function<tt> ⌊</tt>&nbsp;.</p>

<span style='font-size:5pt'><p>&nbsp;</p></span>


<a name="bang"></a>
<table><td width=100><tt>!</tt></td>
 <td width=120>Rank:<tt> 0 0 0</tt></td>
 <td width=100><tt>v⌿: 1</tt></td>
 <td>Factorial; Out of</td></tr>
</table>
<span style='font-size:1pt'><p>&nbsp;</p></span>

<b>Monad</b>. For a non-negative integer argument, 
the factorial is defined 
by<tt> !⍵ ←→ ×/1+⍳⍵</tt>&nbsp;.<tt> </tt> 
For example,<tt> !4 </tt>
is<nobr><tt> ×/1 2 3 4</tt>&nbsp;,</nobr><tt> </tt>
or<tt> 24</tt>&nbsp;,<tt> </tt>
and<tt> !0 </tt>is<tt> 1</tt>&nbsp;.<tt> </tt> 
For other arguments it is defined
in terms of the <i>gamma</i> function 
<acronym title="Gellert, W., et al, 
The VNR Concise Encyclopedia of Mathematics, 
Van Nostrand Reinhold.">[10]</acronym>
as<tt> !⍵ ←→ gamma ⍵+1</tt>&nbsp;.

<p><b>Dyad</b>. The dyadic case of<tt> ! </tt>
is defined in terms of the beta
function 
<acronym title="Gellert, W., et al, 
The VNR Concise Encyclopedia of Mathematics, 
Van Nostrand Reinhold.">[10]</acronym>; 
subject to the interpretation given below, this
definition is equivalent 
to<tt> ⍺!⍵ ←→ (!⍵)÷(!⍺)×(!⍵-⍺)</tt>&nbsp;.<tt> </tt>
For non-negative integer 
arguments,<tt> ⍺!⍵ </tt>yields the number
of ways of selecting<tt> ⍺ </tt>things from<tt> ⍵ </tt>things; 
this accounts
for the name &ldquo;out of&rdquo;, 
and for its use in producing binomial
coefficients. 
For example,<tt> (⍳n+1)!n←3 ←→ 1&nbsp;3&nbsp;3&nbsp;1</tt>&nbsp;.</p>

<p>For a negative integer<tt> i</tt>&nbsp;,<tt> </tt>
the expression<tt> !i </tt>is not defined,
because near a negative integer 
the magnitude approaches infinity. 
Nevertheless, the definition of<tt> ⍺!⍵ </tt>
can be understood by assuming that 
these infinite values occur
in the expression for the dyadic definition 
in the following
sense:</p>

<table>
<tr><td valign=top>1.</td><td>&nbsp;</td><td>
If<tt> ⍺ </tt>and<tt> ⍵ </tt>are both non-negative, 
but<tt> ⍺&gt;⍵</tt>&nbsp;,<tt> </tt>then 
the term<tt> !⍵-⍺ is </tt>infinite, yielding<tt> 0 </tt>
for the result of<tt> ⍺!⍵</tt>&nbsp;.<tt> </tt>
This agrees with the notion that<tt> ⍺ </tt>things can be picked
from a smaller collection in<tt> 0 </tt>ways.
 </td></tr>
<tr><td valign=top>2.</td><td>&nbsp;</td><td>
If infinite values occur in both numerator and denominator
of the defining expression, they are assumed to cancel. 
This can be seen in the values in the following
function table:

<pre>
   i 0 .!i←(⍳7)-3
  1  ¯2   1   0   0   0   0
  0   1  ¯1   0   0   0   0
  0   0   1   0   0   0   0
  1   1   1   1   1   1   1
 ¯3  ¯2  ¯1   0   1   2   3
  6   3   1   0   0   1   3
¯10  ¯4  ¯1   0   0   0   1
</pre>
 </td></tr>
</table>

<span style='font-size:5pt'><p>&nbsp;</p></span>


<a name="floor"></a>
<a name="ceiling"></a>
<table><td width=100 valign=top><tt>⌊ ⌈</tt></td>
 <td width=120 valign=top>Rank:<tt> 0 0 0</tt></td>
 <td width=100 valign=top><tt>v⌿: ¯ ¯¯</tt></td>
 <td>Floor/Ceiling<br>Minimum/Maximum</td></tr>
</table>

<b>Monad</b>. The expression<tt> ⌊⍵ </tt>
gives the <i>floor</i> or <i>integer part</i>
of<tt> ⍵</tt>&nbsp;.<tt> </tt>
For example,<tt> ⌊3.1 ←→ 3</tt>&nbsp;.<tt> </tt>
However, the implied
comparison with integers is tolerant (see<tt> ≤</tt>),<tt> </tt> 
and the definition of<tt> ⌊⍵ </tt>is therefore 
the largest integer that does not
exceed<tt> ⍵+⎕ct</tt>&nbsp;.<tt> </tt> 
The <i>ceiling</i><tt> ⌈w </tt>is defined by<tt> ⌊¨-⍵ </tt>or,
equivalently,<tt> -⌊-⍵</tt>&nbsp;.<tt> </tt>
For example,<tt> ⌈2+10*⍳14 ←→ 2 </tt>
for a normal setting of<tt> ⎕ct</tt>&nbsp;.

<p>The definitions of floor and ceiling on complex numbers
are rather involved, and the interested reader should
experiment with them on an APL system, 
or consult  McDonnell 
<acronym title="McDonnell, E.E., “Complex Floor”, APL Congress 73, 
North Holland Publishing Company.">[11]</acronym>.</p>

<p><b>Dyad</b>.<tt> a⌊b </tt>yields the lesser 
of<tt> a </tt>
and<tt> b</tt>&nbsp;,<tt> </tt> 
and<tt> a⌈b </tt>yields the greater. 
For example,<tt> 3⌊4 </tt>is<tt> 3</tt>&nbsp;,<tt> </tt>
and<tt> 3⌊¯4 </tt>is<tt> ¯4</tt>&nbsp;.<tt> </tt>
Complex numbers are not in the normal 
domain of<tt> ⌊ </tt>and<tt> ⌈</tt>&nbsp;.</p>

<span style='font-size:5pt'><p>&nbsp;</p></span>


<a name="take"></a>
<a name="drop"></a>
<table><td width=100><tt>↑ ↓</tt></td>
 <td width=120 valign=top>Rank:<tt> ¯ 1 ¯</tt></td>
 <td width=100>&nbsp;</td>
 <td>Nub/Raze; Take/Drop</td></tr>
</table>
<span style='font-size:1pt'><p>&nbsp;</p></span>

<b>Monad</b>.<tt> ↑⍵ </tt>selects 
the <i>nub</i> of<tt> ⍵</tt>&nbsp;,<tt> </tt> 
that is, all of its distinct major cells. 
For example:</p>

<pre>
   ⍵         ↑⍵            ↑3           ⍴↑3
ABC       ABC           3            1
ABC       DEF
DEF
</pre>

<p>Formally,<tt> ↑⍵ ←→ (≠⍵)⌿⍵</tt>&nbsp;.</p>

<p>The <i>raze</i> function is defined 
by<tt> (↓⍵)≡⍪¨&gt;⌿⍵</tt>&nbsp;,<tt> </tt>
and therefore assembles 
along a leading axis the opened elements
of<tt> ⍵</tt>&nbsp;.<tt> </tt>
For example:</p>

<pre>
   ⊢⍵←2⍤&lt;'Now is the time '
|¯¯¯¯||¯¯¯||¯¯¯¯||¯¯¯¯¯|
|Now ||is ||the ||time |
|____||___||____||_____|

   ↓⍵
|¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|
|Now is the time |
|________________|
</pre>

<p><b>Dyad</b>. If<tt> (⍴⍺)=⍴⍴⍵</tt>&nbsp;,<tt> </tt>
and if all elements of<tt> ⍺ </tt>
are nonnegative,
then the shape of<tt> r←⍺↑⍵ </tt>
is<tt> ⍺</tt>&nbsp;;<tt> </tt>
if<tt> i </tt>is any complete
(boxed) index of both<tt> r </tt>
and<tt> ⍵</tt>&nbsp;,<tt> </tt>
then<tt> (i{⍵)≡i{r</tt>&nbsp;;<tt> </tt>
if<tt> i </tt>is an index of<tt> r </tt>only, 
then<tt> i{r </tt>is an array of fill elements, 
zeros if<tt> ⍵ </tt>is entirely open numeric 
or empty<tt> </tt>(<tt>0=×/⍴⍵</tt>)&nbsp;,<tt> </tt>
spaces<tt> </tt>(<tt>' '</tt>)<tt> </tt>
if<tt> ⍵ </tt>is entirely open character, 
and<tt> &lt;'' </tt>otherwise.
For example:</p>

<pre>
   ⊢⍵←3 4⍴⍳12          2 2↑⍵          3 6↑⍵ 
0  1  2  3          0 1            0  1  2  3  0  0
4  5  6  7          4 5            4  5  6  7  0  0
8  9 10 11          8 9            8  9 10 11  0  0
</pre>

<p>More generally,<tt> ⍺ </tt>may have negative items, which
cause selection from the trailing end of the corresponding
axes, and if<tt> (⍴⍺)&lt;⍴⍴⍵ </tt>then<tt> ⍺ </tt>takes 
the<tt> (-⍴⍺)</tt>-cells of<tt> ⍵ </tt>
as defined 
by<tt> ⍺↑⍵ ←→ (⍺,(⍴,⍺)↓⍴⍵)⍴⍵</tt>&nbsp;.<tt> </tt>
For example:</p>

<pre>
   2 ¯2↑⍵        3 ¯6↑⍵                   2↑⍵
2 3           0  0  0  1  2  3         0 1 2 3
6 7           0  0  4  5  6  7         5 6 7 8
              0  0  8  9 10 11
</pre>

<p>As illustrated by the case<tt> 3&nbsp;¯6↑⍵ </tt>above, 
the fill elements
are placed in the leading positions in the case of a
negative argument.</p>

<p><i>Drop</i> is defined similarly, and<tt> ⍺↓⍵ </tt>
drops elements from<tt> ⍵</tt>&nbsp;,<tt> </tt> 
from the trailing end if the element 
of<tt> ⍺ </tt>is negative.
If<tt> (⍴⍺)=⍴⍴⍵</tt>&nbsp;,<tt> </tt>
then the shape of<tt> ⍺↓⍵ </tt>
is<tt> 0⌈(⍴⍵)-|⍺</tt>&nbsp;.<tt> </tt>
For example,<nobr><tt> ¯2 2↓⍵ ←→ 1 2⍴2 3</tt>&nbsp;.</nobr><tt> </tt> 
More generally,<tt> (⍺↓⍵)≡((⍴⍵)↑⍴,⍺)↓⍵</tt>&nbsp;.</p>

<p><b>Dialects</b>. Because of permissive treatments 
of left arguments
such as<tt> (1&nbsp;1,⍴v)⍴v </tt>as a vector, 
dialects commonly
treat the left rank of these 
verbs<tt> </tt>(<tt>↑ </tt>and<tt> ↓</tt>)<tt> </tt>as unbounded.
Moreover,<tt> k↑0⍴a </tt>usually treats the empty 
argument<tt> 0⍴a </tt>
like<tt> a </tt>itself, &ldquo;filling&rdquo; 
with<tt> 0 </tt>or<tt> ' '</tt>&nbsp;.<tt> </tt>
For example,<tt> 3↑0⍴⍳5 ←→ 0&nbsp;0&nbsp;0</tt>&nbsp;,<tt> </tt>
and<tt> 3↑0⍴'abc' ←→ 3⍴'&nbsp;'</tt>&nbsp;.</p>

<span style='font-size:5pt'><p>&nbsp;</p></span>


<a name="gradeup"></a>
<a name="gradedown"></a>
<table><td width=100 valign=top><tt>⍋ ⍒</tt></td>
 <td width=120 valign=top>Rank:<tt> ¯ ¯ ¯</tt></td>
 <td width=100>&nbsp;</td>
 <td>Grade/Downgrade; Grade/Downgrade</td></tr>
</table>

<b>Monad</b>. If<tt> ⍵ </tt>is a list of real numbers, 
and if<tt> g←⍋⍵</tt>&nbsp;,<tt> </tt>
then<tt> g </tt>is the <i>grade</i> 
of<tt> ⍵ </tt>in the sense that<tt> g{⍵ </tt>
is in ascending order. For example:</p>

<pre>
   ⊢g←⍋⍵←3 1 4 2 1 3 3               g{⍵
1 4 3 0 5 6 2                   1 1 2 3 3 3 4
</pre>

<p>Moreover, elements of<tt> g </tt>
that select equal elements of<tt> ⍵ </tt>
(such as<tt> 1&nbsp;4 </tt>and<nobr><tt> 0 5 6</tt>)</nobr><tt> </tt> 
occur in ascending order.</p>

<p>If<tt> ⍵ </tt>is a table,<tt> ⍋⍵ </tt>
grades the <i>rows</i>, 
that is, it grades
the base value of the rows, 
using a base larger than the
magnitude of any of the elements. For example:</p>

<pre>
   ⍵←4 3⍴3 1 4 2 7 9 3 2 0 3 1 4

   ⍵            ⊢g←⍋⍵            g{⍵
3 1 4        1 0 3 2          2 7 9
2 7 9                         3 1 4
3 2 0                         3 1 4
3 1 4                         3 2 0
</pre>

<p>Higher rank arguments are graded as if their major cells
were ravelled, that is,<tt> ⍋⍵ ←→ ⍋,⍤¯1⍵</tt>&nbsp;.</p>

<p>The definition of downgrade<tt> </tt>(<tt>⍒</tt>)<tt> </tt>
is like that of upgrade,
except that<tt> (⍒⍵){⍵ </tt>is in descending order.</p>

<p><b>Dialects</b>. In most dialects the results 
of<tt> ⍋ </tt>and<tt> ⍒ </tt>depend
upon the index origin<tt> ⎕io</tt>&nbsp;,<tt> </tt>
as discussed under dialogue in
<a href="APLDictionary1.htm#2e">Section II.E</a>.</p>

<p><b>Dyad</b>. If<tt> ⍺ </tt>
is a list, 
then<tt> ⍺⍋⍵ </tt>grades<tt> ⍵ </tt>according to
the &ldquo;collating sequence&rdquo; specified 
by<tt> ⍺</tt>&nbsp;.<tt> </tt>
Formally,<tt> ⍺⍋⍵ ←→ ⍋⍺⍳⍵</tt>&nbsp;.<tt> </tt>
For example:</p>

<pre>
   ⍺←'abcde'⊣⍵←'labelled'
   ⍺⍳⍵
5 0 1 4 5 5 4 3

   ⍋⍺⍳⍵                        ⍺⍋⍵
1 2 7 3 6 0 4 5             1 2 7 3 6 0 4 5

   (⍺⍋⍵){⍵   
abdeelll
</pre>

<p>In particular, since<tt> ⍺⍳s </tt>
yields<tt> ⍴⍺ </tt>for any scalar<tt> s </tt>not
in<tt> ⍺</tt>&nbsp;,<tt> </tt>
then<tt> (⍺⍋⍵){⍵ </tt>places all elements 
of<tt> ⍵ </tt>not in<tt> ⍺ </tt>
at the end, in the same relative order 
that they have in<tt> ⍵</tt>&nbsp;.</p>

<p>If<tt> ⍺ </tt>is a table of two fonts such as:</p>

<pre>
   ⍺
abcdefghijklmnonqrstuvwxyz
ABCDEFGHIJKLMNOPQRSTUVWXYZ
</pre>

<p>then<tt> ⍺⍋⍵ </tt>grades<tt> ⍵ </tt>in <i>dictionary</i> order, 
that is, using the ordering of the fonts 
(as specified by the columns) as a
secondary ordering <i>within</i> that specified by the rows. 
For example:</p>

<pre>
   ⍵                      (⍺⍋⍵){⍵
cabal                  baker
Baker                  Baker
baker                  cabal
</pre>

<p>Since dyadic grade is extended to higher rank arguments
in the same systematic manner that monadic grade is, 
we will state its general behaviour in terms of a list right
argument only.</p>

<p>The result of<tt> ⍺⍋⍵ </tt>
is based upon a ranking of the complete
indices of<tt> ⍺ </tt>in<tt> ⍵</tt>&nbsp;.<tt> </tt>
Because earlier axes of<tt> ⍺ </tt>provide
<i>secondary</i> ordering 
within the ordering imposed by later axes, 
the ranking is based upon the monadic grade of the
table of <i>reversed</i> complete indices. 
For example, using the
two-font alphabet<tt> ⍺ </tt>
and the value<tt> ⍵←'abcABC'</tt>&nbsp;,<tt> </tt>
the indices, reversed indices, and ranking are:</p>

<pre>
   i            ⌽i          ⍋⌽i
0 0          0 0         0 3 1 4 2 5
0 1          1 0
0 2          2 0
1 0          0 1
1 1          1 1
1 2          2 1
</pre>

<p>For any argument not in<tt> ⍺</tt>&nbsp;,<tt> </tt>
the complete index is taken as<tt> ⍴⍺</tt>&nbsp;.<tt> </tt>
Formally, then,</p>

<pre>
   ⍺⍋⍵ ←→ ⍋⌽⍺I⍵
</pre>

<p>where<nobr><tt> I:((⍴⍺)⊤⍤1 0 (,⍺)⍳⍵)+(~⍵∊⍺)×⍤0 1⍴⍺ </tt></nobr>
gives the indices of<tt> ⍵ </tt>in<tt> ⍺</tt>&nbsp;.</p>

<p>Finally, if a value<tt> s </tt>
occurs more than once in<tt> ⍺</tt>&nbsp;,<tt> </tt>
its index is taken to be the minimum 
over all of its possible indices. 
For example, if<tt> ⍴⍴⍺ </tt>
is<tt> 3</tt>&nbsp;,<tt> </tt>
and the indices of<tt> s </tt>
are<tt> 2 3 4 </tt>and<tt> 1 5 2</tt>&nbsp;,<tt> </tt> 
the index is taken 
as<nobr><tt> 2 3 4⌊1 5 2</tt>&nbsp;,</nobr><tt> </tt>
that is,<tt> 1&nbsp;3&nbsp;2</tt>.</p>

<p>Alternative formal definitions 
of dyadic<tt> ⍋ </tt>and examples
of its use may be found in 
<acronym title="Wooster, P.K., 
Extended Upgrade and Downgrade, 
SHARP APL Technical Note 41, 
I.P. Sharp Associates.">[14]</acronym>, 
and in the original paper 
<acronym title="Smith, H.J., “Sorting - a New/Old Problem”, APL79 Conference Proceedings, 
APL Quote Quad, ACM.">[15]</acronym> cited therein.</p>

<p>Dyadic downgrade<tt> </tt>(<tt>⍒</tt>)<tt> </tt>
is defined analogously.</p>

<p><b>Dialects</b>. Most dialects exclude 
a scalar right argument
from the domains of<tt> ⍋ </tt>and<tt> ⍒</tt>&nbsp;,<tt> </tt>
and also introduce a dependence
upon the index origin<tt> ⎕io</tt>&nbsp;,<tt> </tt> 
as discussed under
dialogue in <a href="APLDictionary1.htm#2e">Section II.E</a>.
</p>

<span style='font-size:5pt'><p>&nbsp;</p></span>


<a name="eps"></a>
<table><td width=100><tt>∊</tt></td>
 <td width=120>Rank:<tt> ¯ 0 ¯</tt></td>
 <td width=100>&nbsp;</td>
 <td>Raze in; In</td></tr>
</table>
<span style='font-size:1pt'><p>&nbsp;</p></span>

<b>Monad</b>.<tt> ∊⍵ </tt>is an autoclassification 
that determines for each
element of<tt> ⍵ </tt>whether its open contains 
each element of the
open of the raze of<tt> ⍵</tt>&nbsp;,<tt> </tt>
that is,<tt> ∊⍵ ←→ ⍵∊⊂⍤&gt;↓⍵</tt>&nbsp;.<tt> </tt>
The result is a boolean 
of shape<tt> (⍴⍵),⍴↓⍵</tt>&nbsp;.<tt> </tt>
For example:

<pre>
   ⍵←'abc'⊃'dc'⊃'a'

   ↓⍵               ∊⍵
|¯¯¯¯¯¯|         1 1 1 0 1 1
|abcdca|         0 0 1 1 1 0
|______|         1 0 0 0 0 1
</pre>

<p><b>Dyad</b>. The result of<tt> ⍺∊⍵ </tt>
is<tt> 1 </tt>if<tt> ⍺ </tt>
belongs to<tt> ⍵ </tt>in the sense
that<tt> ∨/⍺0&nbsp;.=,⍵</tt>&nbsp;.<tt> </tt>
For example:</p>

<pre>
   'cat'∊'abcd'
1 1 0
</pre>

<span style='font-size:5pt'><p>&nbsp;</p></span>


<a name="epsus"></a>
<table><td width=100><tt>⍷</tt></td>
 <td width=120>Rank:<tt> * ¯ ¯</tt></td>
 <td width=100>&nbsp;</td>
 <td>; In</td></tr>
</table>
<span style='font-size:1pt'><p>&nbsp;</p></span>

<b>Dyad</b>. If<tt> b←⍺⍷⍵</tt>&nbsp;,<tt> </tt>
then the <b>ones</b> in<tt> b </tt>indicate the beginning
points of occurrences of the pattern<tt> ⍺ </tt>
in<tt> ⍵</tt>&nbsp;.<tt> </tt>
For example:

<pre> 
   'co' ⍷ 'cocoa'           (0 1∘.+⍳3) ⍷ 4|i∘.+i←⍳5
1 0 1 0 0                1 0 0 0 0
                         0 0 0 0 0
                         0 0 1 0 0
                         0 1 0 0 0
                         0 0 0 0 0
</pre>

<p>Formally,<tt> ⍺⍷⍵ ←→ ((⍉1,⍪⍴⍺) 3⍤&lt;⍵)∊&lt;⍺</tt>&nbsp;.</p>

<span style='font-size:5pt'><p>&nbsp;</p></span>


<a name="iota"></a>
<table><td width=100><tt>⍳</tt></td>
 <td width=120>Rank:<tt> 1 1 0</tt></td>
 <td width=100>&nbsp;</td>
 <td>Count; Index</td></tr>
</table>
<span style='font-size:1pt'><p>&nbsp;</p></span>

<b>Monad</b>. The verb<tt> ⍳ </tt>&ldquo;counts&rdquo; 
in the sense that<tt> ⍳n </tt>yields a list of the 
first<tt> n </tt>integers beginning with zero. 
Thus,<tt> ⍳3 </tt>is the list<tt> 0&nbsp;1&nbsp;2</tt>&nbsp;.<tt> </tt> 
More generally,<tt> ⍳⍵ </tt>is an array 
of shape<tt> ⍵,⍴⍵ </tt>
such that<tt> (⍴⍵)|&gt;i ←→ i{⍳⍵ </tt>
for any index<tt> i </tt>that
selects a 1-cell of<tt> ⍳⍵</tt>&nbsp;.

<p><b>Dialects</b>. Many dialects treat any one-element argument as
a scalar, rather than allowing it to provide an outer shape.
Thus<nobr><tt> ⍳⍴v←2 3 4 5 </tt></nobr>yields a four-element 
list<nobr><tt> 0 1 2 3 </tt></nobr>
rather than a<tt> 4 </tt>by<tt> 1 </tt>table. 
Moreover, all dialects provide
dependence on<tt> ⎕io </tt>
for both the monadic and dyadic cases,
as discussed under <i>dialogue</i> in 
<a href="APLDictionary1.htm#2e">Section II</a>.</p>

<p><b>Dyad</b>. If<tt> j←⍺⍳⍵</tt>,<tt> </tt>then<tt> j </tt>
is the index of the first occurrence
of<tt> ⍵ </tt>in<tt> ⍺ </tt>
(that is,<tt> ⍵≡j{⍺</tt>),<tt> </tt>
unless<tt> ⍵ </tt>
does not occur in<tt> ⍺</tt>&nbsp;,<tt> </tt>
in which case<tt> j </tt>equals<tt> ⍴⍺</tt>&nbsp;.<tt> </tt>
Formally,<tt> (⍺⍳⍵)≡+/∧\⍺∘.≠⍵</tt>&nbsp;,<tt> </tt>
except that a scalar left argument is not permitted.
</p>

<span style='font-size:5pt'><p>&nbsp;</p></span>


<a name="iotaus"></a>
<table><td width=100><tt>⍸</tt></td>
 <td width=120>Rank:<tt> * ¯ ¯</tt></td>
 <td width=100>&nbsp;</td>
 <td>; Index</td></tr>
</table>
<span style='font-size:1pt'><p>&nbsp;</p></span>

<b>Dyad</b>. The function<tt> ⍸ </tt>
is defined in terms of<tt> ⍷</tt>&nbsp;,<tt> </tt> 
and<tt> i←⍺⍸⍵ </tt>
yields the index in<tt> b←⍵⍷⍺ </tt>
of the first<tt> 1</tt>&nbsp;,<tt> </tt>
or the value<tt> ⍴b </tt>
if<tt> ⍵ </tt>does not occur 
in<tt> ⍺</tt>&nbsp;.<tt> </tt>Thus:</p>

<pre>
   A                  B            A⍸B
0 1 2 0 1 2         4 5         1 1
3 4 5 3 4 5         2 0
1 2 0 1 2 0                        A⍸⌽B
4 5 3 4 5 3                     4 6
</pre>

<span style='font-size:5pt'><p>&nbsp;</p></span>


<a name="rho"></a>
<table><td width=100><tt>⍴</tt></td>
 <td width=120>Rank:<tt> ¯ 1 ¯</tt></td>
 <td width=100>&nbsp;</td>
 <td>Shape; Reshape</td></tr>
</table>
<span style='font-size:1pt'><p>&nbsp;</p></span>

The monadic shape and dyadic reshape functions are
simply related;<tt> ⍺⍴⍵ </tt>produces a result 
of shape<tt> ⍺ </tt>from the
elements of<tt> ⍵</tt>&nbsp;,<tt> </tt>
and therefore<tt> ⍺≡⍴⍺⍴⍵</tt>&nbsp;.<tt> </tt>
For example:

<pre>
   ⊢r←2 3⍴q←'abcdef'             ⍴r
abc                           2 3
def

   q≡,r                ⍴⍴r                 ⍴⍴3
1                   2                   0
</pre>

<p>The last examples<tt> </tt>(<tt>⍴⍴r </tt>and<tt> ⍴⍴3</tt>)<tt> </tt>
illustrate the fact that the rank of an array 
is the shape of its shape; and that
the rank of an item is<tt> 0</tt>&nbsp;,<tt> </tt>
implying that its shape is an empty list; 
and that<tt> (⍳0)⍴,3 </tt>produces an item as a result.</p>

<p>If the number of elements in<tt> p </tt>
equals the number of elements in an array 
of shape<tt> s </tt>(that is,<tt> ×/s</tt>)&nbsp;,<tt> </tt>
then<tt> (,s⍴p)≡,p</tt>&nbsp;.<tt> </tt>
If<tt> (⍴,p)&gt;×/s</tt>&nbsp;,<tt> </tt>
then only the first<tt> ×/s </tt>elements
of<tt> ,p </tt>are used;
if<tt> (⍴,p)&lt;×/s</tt>&nbsp;,<tt> </tt>
then<tt> ,p </tt>is used cyclically. 
For example:</p>

<pre>
   p←2 3⍴'abcdef'

   2 2⍴p                      3 5⍴p
ab                         abcde
cd                         fabcd
                           efabc
</pre>

<span style='font-size:5pt'><p>&nbsp;</p></span>


<a name="query"></a>
<table><td width=100><tt>?</tt></td>
 <td width=120>Rank:<tt> 0 0 0</tt></td>
 <td width=100>&nbsp;</td>
 <td>Roll; Deal</td></tr>
</table>
<span style='font-size:1pt'><p>&nbsp;</p></span>

<b>Monad</b>. The function <i>roll</i> is named from the analogy with
rolling a die to choose one of a set of numbers with equal
probability; the set used for<tt> ?⍵ </tt>is<tt> ⍳⍵</tt>&nbsp;.

<p><b>Dyad</b>. The function <i>deal</i> is named by analogy with dealing
from a pack of cards. 
The result of<tt> ⍺?⍵ </tt>is a list 
of length<tt> ⍺</tt>&nbsp;,<tt> </tt>
all elements being distinct. 
The population drawn from
in each case is<tt> ⍳⍵</tt>&nbsp;.<tt> </tt>
See Berry 
<acronym title="Berry, P.C., SHARP APL Reference Manual, 
(with Additions and Corrections). 
Toronto, I.P. Sharp Associates, 1981. ISBN 0 86493 0011.">[8]</acronym>
for details of the most
commonly used pseudo-random number generator.
<p><b>Dialects</b>. See 
<a href="APLDictionary1.htm#2e">Section II.E</a> concerning dependence on<tt> ⎕io</tt>.
</p>

<span style='font-size:5pt'><p>&nbsp;</p></span>


<a name="comma"></a>
<a name="commabar"></a>
<table><td width=100><tt>, ⍪</tt></td>
 <td width=120>Rank:<tt> ¯ ¯ ¯</tt></td>
 <td width=100>&nbsp;</td>
 <td>Ravel/Table; By/Over</td></tr>
</table>
<span style='font-size:1pt'><p>&nbsp;</p></span>

<b>Monad</b>. <i>Ravel</i><tt> </tt>(<tt>,</tt>)<tt> </tt>
ravels the elements of its arguments in
&ldquo;normal&rdquo; order. 
For example:</p>

<pre>
   ⊢⍺←2 3 4⍴' abcdefghijklmnopqrstuvwx'
abcd
efgh
ijkl

mnop                 ,⍺
qrst              abcdefghijklmnopqrstuvwx
ugwx
</pre>

<p>Normal order means that the results 
are ordered by <i>cells</i>; 
that is, the elements of<tt> i{⍵ </tt>
precede those of<tt> j{⍵ </tt>
if<tt> i&lt;j</tt>&nbsp;;<tt> </tt>
the<tt> ¯2</tt>-cells<tt> </tt>(<tt>0{0{⍵</tt>&nbsp;,<tt> 1{0{⍵</tt>&nbsp;,<tt> </tt>etc.) 
are similarly
ordered within the<tt> ¯1</tt>-cells, and so on.</p>

<p>The result of<tt> ,⍵ </tt>is a list 
of all elements of<tt> ⍵</tt>&nbsp;;<tt> </tt>its
shape is<tt> 1⍴×/⍴⍵</tt>,<tt> </tt>
tn particular, the ravel of an item is a
one-element list.</p>

<p>For a non-scalar argument, 
the expression<tt> ⍪⍵ </tt>produces
a ravel of each of the major cells of<tt> ⍵</tt>&nbsp;,<tt> </tt> 
that is,<tt> (⍪⍵)≡,⍤¯1&nbsp;⍵</tt>&nbsp;.<tt> </tt>
For a scalar argument, the result is a table 
of shape<tt> 1&nbsp;1</tt>&nbsp;;<tt> </tt>
the result for any argument is therefore a table. 
The complete formal definition therefore 
involves two applications
of<tt> ,⍤¯1</tt>&nbsp;,<tt> </tt>
the second one producing an effect only in the
case of a scalar. 
Thus:<tt> (⍪⍵)≡,⍤¯1,⍤¯1&nbsp;⍵</tt>&nbsp;.<tt> </tt>
For example:</p>

<pre>
   ⍪0 1 2             ⍪ 2 2 2 ⍴⍳8             ⍴⍪2
0                  0 1 2 3                 1 1
1                  4 5 6 7
2
</pre>

<p><b>Dyad</b>. The expression<tt> ⍺⍪⍵ </tt>
catenates the major cells 
of<tt> ⍺ </tt>and<tt> ⍵</tt>&nbsp;.<tt> </tt>
For example:</p>

<pre>
   ⊢⍺←2 4⍴'abcdefgh'                 ⍺⍪⍵
abcd                              abcd
efgh                              efgh
                                  ijkl
   ⊢⍵←3 4⍴'ijklmnopqrst'          mnop
ijkl                              qrst
mnop
qrst 
</pre>

<p>If either argument is an item, it is 
first &ldquo;extended&rdquo; by
the expression<tt> (1,1↓⍴⍺)⍴⍵ </tt>
or<tt> (1,1↓⍴⍵)⍴⍺</tt>&nbsp;.<tt> </tt>
If either argument is of rank<tt> 1 </tt>
less than the other, 
its shape is first
augmented by a leading<tt> 1</tt>&nbsp;,<tt> </tt> 
that is, by application of the
expression<tt> &gt;,&lt;</tt>&nbsp;.<tt> </tt>
The resulting major cells must then agree
in shape. For example:</p>

<pre>
   ⍺⍪'A'                     'ABCD'⍪⍵
abcd                      ABCD
efgh                      ijkl
AAAA                      mnop
                          qrst
</pre>

<p>The related function denoted by the comma is best
defined in terms of<tt> ⍪</tt>&nbsp;<tt> </tt>that is:

<pre>
   ⍺,⍵ ←→ ⍺⍪¨⍉⍵ ←→ ⍉(⍉⍺)⍪(⍉⍵)
</pre>

<p>For example:</p>

<pre>
   ⍺,⍺                 'AB',⍺             ⍺,'A'
abcdabcd            Aabcd              abcdA
e£ghefgh            Befgh              efghA
</pre>

<p><b>Dialects</b>. Most dialects restrict catenation 
to arguments of the same type, 
and therefore avoid the introduction of
&ldquo;heterogeneous&rdquo; arrays that may contain 
both numbers and
alphabetics, but some 
[<acronym title="Rabenhorst, D.A., 
APL2 IUP Manual, IBM Corporation.">12</acronym> 
<acronym title="Cheney, C., NARS Manual, 
STSC Inc.">13</acronym>]
do not.</p>

<span style='font-size:5pt'><p>&nbsp;</p></span>


<a name="superset"></a>
<table><td width=100><tt>⊃</tt></td>
 <td width=120>Rank:<tt> ¯ ¯ ¯</tt></td>
 <td width=100>&nbsp;</td>
 <td>Box open; Link</td></tr>
</table>
<span style='font-size:1pt'><p>&nbsp;</p></span>

<b>Monad</b>.<tt> ⊃ </tt>boxes an open argument 
and has no effect on
a boxed argument. The expression<tt> ⍵≡⊃⍵ </tt>
can therefore be
used to determine whether<tt> ⍵ </tt>is open or boxed.

<p><b>Dyad</b>.<tt> ⍺⊃⍵ </tt><i>links</i><tt> ⍺ </tt>
and<tt> ⍵</tt>&nbsp;,<tt> </tt> 
by boxing<tt> ⍺ </tt>and catenating it
to<tt> ⍵</tt>&nbsp;,<tt> </tt>first boxing<tt> ⍵ </tt>if it is open. 
Thus,<tt> (⍺⊃⍵)≡(&lt;⍺),⊃⍵</tt>&nbsp;.<tt> </tt>
For example:</p>

<pre>
   'now'⊃'is'⊃'the'⊃'time'
|¯¯¯||¯¯||¯¯¯||¯¯¯¯|
|now||is||the||time|
|___||__||___||____|
</pre>

<p><b>Dialects</b>. In dialects 
[<acronym title="Rabenhorst, D.A., 
APL2 IUP Manual, IBM Corporation.">12</acronym> 
<acronym title="Cheney, C., NARS Manual, 
STSC Inc.">13</acronym>],<tt> ⊃⍵ </tt>
is a form of open<tt> </tt>(<tt>&gt;</tt>),<tt> </tt>
and<tt> ⍺⊃⍵ </tt>is a form of indexing 
of<tt> ⍵ </tt>by<tt> ⍺</tt>&nbsp;.</p>

<span style='font-size:5pt'><p>&nbsp;</p></span>


<a name="rbracket"></a>
<table><td width=100><tt>]</tt></td>
 <td width=120>Rank:<tt> 1 0 ¯</tt></td>
 <td width=100>&nbsp;</td>
 <td>Mix index; Mix</td></tr>
</table>
<span style='font-size:1pt'><p>&nbsp;</p></span>

<b>Monad</b>. If<tt> ^/(i=⌊i),(i&lt;n),i≥-n←1↑⍴a</tt>&nbsp;,<tt> </tt>
then<tt> i </tt>is an
index of<tt> a</tt>&nbsp;,<tt> </tt>and the major cells 
of<tt> (,i){a </tt>are major cells 
of<tt> a</tt>&nbsp;.<tt> </tt>
If<tt> (n←⍴i)|i </tt>
is also a reordering or <i>permutation</i>
of<tt> ⍳n</tt>&nbsp;,<tt> </tt>
then<tt> i </tt>is called a <i>mix</i> 
of order<tt> n</tt>&nbsp;,<tt> </tt>
and<tt> n|i </tt>is its <i>standard</i> form. 
There are exactly<tt> !n </tt>distinct standard mixes 
of order<tt> n</tt>&nbsp;,<tt> </tt>
and if<tt> S </tt>is a<tt> !n </tt>by<tt> n </tt>
table of them in lexical order 
(such that<tt> (⍋S)≡⍳!n</tt>),<tt> </tt>
then<tt> i </tt>is the <i>mix index</i> of<tt> i{S</tt>.

<p>If<tt> ⍵ </tt>is a mix, 
then<tt> ]⍵ </tt>yields the mix index 
of<tt> (n←⍴⍵)|⍵</tt>&nbsp;;<tt> </tt>
if it is not, the result is<tt> !n</tt>&nbsp;.<tt> </tt>
For example,<nobr><tt> 2=] 0 1 3 2 4 </tt></nobr>
and<nobr><tt> 120=] 0 1 3 0 4 </tt></nobr>
and <nobr><tt> 4=] ¯1 0 1</tt>&nbsp;.</nobr></p>

<p><b>Dyad</b>. If<tt> i </tt>is an index 
of<tt> ⍳n←''⍴⍴a</tt>&nbsp;,<tt> </tt>then<tt> i]a </tt>
is<tt> p{a</tt>&nbsp;,<tt> </tt>
where<tt> ]p </tt>is<tt> n|i</tt>&nbsp;.<tt> </tt>
For example,<nobr><tt> (2]⍳4)≡0 2 1 3</tt>&nbsp;,</nobr><tt> </tt>
and<tt> (¯22]⍳4)≡0 2 1 3</tt>&nbsp;,<tt> </tt>
and<tt> 2]'abcd' </tt>is<tt> 'acbd'</tt>&nbsp;,<tt> </tt>
and<tt> (⍳!n)]⍳n </tt>is the table of all mixes 
of order<tt> n </tt>in lexical order.</p>

<span style='font-size:5pt'><p>&nbsp;</p></span>


<a name="lbrace"></a>
<table><td width=100><tt>{</tt></td>
 <td width=120>Rank:<tt> 1 0 ¯</tt></td>
 <td width=100>&nbsp;</td>
 <td>All; From</td></tr>
</table>
<span style='font-size:1pt'><p>&nbsp;</p></span>

<b>Monad</b>. The expression<tt> {⍵ </tt>
forms a catalogue from the
elements of its argument. For example:

<pre>
   ⍵←'ht'⊃'ao'⊃'gtw'             {(2 3⍴⍳6)⊃10 11
   {⍵                         |¯¯¯¯||¯¯¯¯|
|¯¯¯||¯¯¯||¯¯¯|               |0 10||0 11|
|hag||hat||haw|               |____||____|
|___||___||___|               |¯¯¯¯||¯¯¯¯|               
|¯¯¯||¯¯¯||¯¯¯|               |1 10||1 11|
|hog||hot||how|               |____||____|
|___||___||___|               |¯¯¯¯||¯¯¯¯|
                              |2 10||2 11|
|¯¯¯||¯¯¯||¯¯¯|               |____||____|
|tag||tat||taw|
|___||___||___|               |¯¯¯¯||¯¯¯¯|
|¯¯¯||¯¯¯||¯¯¯|               |3 10||3 11|
|tog||tot||tow|               |____||____|
|___||___||___|               |¯¯¯¯||¯¯¯¯|
                              |4 10||4 11|
   ⍴{⍵                        |____||____|
2 2 3                         |¯¯¯¯||¯¯¯¯|
                              |5 10||5 11|
   ⍴{(2 3⍴⍳6)⊃10 11           |____||____|
2 3 2
</pre>

<p>As may be seen in the foregoing examples, the shape
of the catalogue<tt> {⍵ </tt>is the catenation 
of the shapes of the
disclosed elements of<tt> ⍵</tt>&nbsp;,<tt> </tt>
that is,<tt> &gt;↓⍴¨&gt;⍵</tt>&nbsp;,<tt> </tt>
and the common shape of the disclosed elements 
of the catalogue 
is<tt> ⍴⍵</tt>&nbsp;.</p>

<p>Expressions of the form<tt> {⍳¨&gt;s </tt>
are useful for producing
a complete array of indices of an array 
of shape<tt> s</tt>&nbsp;.<tt> </tt>
For example:</p>

<pre>
   ⍳¨&gt;s←2 3
|¯¯¯||¯¯¯¯¯|
|0 1||0 1 2|
|___||_____|
   {⍳¨&gt;s
|¯¯¯||¯¯¯||¯¯¯|
|0 0||0 1||0 2|
|___||___||___|
|¯¯¯||¯¯¯||¯¯¯|
|1 0||1 1||1 2|
|___||___||___|
</pre>

<p>Portions of such an array of indices are useful in
conjunction with the dyadic case of<tt> {</tt>&nbsp;;<tt> </tt> 
in particular,<tt> ⍵≡({⍳¨&gt;⍴⍵){⍵</tt>&nbsp;.</p>

<p>The case<tt> {(&lt;⍺),&lt;⍵ </tt>
is called the <i>cartesian product</i>
of<tt> ⍺ </tt>and<tt> ⍵</tt>&nbsp;.</p>

<p><b>Dyad</b>. For an integer scalar left argument in the range
from<tt> -1↑⍴⍵ </tt>to<tt> ¯1+1↑⍴⍵</tt>&nbsp;,<tt> ⍺{⍵ </tt>
selects the major cell of<tt> ⍵ </tt>
indexed by<tt> (1↑⍴⍵)|⍺</tt>&nbsp;,<tt> </tt>
as in<tt> 2{a←5 3⍴⍳15 ←→ 6&nbsp;7&nbsp;8</tt>&nbsp;,<tt> </tt>
and<tt> ¯2{a ←→ 9&nbsp;10&nbsp;11</tt>&nbsp;;<tt> </tt>
in other words, negative indices
select from the tail end. 
Since the left rank of<tt> { </tt>is zero, 
the shape of<tt> ⍺{⍵ </tt>for any array 
of integers<tt> ⍺ </tt>is<tt> (⍴⍺),1↓⍴⍵</tt>&nbsp;.<tt> </tt>
For example:</p>

<pre>
   i{'abcde'⊣i←2 2⍴1 ¯1 0 ¯2             i{a
be                                     3  4  5
ad                                    12 13 14

                                       0  1  2
                                       9 10 11
</pre>

<p>More generally, each element of<tt> ⍺ </tt>may be a boxed
vector, whose successive elements are (possibly) boxed arrays
of integers which specify selection along successive
axes of<tt> ⍵</tt>&nbsp;.<tt> </tt>
For example:</p>

<pre>
   a←&lt;(&lt;i0←1 2),(&lt;i1←2 3⍴⍳6)
   b←3 6⍴'abcdefghijklmnopqr'

   b                      a{b
abcdef                 ghi
ghijkl                 jkl
mnopqr
                       mno
                       pqr

   ⊢c←i0{⍤(¯,2) b         i1{⍤(¯,1) c
ghijkl                 ghi
mnopqr                 jkl

                       mno
                       pqr
</pre>

<p>For the case of a single-element 
(i.e., scalar) left argument,
this selection along successive axes can be stated
formally as follows 
(using only the simple definition of<tt> { </tt>
given originally for an integer left argument):</p>

<pre>
FROM: (&gt;⍺)FR ⍵⊣n←1+⍴⍴⍵
  FR: (1↓⍺)FR (>0{⍺){⍤(¯,n ←n-1) ⍵:0=⍴⍺:⍵
</pre>

<p>It maybe noted that<tt> (&lt;''){⍵ ←→ ⍵ ←→ ∘{⍵</tt>&nbsp;,<tt> </tt>
even for a scalar<tt> ⍵</tt>&nbsp;.</p>

<p>If any of the values of<tt> &gt;0{⍺ </tt>
occurring in the execution
of<tt> FR </tt>is <i>not</i> an open array, 
then the selection is made
using the complement 
(with respect to all indices along that axis) 
of the indices in its open, 
that is in<tt> &gt;&gt;0{⍺</tt>&nbsp;.<tt> </tt> 
In other words, the indices selected 
are<tt> (⍳l)~l|&gt;&gt;0{⍺⊣l←(-n){⍴⍵</tt>&nbsp;.<tt> </tt>
For example, if,<nobr><tt> b←4 5 6⍴⍳120 </tt></nobr>
and<nobr><tt> a←&lt;(&lt;0),(&lt;&lt;2 ¯1),(&lt;1 0 4)</tt>&nbsp;,</nobr><tt> </tt>
then the selection made along
the middle axis in evaluating<tt> a{b </tt>
includes all indices 
<i>except</i><tt> 2 </tt>and<tt> ¯1</tt>&nbsp;,<tt> </tt>that is, 
it includes<tt> 0</tt>&nbsp;,<tt> 1</tt>&nbsp;,<tt> </tt>
and<tt> 3</tt>&nbsp;,<tt> </tt>
in that order.</p>

<p>Since the middle element in the open 
of<tt> i←&lt;I⊃∘⊃K </tt>is
the boxed boxed empty vector, 
the expression<tt> i{b </tt>selects
<i>all</i> along the middle axis, 
and is equivalent to the dialectal
form<tt> b[I;;K] </tt>discussed in <a href="APLDictionary1.htm#3a">Section III.A</a>.
</p>

<span style='font-size:5pt'><p>&nbsp;</p></span>


<a name="domino"></a>
<table><td width=100><tt>⌹</tt></td>
 <td width=120>Rank:<tt> 2 ¯ 2</tt></td>
 <td width=100>&nbsp;</td>
 <td>Inverse; Inverse</td></tr>
</table>
<span style='font-size:1pt'><p>&nbsp;</p></span>

<b>Monad</b>. For a non-singular 
matrix<tt> m</tt>&nbsp;,<tt> ⌹m </tt>
is the inverse of<tt> m</tt>&nbsp;,<tt> </tt>
that is,<tt> (⌹m)+.×m </tt>
is the identity 
matrix<tt> i∘.=i←⍳0{⍴m</tt>&nbsp;.<tt> </tt>
More generally,<tt> ⌹m </tt>
is defined in terms of the dyadic case, 
as<tt> (i∘.=i←⍳0{⍴m)⌹m </tt>or, 
equivalently, by the 
relation<tt> ⍺⌹⍵ ←→ (⌹⍵)+.×⍺</tt>&nbsp;.<tt> </tt>
The shape of<tt> ⌹m </tt>is<tt> ⌽⍴m</tt>&nbsp;.

<p>The degenerate cases 
(vector and scalar) are defined
by using the table<tt> ⍪⍵ </tt>instead 
of<tt> ⍵</tt>&nbsp;,<tt> </tt>
although most dialects
differ in yielding a result of the same shape 
as<tt> ⍵</tt>&nbsp;,<tt> </tt>rather
than a matrix. 
For a non-zero vector<tt> v</tt>&nbsp;,<tt> </tt>
the result of<tt> ,⌹v </tt>
is<tt> v÷+/v×+v</tt>&nbsp;;<tt> </tt>
that is, a vector collinear with<tt> v</tt>&nbsp;.<tt> </tt>
For a scalar<tt> s</tt>&nbsp;,<tt> </tt>
the result of<tt> ,⌹s </tt>
is<tt> ,s×÷s</tt>&nbsp;.</p>

<p><b>Dyad</b>. If the columns of<tt> ⍵ </tt>
are linearly independent, and if
the first elements of<tt> ⍴⍺ </tt>
and<tt> ⍴⍵ </tt>agree, 
then<tt> ⍺⌹⍵ </tt>is defined so
as to minimize the elements 
of<nobr><tt> r←+⌿d×+d←⍺-⍵+.×⍺⌹⍵</tt>&nbsp;.</nobr><tt> </tt>
If<tt> ⍵ </tt>is square, 
it is necessarily non-singular (since its columns
are linearly independent), 
the elements of<tt> r </tt>are all zero, 
and<tt> ⍺≡⍵+.×⍺⌹⍵</tt>&nbsp;.</p>

<p>Geometrically,<tt> ⍵+.×⍺⌹⍵ </tt>is, 
for vector<tt> ⍺</tt>&nbsp;,<tt> </tt>
the projection of<tt> ⍺ </tt>on the column space 
of<tt> ⍵</tt>&nbsp;,<tt> </tt>
that is, the point in the space spanned 
by the columns of<tt> ⍵ </tt>that is nearest to
<tt> ⍺</tt>&nbsp;.<tt> </tt> 
The most common uses of<tt> ⍺⌹⍵ </tt>
are in the solution of linear equations, 
and in the approximation of functions by
polynomials.</p>

<p>As in the monadic case, the degenerate cases 
of<tt> ⍵ </tt>are treated as<tt> ⍪⍵</tt>&nbsp;,<tt> </tt>
and disagreements with most dialects arise
as noted under the monadic case.
<br>&nbsp;</p>



<a name="5"></a>
<p><b>V. Adverbs</b></p>

<p>An adverb produces two different classes of results
(usually verbs), one when it is applied to a noun and the
other when applied to a verb. 
The derived results are therefore
referred to by the symbol for the adverb preceded 
by<tt> n </tt>(for noun) or<tt> v </tt>(for verb). 
For example,<tt> n⌿ </tt>refers to
the derived verb <i>copy</i> 
(for which <nobr><tt> 2 0 3⌿'ABC' </tt></nobr>
yields<tt> 'AACCC'</tt>),<tt> </tt>
and<tt> v⌿ </tt>refers to the derived verb <i>over</i>
(for which<nobr><tt> +⌿2 3 5 </tt></nobr>yields<tt> 10</tt>).</p>

<p>The ranks are given as they are in the verb table, except
that a rank may depend upon the monadic, left, or right rank
of the argument verb<tt> v</tt>&nbsp;,<tt> </tt>indicated 
by<tt> my</tt>&nbsp;,<tt> lv</tt>&nbsp;,<tt> </tt>
and<tt> rv</tt>&nbsp;.<tt> </tt>
As for the verbs, the definitions show the results 
for individual ceils, and the derived verb 
applies to arguments of higher
rank in the standard manner discussed in 
<a href="APLDictionary1.htm#2b">Section II.B.</p>
<span style='font-size:5pt'><p>&nbsp;</p></span>


<a name="slashbar"></a>
<table><td width=100><tt>n⌿</tt></td>
 <td width=120>Rank:<tt> ¯ ¯ ¯</tt></td>
 <td width=100>&nbsp;</td>
 <td>Copy down; Copy down</td></tr>
</table>
<span style='font-size:1pt'><p>&nbsp;</p></span>

<b>Monad</b>. In the expression<tt> n⌿⍵</tt>&nbsp;,<tt> </tt>
the argument<tt> ⍵ </tt>is split into
its major cells, 
and cell<tt> i{⍵ </tt>is copied<tt> i{n </tt>times. 
Thus:

<pre>
   ⊢⍵←3 3⍴'abcdefghi             2 0 2⌿⍵
abc                           abc
def                           abc
ghi                           ghi
                              ghi
   2 0 2⌿⍳3
0 0 2 2
</pre>

<p><b>Scalar arguments</b>. If<tt> n </tt>
has a single element, it is treated
as<tt> (1↑⍴⍪⍵)⍴n</tt>&nbsp;,<tt> </tt>
for example,<tt> 2⌿⍳3 ←→ <nobr>0 0 1 1 2 2</nobr></tt>&nbsp;.<tt> </tt>
A scalar argument<tt> ⍵ </tt>
(which has no &ldquo;leading&rdquo; axis), is
treated as<tt> (1↑⍴⍪⍵)⍴n</tt>&nbsp;.<tt> </tt>
Thus,<tt> 2 0 2⌿3 ←→ <nobr>3 3 3 3</nobr></tt>&nbsp;.</p>

<p><b>Dyad</b>. In the dyadic case of<tt> n⌿</tt>&nbsp;,<tt> </tt> 
the argument<tt> n </tt>may contain
negative elements; a negative element copies major
cells from the left argument of the derived verb rather than
from the right. For example:</p>

<pre>
   'ABCDEFG' ¯1 0 1 0 1 0 0⌿'abcdefg'
Ace
   '⍝'(¯1*s=' ')⌿s←'now is the winter'
now⍝is⍝the⍝winter
</pre>

<span style='font-size:5pt'><p>&nbsp;</p></span>


<table><td width=100><tt>v⌿</tt></td>
 <td width=120>Rank:<tt> ¯ 0 ¯</tt></td>
 <td width=100>&nbsp;</td>
 <td><tt>v</tt>-Down;<tt> ⍺</tt>-way<tt> v</tt>-Down</td></tr>
</table>
<span style='font-size:1pt'><p>&nbsp;</p></span>

<b>Monad</b>. In the expression<tt> v⌿⍵</tt>&nbsp;,<tt> </tt>
the argument<tt> ⍵ </tt>is split into its major cells, 
and the verb<tt> v </tt>is applied between them.
Thus if<tt> 1↑⍴⍵ </tt>is<tt> 3</tt>&nbsp;,<tt> </tt>
the result is<tt> (0{⍵)v(1{⍵)v(2{⍵)</tt>&nbsp;.<tt> </tt>
Consider, for example, the following identities:

<pre>
   ⊢⍵←3 2⍴⍳6                +⌿⍵
0 1                      (0{⍵)+(1{⍵)+(2{⍵)
2 3                      0 1 + 2 3 + 4 5
4 5                      0 1 + 6 8
                         6 9

   ∘.+⌿⍵                    +.×⌿⍵
0 1 ∘.+ 2 3 ∘.+ 4 5      0 1 +.× 2 3 +.× 4 5
0 1 ∘.+ 6 7              0 1 +.× 23
        7 8              23
6 7
7 8

7 8
8 9
</pre>

<p><b>Identity elements</b>. If the leading axis 
of<tt> ⍵ </tt>has zero length
(that is,<tt> 0=1↑⍴⍵</tt>),<tt> </tt> 
the result of<tt> v⌿⍵ </tt>is the <i>identity element</i>
of verb<tt> v</tt>&nbsp;.<tt> </tt> 
The <i>left identity</i> of<tt> v </tt>
is a noun<tt> l </tt>such that<tt> l v x </tt>
yields<tt> x </tt>for any<tt> x </tt>
in the right domain of<tt> v</tt>&nbsp;,<tt> </tt> 
the <i>right identity</i> of<tt> v </tt>
is a noun<tt> r </tt>
such that<nobr><tt> x≡x v r</tt>&nbsp;.</nobr><tt> </tt> 
A left identity of a commutative verb 
(such that<tt> ⍺ v ⍵ ←→ ⍵ v ⍺</tt>)<tt> </tt>is,
of course, a right identity as well, 
and may be called simply an <i>identity</i>. 
For example:</p>

<table>
<tr><td><tt>1</tt>&nbsp;</td><td>&nbsp;</td><td>is a right identity of both<tt> ÷ <tt>and<tt> *<tt></td></tr>
<tr><td><tt>1</tt>&nbsp;</td><td>&nbsp;</td><td>is an identity of<tt> × <tt>and<tt> ^<tt></td></tr>
<tr><td><tt>0</tt>&nbsp;</td><td>&nbsp;</td><td>is a left identity of<tt> |<tt></td></tr>
<tr><td><tt>0</tt>&nbsp;</td><td>&nbsp;</td><td>is an identity of<tt> + <tt>and<tt> ∨<tt></td></tr>
</table>

<p>The definition of each verb indicates its identity element
(if any), listed after the symbols<tt> v⌿:</tt>&nbsp;.<tt> </tt>
An element is included even though it is strictly 
a right identity or a left identity, and in some cases 
(such as for<tt> = </tt>and<tt> ≠</tt>)<tt> </tt>
if it applies only over a subdomain (boolean).</p>

<p>Identity elements extend relations of the 
form<tt> (+/a)≡(+/k↑a)+(+/k↓a) </tt>
to include the cases<tt> k=0 </tt>
and<tt> k=⍴a</tt>&nbsp;.<tt> </tt>
Thus:</p>

<pre>
   a←2 3 5 7 11
   k←3                         k←0
   (+/k↑a)+(+/k↓a)             (+/k↑a)+(+/k↓a)
   (+/2 3 5)+(+/7 11)          (+/⍳0)+(+/a)
      10    +   18               0   + 28
28                          28
</pre>

<p><b>Dyad</b>. The 
expression<nobr><tt> 3 +⌿ v←2 3 5 7 11 </tt></nobr>
produces &ldquo;running sums&rdquo; 
over successive<tt> 3</tt>-element groups 
of contiguous
elements of<tt> v</tt>&nbsp;,<tt> </tt>
therefore yielding<nobr><tt> 10 15 23</tt>&nbsp;.</nobr><tt> </tt> 
More generally, the major cells 
of<nobr><tt> r←⍺ v⌿ ⍵ </tt></nobr>
are the results 
of<tt> v⌿⍺↑k↓⍵</tt>&nbsp;,<tt> </tt>
for<tt> k </tt>running from zero 
to<tt> n←(1↑⍴⍵)-⍺</tt>&nbsp;;<tt> </tt>
a domain error occurs 
if<tt> n&lt;0</tt>&nbsp;.<tt> </tt> 
For example:</p>

<pre>
   ⊢m←5 4⍴⍳20              2 +⌿ m
 0  1  2  3              4  6  8 10
 4  5  6  7             12 14 16 18
 8  9 10 11             20 22 24 26
12 13 14 15             28 30 32 34
16 17 18 19

   3 +⌿ m
12 15 18 21
24 27 30 33
36 39 42 45
</pre>

<span style='font-size:5pt'><p>&nbsp;</p></span>


<a name="bslashbar"></a>
<table><td width=100><tt>n⍀</tt></td>
 <td width=120>Rank:<tt> ¯ * *</tt></td>
 <td width=100>&nbsp;</td>
 <td>Expand down;</td></tr>
</table>
<span style='font-size:1pt'><p>&nbsp;</p></span>

<b>Monad</b>. The expression<tt> n⍀⍵ </tt><i>expands</i>
the argument<tt> ⍵ </tt>along the first axis, 
inserting at each point corresponding to a zero
of<tt> n</tt>&nbsp;,<tt> </tt> 
a cell of zeros if<tt> ⍵ </tt>is numeric, 
a cell of spaces if<tt> ⍵ </tt>consists of characters, 
and a cell of the elements<tt> &lt;⍳0 </tt> if
is boxed or heterogeneous. For example:

<pre>
   1 0 1 0 1⍀2 3 5            1 0 1 0 1⍀3 4⍴⍳12
2 0 3 0 5                  0  1  2  3
                           0  0  0  0
   1 0 1 0 1⍀'abc'         4  5  6  7
a b c                      0  0  0  0
                           8  9 10 11
</pre>

<p>In other words,<tt> n </tt>must be a boolean list, 
and if<tt> r←n⍀⍵</tt>&nbsp;,<tt> </tt>
then<tt> ⍵≡n⌿r</tt>&nbsp;,<tt> </tt> 
and<tt> (~n)⌿r </tt>
is an array of zeros, spaces, or
boxed empty vectors, of shape<tt> (+/~n),1↓⍴⍵</tt>&nbsp;.
</p>

<span style='font-size:5pt'><p>&nbsp;</p></span>


<a name="bslashbar"></a>
<table><td width=100><tt>v⍀</tt></td>
 <td width=120>Rank:<tt> ¯ * *</tt></td>
 <td width=100>&nbsp;</td>
 <td>Scan down;</td></tr>
</table>
<span style='font-size:1pt'><p>&nbsp;</p></span>

<b>Monad</b>. The expression<tt> v⍀⍵ </tt>assembles, 
along the leading axis, the<tt> 1↑⍴⍵ </tt>
results<tt> (0{⍵)</tt>&nbsp;,<tt> (v⌿0&nbsp;1{⍵)</tt>&nbsp;,<tt> (v⌿0&nbsp;1&nbsp;2{⍵)</tt>&nbsp;,<tt> </tt>
etc. For example:</p>

<pre>
   ⊢m←3 5⍴0 1 0 0             v⍀m
0 1 0 0 0                  0 1 0 0 0
1 0 0 0 1                  1 1 0 0 1
0 0 0 1 0                  1 1 0 1 1
</pre>

<span style='font-size:5pt'><p>&nbsp;</p></span>


<a name="slash"></a>
<a name="bslash"></a>
<table><td valign=top width=100><tt>n/ v/ n\ v\</tt>&nbsp;</td>
 <td valign=top width=210 colspan=2>Rank: As in<tt> ⌿ </tt>and<tt> ⍀</tt></td>
 <td>As in<tt> ⌿ </tt>and<tt> ⍀</tt><br>
  with <i>across</i> and <i>down</i></td>
</table>
<span style='font-size:1pt'><p>&nbsp;</p></span>

The expression<tt> v/⍵ </tt>is equivalent to<tt> v⌿⍵ </tt>
except that the split is made 
along the last axis rather than the first. 
In other words<tt> v/⍵ </tt>
is equivalent to<tt> v⌿a</tt>&nbsp;,<tt> </tt>
where<tt> a </tt>is obtained from<tt> ⍵ </tt>
by transposing the last axis to the leading position,
that is,<tt> a←(1⌽⍳0{⍴⍴⍵)⍉⍵</tt>&nbsp;,<tt> </tt>
or<tt> a←¯1⍥⊢⍵</tt>&nbsp;.</p>

<p>For example:</p>

<pre>
   ⊢⍵←3 4⍴⍳12              ⊢a←(1⌽⍳0{⍴⍴⍵)⍉⍵
0  1  2  3              0  4  8
4  5  6  7              1  5  9
8  9 10 11              2  6 10
                        3  7 11
   +/⍵                     +⌿a
6 22 38                 6 22 38
</pre>

<p>A similar correspondence holds 
for the other three cases, 
except that the leading axis of the result 
(which, in effect, results from the splitting axis) 
must be returned to last position. 
For example:</p>

<pre>
   2 0 1 0/⍵       2 0 1 0⌿a        1 0⍉2 0 1 0⌿a
0  0  2         0  4  8          0  0  2
4  4  6         0  4  8          4  4  6
8  8 10         2  6 10          8  8 10
</pre>

<p>The relations can be summarized as follows:</p>

<pre>
   (n/⍵)  ≡ ⊢⍥0 n⌿ ¯1⍥⊢⍵
   (v/⍵)  ≡     v⌿ ¯1⍥⊢⍵
   (n\⍵)  ≡ ⊢⍥0 n⍀ ¯1⍥⊢⍵
   (v\⍵)  ≡ ⊢⍥0 v⍀ ¯1⍥⊢⍵

   (⍺n/⍵) ≡ ⊢⍥0 ⍺n⌿ ¯1⍥⊢⍵
   (⍺v/⍵) ≡     ⍺v⌿ ¯1⍥⊢⍵
</pre>

<span style='font-size:5pt'><p>&nbsp;</p></span>


<a name="rbrace"></a>
<table><td width=100><tt>v}</tt></td>
 <td width=120>Rank:<tt> ¯ ¯ ¯</tt></td>
 <td width=100>&nbsp;</td>
 <td>Select; Merge</td></tr>
</table>
<span style='font-size:1pt'><p>&nbsp;</p></span>

<b>Monad</b>. The result of<tt> v}⍵ </tt>
is a selection from<tt> ⍵ </tt>of the
form<tt> i{⍵</tt>&nbsp;,<tt> </tt>
where the index<tt> i </tt>is obtained 
by applying<tt> v </tt>
to<tt> {⍳¨&gt;⍴⍵</tt>&nbsp;,<tt> </tt>
the &ldquo;complete index table&rdquo; 
of<tt> ⍵</tt>&nbsp;.<tt> </tt> 
For example:</p>

<pre>
   ⊢⍵←2 3 3⍴⍳18
 0  1  2
 3  4  5
 6  7  8
        
 9 10 11
12 13 14
15 16 17

   t←{⍳¨&gt;⍴⍵
   ⍴t
2 3 3

   0{t
|¯¯¯¯¯||¯¯¯¯¯||¯¯¯¯¯|
|0 0 0||0 0 1||0 0 2|
|_____||_____||_____|
|¯¯¯¯¯||¯¯¯¯¯||¯¯¯¯¯|
|0 1 0||0 1 1||0 1 2|
|_____||_____||_____|
|¯¯¯¯¯||¯¯¯¯¯||¯¯¯¯¯|
|0 2 0||0 2 1||0 2 2|
|_____||_____||_____|

   ⊢i←0 1 1⍉t
|¯¯¯¯¯||¯¯¯¯¯||¯¯¯¯¯|
|0 0 0||0 1 1||0 2 2|
|_____||_____||_____|
|¯¯¯¯¯||¯¯¯¯¯||¯¯¯¯¯|
|1 0 0||1 1 1||1 2 2|
|_____||_____||_____|

   ⊢r←i{⍵                        r≡0 1 1¨⍉}⍵
0 4 8                         1
</pre>

<p>The foregoing illustrates 
how the adverb<tt> } </tt>can apply
to any selection function 
(in this case<nobr><tt> 0 1 1¨⍉</tt></nobr>)<tt> </tt>
to produce a selection. 
Since this is the same selection that could be
produced directly as<tt> v⍵ </tt>
(that is,<tt> 0&nbsp;1&nbsp;1⍉⍵</tt>),<tt> </tt>
it is of no interest except as it is used 
in the dyadic case to produce a merge, 
as discussed under the dyadic case below.</p>

<p>However, verbs other than selection 
can serve meaningfully
as arguments of<tt> }</tt>&nbsp;.<tt> </tt>
For example:</p>

<pre>
   ⊢q←1¨⌊¯&gt;}⍵              ⊢j←1 ⌊¨&gt;t
 0  1  1                |¯¯¯¯¯||¯¯¯¯¯||¯¯¯¯¯|
 3  4  4                |0 0 0||0 0 1||0 0 1|
 3  4  4                |_____||_____||_____|
                        |¯¯¯¯¯||¯¯¯¯¯||¯¯¯¯¯|
 9 10 10                |0 1 0||0 1 1||0 1 1|
12 13 13                |_____||_____||_____|
12 13 13                |¯¯¯¯¯||¯¯¯¯¯||¯¯¯¯¯|
                        |0 1 0||0 1 1||0 1 1|
                        |_____||_____||_____|

   q≡j{⍵                |¯¯¯¯¯||¯¯¯¯¯||¯¯¯¯¯|
1                       |1 0 0||1 0 1||1 0 1|
                        |_____||_____||_____|
                        |¯¯¯¯¯||¯¯¯¯¯||¯¯¯¯¯|
                        |1 1 0||1 1 1||1 1 1|
                        |_____||_____||_____|
                        |¯¯¯¯¯||¯¯¯¯¯||¯¯¯¯¯|
                        |1 1 0||1 1 1||1 1 1|
                        |_____||_____||_____|
</pre>

<p><b>Dyad</b>. If<tt> ⍺ </tt>has the same shape as 
the index array<tt> v}⍳¨&gt;⍴⍵</tt>&nbsp;,<tt> </tt>
then<tt> ⍺&nbsp;v}&nbsp;⍵ </tt>
produces a <i>merge</i> of<tt> ⍺ </tt>
and<tt> ⍵</tt>&nbsp;,<tt> </tt>
by inserting the
elements of<tt> ⍺ </tt>in the selected positions 
of<tt> ⍵</tt>&nbsp;,<tt> </tt>
more specifically,
in the positions of<tt> ⍵ </tt>indexed by the 
array<tt> v{⍳¨&gt;⍴⍵</tt>&nbsp;.<tt> </tt>
Continuing the example used in the monadic case:</p>

<pre>
   ⊢⍺←2 3⍴100+⍳6           ⊢m←⍺ 0 1 1¨⍉}⍵
100 101 102             100   1   2
103 104 105               3 101   5
                          6   7 102
        
                        103  10  11
                         12 104  14
                         15  16 105
</pre>

<span style='font-size:5pt'><p>&nbsp;</p></span>


<a name="subset"></a>
<table><td width=100><tt>v⊂</tt></td>
 <td width=120>Rank:<tt> mv rv lv</tt></td>
 <td width=100>&nbsp;</td>
 <td>; Swap</td></tr>
</table>
<span style='font-size:1pt'><p>&nbsp;</p></span>

<b>Monad</b>.<tt> v⊂⍵ ←→ ⍵v⍵ </tt>

<p><b>Dyad</b>.<tt> ⍺v⊂⍵ ←→ ⍵v⍺ </tt></p>

<p><b>Dialects</b>. Some dialects 
[<acronym title="Rabenhorst, D.A., 
APL2 IUP Manual, IBM Corporation.">12</acronym>
<acronym title="Cheney, C., NARS Manual, STSC Inc.">13</acronym>] 
use<tt> ⊂ </tt>for a function
called <i>enclose</i>; 
in these,<tt> ⊂⍵ </tt>is equivalent to<tt> &lt;⍵ </tt>
except that<tt> ⍵≡⊂⍵ </tt>if<tt> ⍵ </tt>is an open item.
<br>&nbsp;</p>



<a name="6"></a>
<p><b>VI. Conjunctions</b></p>

<p>A conjunction produces four main classes of results,
referred to by using<tt> m </tt>and<tt> n </tt>
for left and right noun arguments,
and<tt> u </tt>and<tt> v </tt>
for left and right verb arguments.
Ranks are shown as for adverbs.</p>

<span style='font-size:5pt'><p>&nbsp;</p></span>


<a name="dieresis"></a>
<table><td width=100 valign=top><tt>m¨v u¨n</tt>&nbsp;</td>
 <td width=120>
  <table><tr><td>Rank: &nbsp;</td><td><tt>rv * *</tt></td></tr>
         <tr><td>&nbsp;</td>      <td><tt>lu * *</tt></td></tr>
  </table>
 <td width=100>&nbsp;</td>
 <td valign=top>With/With;</td></tr>
</table>

The expression<tt> m¨v&nbsp;⍵ </tt>
is defined by<tt> m&nbsp;v&nbsp;⍵ </tt>
and<tt> m¨v </tt>
is therefore a monadic verb resulting from supplying the
dyadic case of<tt> v </tt>with a left 
argument<tt> m</tt>&nbsp;.<tt> </tt>
Similarly,<tt> u¨n&nbsp;⍵ </tt>is defined 
by<tt> ⍵&nbsp;u&nbsp;n</tt>&nbsp;.<tt> </tt>
For example:</p>

<pre>
   3⍕2¨⍟⍵←1 2 3 4 5 6 7 8
0.000 1.000 1.585 2.000 2.322 2.585 2.807 3.000
   *¨2 ⍵
1 4 9 16 25 36 49 64
</pre>

<span style='font-size:5pt'><p>&nbsp;</p></span>


<table><td width=100><tt>u¨v</tt></td>
 <td width=120>Rank:<tt> mv mv mv</tt></td>
 <td width=100>&nbsp;</td>
 <td>Under; Under</td></tr>
</table>
<span style='font-size:1pt'><p>&nbsp;</p></span>

This function is equivalent to 
composition<tt> </tt>(<tt>u⍤v</tt>)<tt> </tt>except
that the function inverse to<tt> v </tt>
is applied to the result of each cell. 
For example, since<tt> &lt; </tt>and<tt> &gt; </tt>
are inverses, as are<tt> * </tt>and<tt> ⍟</tt>&nbsp;:</p>

<pre>
   ⍴⍤&gt;a←'abc'⊃1 3⊃'abcd'          ⍴¨&gt;a
3                              |¯||¯||¯|
2                              |3||2||4|
4                              |_||_||_|

   ⍴⍤&gt;b←1 2 3⊃''⊃'abcd'
|¯||¯||¯¯¯|
|3||0||2 3|
|_||_||___|
</pre>

<table>
<tr><td valign=top><pre>
   a,¨&lt;b
|¯¯¯|  |¯¯¯||¯¯¯¯|
|abc|  |1 3||abcd|
|___|  |___||____|
|¯¯¯¯¯|||   |¯¯¯¯¯|
|1 2 3|||   |0 0 0|
|_____|||   |_____|
</pre></td>
<td><tt>&nbsp; &nbsp; &nbsp;</tt></td>
<td valign=top><br>This result is often called <i>lamination</i>
of<tt> a </tt>and<tt> b</tt>&nbsp;,<tt> </tt>
since it combines them along a new initial axis.</td></tr>
</table>

<pre>
   3 +⍤⍟ 4                     3 +¨⍟ 4
2.48490665                  12
</pre>

<p>The function<tt> u¨v </tt>is often called 
&ldquo;the dual of<tt> u </tt>with respect to<tt> v</tt>&rdquo;, 
but the phrase &ldquo;<tt>u </tt><i>under</i><tt> v</tt>&rdquo;<tt> </tt>
is probably better,
suggesting that<tt> u </tt>
is performed after preparatory work by<tt> v</tt>&nbsp;,<tt> </tt>
and before the task is sewn up 
by reversing the effect of<tt> v</tt>&nbsp;.</p>

<p>The expression<tt> u¨v </tt>is valid only 
if<tt> v </tt>possesses an inverse. 
The following list shows inverse pairs commonly
used in dialects:</p>

<pre>
* + - ÷ ⌽ ⊖ ⍉ ⊢ &lt; ⌹ ~ ≤
⍟ + - ÷ ⌽ ⊖ ⍉ ⊢ &gt; ⌹ ~ ≥
</pre>

<span style='font-size:5pt'><p>&nbsp;</p></span>


<a name="paw"></a>
<table><td width=100><tt>m⍤n</tt></td>
 <td width=120>Rank:<tt> ⌽3⍴⌽n</tt></td>
 <td width=100>&nbsp;</td>
 <td>Constant; Constant</td></tr>
</table>
<span style='font-size:1pt'><p>&nbsp;</p></span>

See<tt> u⍤n </tt>for a discussion 
of the expression<tt> n←⌽3⍴⌽n</tt>&nbsp;.

<p><b>Monad</b>. The derived verb<tt> m⍤n </tt>
has rank<tt> n</tt>&nbsp;,<tt> </tt>
and produces a constant individual 
result<tt> m </tt>for each cell to which it applies.
For example:</p>

<pre>
   m←'abc'
   ⍵←2 3⍴⍳6
   m⍤0 ⍵              m⍤1 ⍵           m⍤2 ⍵
abc                abc             abc
abc
abc

abc
abc
abc
</pre>

<p><b>Dyad</b>. The dyadic case differs only 
in that agreement of
the outer shapes of the arguments is imposed. 
For example:</p>

<pre>
   ⍺←'PQ'
   ⍺ m⍤0 1 ⍵                  ⍺ m⍤0 0 ⍵
abc                        domain error
abc
</pre>

<span style='font-size:5pt'><p>&nbsp;</p></span>


<table><td width=100><tt>m⍤v</tt></td>
 <td width=120>Rank:<tt> ¯ 1/2 ¯</tt></td>
 <td width=100>&nbsp;</td>
 <td>Cut; Cut</td></tr>
</table>
<span style='font-size:1pt'><p>&nbsp;</p></span>

<b>Monad</b>. The expression<tt> 1⍤v&nbsp;⍵ </tt>
applies<tt> v </tt>to each of a set
of &ldquo;segments&rdquo; 
cut along the first axis, and assembles the
results along a leading axis of length equal to the number
of segments.

<p>Each segment is 
of the form<tt> s←(k+⍳n){⍵</tt>&nbsp;,<tt> </tt>
and<tt> k </tt>and<tt> n </tt>
are chosen so that each segment 
begins at the occurrence
of the <i>delimiter</i><tt> 0{⍵</tt>&nbsp;.<tt> </tt> 
In other words, for each 
segment<tt> s</tt>&nbsp;,<tt> (j{s)≡0{⍵ </tt>
for<tt> j=0 </tt>and for no other value. 
For example:</p>

<pre>
   1⍤&lt;⍵←' worlds on worlds'
|¯¯¯¯¯¯¯||¯¯¯||¯¯¯¯¯¯¯|
| worlds|| on|| worlds|
|_______||___||_______|

   ⊢m←5 4⍴⍳6                  1⍤&lt; m
0 1 2 3                    |¯¯¯¯¯¯¯||¯¯¯¯¯¯¯|
4 5 0 1                    |0 1 2 3||0 1 2 3|
2 3 4 5                    |4 5 0 1||4 5 0 1|
0 1 2 3                    |2 3 4 5||_______|
4 5 0 1                    |_______|

   1⍤⍴⍵                       1⍤(+⌿) m
7                          6 9 6 9
3                          4 6 2 4
7
</pre>

<p>The expression<tt> ¯l⍤v&nbsp;⍵ </tt>differs 
only in that the delimiters
are excluded from the segments. For example:</p>

<pre>
   ¯1⍤&lt;⍵                      ¯1⍤⍴⍵
|¯¯¯¯¯¯||¯¯||¯¯¯¯¯¯|       6
|worlds||on||worlds|       2
|______||__||______|       8

   ¯1⍤&lt;m                      ¯1⍤(+⌿) m
|¯¯¯¯¯¯¯||¯¯¯¯¯¯¯|         6 8 4 6
|4 5 0 1||4 5 0 1|         4 5 0 1
|2 3 4 5||_______|
|_______|
</pre>

<p>The verbs<tt> 2⍤v </tt>and<tt> ¯2⍤v </tt>
differ from the corresponding
cases<tt> 1⍤v </tt>and<tt> ¯1⍤v </tt>
only in that the delimiter is the <i>last</i> cell, 
and marks the end of segments 
rather than the beginning. 
For example:</p>

<pre>
   2⍤&lt;⍵                       2⍤&lt;m
|¯¯¯¯¯¯¯||¯¯¯¯¯¯¯¯¯¯|      |¯¯¯¯¯¯¯||¯¯¯¯¯¯¯|
| worlds|| on worlds|      |0 1 2 3||2 3 4 5|
|_______||__________|      |4 5 0 1||0 1 2 3|
                           |_______||4 5 0 1|
                                    |_______|
</pre>

<p>The case<tt> 0⍤v&nbsp;⍵ </tt>applies<tt> v </tt>
after reversing<tt> ⍵ </tt>along each
axis, and is equivalent 
to<nobr><tt> (0 1∘.×-⍴⍵) 0⍤v ⍵</tt>&nbsp;.</nobr><tt> </tt>
For a matrix<tt> m</tt>&nbsp;,<tt> </tt>
the expression<tt> 0⍤v&nbsp;m </tt>
is equivalent to<tt> v⊖⌽&nbsp;m</tt>&nbsp;.<p>

<p>The monads<tt> 3⍤v </tt>and<tt> ¯3⍤v </tt>produce tessellation
by &ldquo;maximal cubes&rdquo; using size<tt> (⍴⍴⍵)⍴⌊/⍴⍵ </tt>
and shift<tt> (⍴⍴⍵)⍴1 </tt>in the corresponding dyads.</p>

<p><b>Dyad</b>. For<tt> (|k)∊1&nbsp;2</tt>&nbsp;,<tt> </tt>
the dyadic cases<tt> ⍺ k⍤v ⍵ </tt>differ
from the corresponding monadic cases 
only in that the delimiters are the<tt> 1</tt>&rsquo;s 
in the boolean list<tt> ⍺</tt>&nbsp;.<tt> </tt>
For example:</p>

<pre>
   ⍺←0 1 0 0 1
   ⍺ 1⍤&lt; m                    ⍺ 2⍤&lt; m
|¯¯¯¯¯¯¯||¯¯¯¯¯¯¯|         |¯¯¯¯¯¯¯||¯¯¯¯¯¯¯|
|4 5 0 1||4 5 0 1|         |0 1 2 3||2 3 4 5|
|2 3 4 5||_______|         |4 5 0 1||0 1 2 3|
|0 1 2 3|                  |_______||4 5 0 1|
|_______|                           |_______|
</pre>

<p>The case<tt> 0⍤v </tt>has left rank<tt> 2</tt>&nbsp;,<tt> </tt>
and<tt> ⍺&nbsp;0⍤v&nbsp;⍵ </tt>
applies<tt> v </tt>to a &ldquo;rectangle&rdquo; 
whose beginning point in<tt> ⍵ </tt>is determined
by<tt> 0{⍺</tt>&nbsp;,<tt> </tt>
and whose size is determined by<tt> |1{⍺</tt>&nbsp;.<tt> </tt> 
For example:</p>

<pre>
   a←2 3⍴0 1 1 2 2 3
   b←2 3⍴0 1 1 2 2 ¯3
   ⍵←2 3 5⍴⍳30

   a              b                 ⍵
0 1 1           0  1  1           0  1  2  3  4
2 2 3           2  2 ¯3           5  6  7  8  9
                                 10 11 12 13 14
   a 0⍤⊢ ⍵        b 0⍤⊢ ⍵
 6  7  8        8  7  6          15 16 17 18 19
11 12 13       13 12 11          20 21 22 23 24
                                 25 26 27 28 29
21 22 23       23 22 21
26 27 28       28 27 26
</pre>

<p>The beginning point is determined 
by<tt> (⍴⍵)|(⍴⍴⍵)↑0{⍺</tt>&nbsp;;<tt> </tt>
in other words, negative indexing may be used, 
and<tt> 0{⍺ </tt>is extended by zeros 
to provide a full index to<tt> ⍵</tt>&nbsp;.<tt> </tt>
The size is determined by<tt> s,(⍴s)↓⍴⍵⊣s←1{⍺</tt>&nbsp;.<tt> </tt>
Finally, before application of the verb<tt> v</tt>&nbsp;,<tt> </tt>
the rectangle is reversed along each axis 
for which<tt> 1{⍺ </tt>is negative, 
as illustrated by the example using<tt> b </tt>above.</p>

<p>The case<tt> 3⍤v </tt>
also has left rank<tt> 2</tt>&nbsp;,<tt> </tt>
and<tt> ⍺3⍤v⍵ </tt>applies<tt> v </tt>
to each element produced by a tessellation 
of<tt> ⍵</tt>&nbsp;,<tt> </tt>using
a size<tt> 1{⍺</tt>&nbsp;,<tt> </tt>
and beginning points that are multiples of the
&ldquo;shift&rdquo;<tt> 0{⍺</tt>&nbsp;.<tt> </tt> 
For example:</p>

<pre>
   a                (>3 2⊃2 3) 3⍤&lt;a
abcdef           |¯¯¯||¯¯¯||¯¯|
ghijkl           |abc||cde||ef|
mnopqr           |ghi||ijk||kl|
stuvwx           |___||___||__|
yzABCD           |¯¯¯||¯¯¯||¯¯|
                 |stu||uvw||wx|
                 |yzA||ABC||CD|
                 |___||___||__|
</pre>

<p>The table of beginning points of the elements of the tessellation
is given by:</p>

<pre>
   s×¨&gt;{⍳¨&gt;⌈(⍴⍵)÷s←0{⍺
</pre>

<p>The case<tt> ¯3⍤v </tt>is equivalent to<tt> 3⍤v </tt>
except that shards of shape less than<tt> 1{⍺ </tt>are omitted.
</p>

<span style='font-size:5pt'><p>&nbsp;</p></span>


<table><td width=100><tt>u⍤n</tt></td>
 <td width=120>Rank:<tt> ⌽3⍴⌽n</tt></td>
 <td width=100>&nbsp;</td>
 <td>Rank; Rank</td></tr>
</table>
<span style='font-size:1pt'><p>&nbsp;</p></span>

If<tt> n </tt>is a a-element list, 
then<tt> u⍤n </tt>is a monadic function
of rank<tt> 0{n</tt>&nbsp;,<tt> </tt>and a dyadic function 
of left rank<tt> 1{n </tt>
and right rank<tt> 2{n</tt>&nbsp;.<tt> </tt>
In general,<tt> n </tt>is treated 
as if it were<tt> ⌽3⍴⌽n</tt>&nbsp;;<tt> </tt>
in other words a single element specifies all ranks, 
but if<tt> 2=⍴n</tt>&nbsp;,<tt> </tt>
the first element specifies the left rank, and the last
specifies the right ranks, both dyadic and monadic.

<p><b>Monad</b>. A monadic rank of<tt> k </tt>
implies that the function
applies to<tt> k</tt>-cells of its argument, 
except that the rank of the
cell will not exceed the rank of the argument, as discussed
under <i>degenerate cases</i> in <a href="APLDictionary1.htm#2b3">Section II.B</a>. 
For example:</p>

<pre>
   ⍵←2 3 4⍴'abcdefghijklmnopqrstuvwx'

   ⍵              ,⍤2 ⍵                ,⍤¯1 ⍵
abcd           abcdefghijkl         abcdefghijkl
efgh           mnopqrstuvwx         mnopqrstuvwx
ijkl
                  ,⍤4 ⍵
mnop           abcdefghiffklmnopqrstuvwx
qrst
uvwx
</pre>

<p><b>Dyad</b>. In the 
expression<tt> ⍺ u⍤(l,r) ⍵</tt>&nbsp;,<tt> </tt>
the outer shapes
of<tt> ⍺ </tt>and<tt> ⍵ </tt>
(complementary to the shapes of the<tt> l</tt>-cells 
and<tt> r</tt>-cells) must agree unless one of them is empty, 
in which case the single corresponding cell 
is extended to apply to
each of the cells of the other argument. 
For example, if<tt> ⍺←'yz'</tt>&nbsp;,<tt> </tt>then:</p>

<pre>
   ⍺,⍤0 2 ⍵                  ⍺ ,⍤1 1 ⍵
yabcd                     yzabcd
yefgh                     yzefgh
yijkl                     yzijkl

zmnop                     yzmnop
zqrst                     yzqrst
zuvwx                     yzuvwx
</pre>

<span style='font-size:5pt'><p>&nbsp;</p></span>


<table><td width=100><tt>u⍤v</tt></td>
 <td width=120>Rank:<tt> mv mv mv</tt></td>
 <td width=100>&nbsp;</td>
 <td>On; On</td></tr>
</table>
<span style='font-size:1pt'><p>&nbsp;</p></span>

<b>Monad</b>. In the simplest case<tt> u⍤v&nbsp;⍵ </tt> 
is equivalent to<tt> u v ⍵</tt>&nbsp;.<tt> </tt> 
For example:</p>

<pre>
   ⊢y←⊖⍤⍉ ⍵←4 3 2⍴'abcdefghijkYmnopqrstuvwx'
bhnt
djpv
flrx

agms
ciou                       y≡⊖⍉⍵
ekqw                    1
</pre>

<p>However, this relation holds only because the monadic
rank of<tt> ⍉ </tt>is unbounded; 
more generally, the rank of the
derived function<tt> u⍤v </tt>is the rank 
of<tt> v</tt>&nbsp;;<tt> </tt> 
that is, the expression<tt> u&nbsp;v </tt>
is applied to each of the <i>cells</i> of<tt> ⍵ </tt>relative 
to<tt> v</tt>&nbsp;.<tt> </tt> 
For example:</p>

<pre>
   ⊢z←⊖⍤2 ⍉⍤2 ⍵            z≡⊖⍉⍤2 ⍵
bdf                     0
ace
                           z≡⊖⍤(⍉⍤2) ⍵
hjl                     1
gik

npr
moq

tvx
suw
</pre>

<p><b>Dyad</b>. The left and right ranks 
of<tt> u⍤v </tt>are both the monadic
rank of<tt> v</tt>&nbsp;.<tt> </tt> 
Therefore<tt> ⍺ u⍤v ⍵ </tt>is equivalent 
to<nobr><tt> (v⍺) u v ⍵</tt>&nbsp;.</nobr>
</p>


<span style='font-size:5pt'><p>&nbsp;</p></span>


<a name="hoof"></a>
<table><td width=100><tt>m⍥v &nbsp; u⍥n</tt></td>
 <td width=120>Rank:<tt> ¯ ¯ ¯</tt></td>
 <td width=100>&nbsp;</td>
 <td>Prefer/Defer; Prefer/Defer</td></tr>
</table>
<span style='font-size:1pt'><p>&nbsp;</p></span>

The verbs mt~v and ut~n apply the verbs u and v to
their argument or arguments after transpositions to defer
the axes specified by n (in the case of ut~n) to the tail end,
or to prefer the axes specified by m (for mt~v) to the front.
For example:</p>

<pre>
   a←2 3 4⍴'abcdefghijklmnopqrstuvwx'
   ⊢b← 2 l⍥⊢a
am
eq
iu

bn
fr
jv

co
gs
kw

dp
ht
lx

   2 1⍥,a
ameqiubnfrjvcogskwdphtlx
   (⊢⍥0 a)≡(1 2⍥⊢a)
1
</pre>

<p>These axis movements are prescribed by:</p>

<pre>
PR: (⍋⍺,(⍳0{⍴⍴⍵)~⍺←(⍴⍴⍵)|⍺)⍉⍵
DE: (⍋((⍳0{⍴⍴⍵)~⍺),⍺←(⍴⍴⍵)|⍺)⍉⍵
</pre>

<p>in the following definitions:</p>

<pre>
 m⍥v⍵ ←→ v(&gt;0{a)PR⍵⊣a←⌽3⍴⌽⊃m
 u⍥n⍵ ←→ u(&gt;0{a)DE⍵⊣a←⌽3⍴⌽⊃n
⍺m⍥v⍵ ←→ ((&gt;1{a)PR⍵)v(&gt;2{a)PR⍵⊣a←⌽3⍴⌽⊃m
u⍥n⍵⍵ ←→ ((&gt;1{a)PR⍵)u(&gt;2{a)DE⍵⊣a←⌽3⍴⌽⊃n
</pre>

<p>Thus, the axes moved (for the cases of a monadic
argument, left argument, and right argument, respectively)
by<tt> v⍥(1⊃2⊃3) </tt>
are<tt> 1</tt>&nbsp;,<tt> 2</tt>&nbsp;,<tt> </tt>
and<tt> 3</tt>&nbsp;,<tt> </tt>
by<tt> v⍥(2⊃3) </tt>
are<tt> 3</tt>&nbsp;,<tt> 2</tt>&nbsp;,<tt> </tt>
and<tt> 3</tt>&nbsp;,<tt> </tt>
and by<tt> v⍥1&nbsp;2&nbsp;3 </tt>or<tt> v⍥(&lt;1&nbsp;2&nbsp;3) </tt>
are<tt> 1&nbsp;2&nbsp;3</tt>&nbsp;.<tt> </tt>
Compare with the rank adverb<tt> ⍤ </tt>for use 
of the phrase<tt> ⌽3⍴⌽</tt>&nbsp;.</p>

<span style='font-size:5pt'><p>&nbsp;</p></span>


<table><td width=100><tt>u⍥v</tt></td>
 <td width=120>Rank:<tt> mv lv rv</tt></td>
 <td width=100>&nbsp;</td>
 <td>Upon; Upon</td></tr>
</table>
<span style='font-size:1pt'><p>&nbsp;</p></span>

The monad<tt> u </tt>is applied to the result 
of<tt> v</tt>&nbsp;,<tt> </tt>that is:</p>

<pre>
  u⍥v ⍵ ←→ u v ⍵ ←→ u⍤v ⍵
⍺ u⍥v ⍵ ←→ u ⍺ v ⍵
</pre>

<p>For example:</p>

<pre>
   7 5 3 |⍥- 3 5 7
4 0 4
</pre>

<span style='font-size:5pt'><p>&nbsp;</p></span>


<a name="dot"></a>
<table><td width=100><tt>m.v</tt></td>
 <td width=120>Rank:<tt> * ¯ ¯</tt></td>
 <td width=100>&nbsp;</td>
 <td>; Tie</td></tr>
</table>
<span style='font-size:1pt'><p>&nbsp;</p></span>

<b>Dyad</b>. The left argument of the tie adverb specifies the
number of outer axes of the arguments that must agree,
leaving any remaining axes free to contribute independently
to the overall shape of the result, as illustrated by the examples
in the discussion of agreement in 
<a href="APLDictionary1.htm#2b4">Section II.B</a>.

<p>If the ranks of<tt> v </tt>
are<tt> l </tt>and<tt> r</tt>&nbsp;,<tt> </tt>
and if<tt> z←a&nbsp;t.v&nbsp;b</tt>&nbsp;,<tt> </tt>
then the outer shapes are<tt> osa←(-l)↓⍴a </tt>
and<tt> osb←(-r)↓⍴b</tt>&nbsp;.<tt> </tt>
The argument<tt> t </tt>determines 
a split of these outer shapes
into tied and free shapes as follows:</p>

<pre>
   ta←t↑osa         fa←t↓osa
   tb←t↑osb         fb←t↓osb
</pre>

<p>The tied shapes must agree, 
that is,<tt> ta≡tb</tt>&nbsp;;<tt> </tt>
the overall
outer shape of the result<tt> z </tt>
is given by<tt> ta,fa,fb</tt>&nbsp;.</p>

<p>If<tt> i </tt>is an index that selects 
a single cell of<tt> z</tt>&nbsp;,<tt> </tt> 
then<tt> ⍴&gt;i </tt>
must be<tt> ⍴ta,fa,fb</tt>&nbsp;.<tt> </tt> 
Moreover, each cell of<tt> z </tt>is defined
by:</p>

<pre>
   (i(z)≡((&lt;(⍴ta,fa)↑&gt;i){a) v (&lt;(-⍴ta)⌽(⍴fa)↓(⍴ta)⌽&gt;i){b
</pre>

<p><b>Dialects</b>. Dialects commonly permit<tt> ∘.v </tt>
for<tt> 0 .v</tt>&nbsp;.</p>

<span style='font-size:5pt'><p>&nbsp;</p></span>


<table><td width=100><tt>u.n</tt></td>
 <td width=120>Rank:<tt> mu * *</tt></td>
 <td width=100>&nbsp;</td>
 <td>Ply; </td></tr>
</table>
<span style='font-size:1pt'><p>&nbsp;</p></span>

<b>Monad</b>. The function<tt> u </tt>is applied<tt> n </tt>times. For example:</p>

<pre>
  ⍟. 2 ⍵ ←→ ⍟⍟ ⍵
 -⌿. 4 ⍵ ←→ -⌿-⌿-⌿-⌿ ⍵ 
1¨○ .3 ⍵ ←→ 1○1○1○ ⍵
</pre>

<p>The function<tt> u.¯ </tt>is the <i>limit</i> 
of the application of<tt> u</tt>&nbsp;;<tt> </tt> 
that is,<tt> u.¯⍵ </tt>is equivalent 
to<tt> u.k&nbsp;⍵</tt>&nbsp;,<tt> </tt>
where<tt> u.k&nbsp;⍵ </tt>matches<tt> u.(k-1)⍵</tt>&nbsp;.</p>

<p>Finally, a negative value of<tt> n </tt>
denotes<tt> |n </tt>applications
of the inverse function; that is,<tt> u.¯1 </tt>
is the function inverse
to<tt> u</tt>&nbsp;,<tt> </tt>
and<tt> u.(-n) </tt>is inverse 
to<tt> u.n</tt>&nbsp;,<tt> </tt>
and<tt> u.¯¯ </tt>is inverse to<tt> u.&nbsp;¯</tt>&nbsp;.
</p>

<span style='font-size:5pt'><p>&nbsp;</p></span>


<table><td width=100><tt>u.v</tt></td>
 <td width=120>Rank:<tt> 2 ¯ ¯</tt></td>
 <td width=100>&nbsp;</td>
 <td>; Dot product</td></tr>
</table>
<span style='font-size:1pt'><p>&nbsp;</p></span>

<b>Monad</b>. The expressions<tt> -.×⍵ </tt>and<tt> +.×⍵ </tt>are, 
for square matrix arguments<tt> ⍵</tt>&nbsp;,<tt> </tt>
the <i>determinant</i> 
and the <i>permanent</i> of mathematics. 
More generally,<tt> u.v </tt>is defined in terms of
a recursive &ldquo;expansion by minors&rdquo;, 
given by the following expression from 
<acronym title="Hui, Roger, “Some uses of { and }”, APL87.">[17]</acronym>:

<pre>
   (0{⍉⍵) u.v $ (&lt;¨&gt;¨&gt;{0⊃⊂⍳0{⍴⍵){⍵ : 1=¯1{⍴⍵ : u⌿,⍵
</pre>

<p><b>Dyad</b>. The expression<nobr><tt> ⍺+.×⍵ </tt></nobr>
is equivalent to the <i>dot</i>, <i>inner</i>,
or <i>matrix</i> product as defined in mathematics for 
vectors<tt> </tt>(<tt>+/⍺×⍵</tt>)<tt> </tt>
and matrices (where the element in row<tt> i </tt>
and column<tt> j </tt>of<nobr><tt> ⍺+.x⍵ </tt></nobr>
is the dot product of row<tt> i </tt>of<tt> ⍺ </tt>and
column<tt> j </tt>of<tt> ⍵</tt>).<tt> </tt>
For example:</p>

<pre>
   1 2 3 +.× 3 4 5
26

   a←2 3⍴⍳6⊣b←3 4⍴⍳12
   a+.×b
20 23 26 29
56 68 80 92
   a+.×1 2 3
8 26
</pre>

<p>For verbs other than<tt> + </tt>and<tt> × </tt>
that share the property of
applying to items (i.e., of rank<tt> 0</tt>)<tt> </tt>
and producing items, the
same definition holds for argument ranks not greater 
than<tt> 2</tt>&nbsp;.<tt> </tt> 
For example:</p>

<pre>
   ⍺⌊.+⍵                     ⍺+.⌊⍵
0 1 2 3                   3  3  3  3
3 4 5 6                   9 10 11 12
</pre>

<p>The general definition for arbitrary functions and arguments
of arbitrary rank is:</p>

<pre>
   ⍺ u.v ⍵ ←→ u⌿(¯1⍥⊢⍺) 1 .v ⍵
</pre>

<p>In other words, the result is obtained by<tt> u </tt>
<i>over</i> the
result of applying<tt> 0&nbsp;.v </tt>
to the major ceils of<tt> ¯1⍥⊢⍺ </tt>
and<tt> ⍵</tt>&nbsp;.<tt> </tt>For example:</p>

<pre>
   ⊢c←¯1⍥⊢a                  b
0 3                       0  1  2  3
1 4                       4  5  6  7
2 5                       8  9 10 11

   (0{c) ∘.× 0{b             (1{c) ∘.× 1{b
0 0 0 0                    4 5   6  7
0 3 6 9                   16 20 24 28

   (2{c) ∘.× 2{b
16 18 20 22
40 45 50 55
</pre>

<p>The final result of<tt> a+.×b </tt>
is the sum over these tables,
which agrees with the example of<tt> a+.×b </tt>given earlier.</p>

<p>Since<tt> ¯1⍥⊢⍺ </tt>moves the last axis of<tt> ⍺ </tt>
to the leading position, 
its overall effect in the definition of<tt> u.v </tt>
is to &ldquo;split<tt> ⍺ </tt>along the last axis&rdquo;, 
just as<tt> ⍵ </tt>is split along the
leading axis. 
This asymmetric treatment of the arguments
rests on the desire to make the simple case 
of<tt> +.× </tt>on matrix
arguments agree with the matrix product of mathematics,
whose definition exhibits the same sort of asymmetry.</p>

<span style='font-size:5pt'><p>&nbsp;</p></span>


<a name="union"></a>
<table><td width=100><tt>u∪n</tt></td>
 <td width=120>Rank: Same as<tt> u</tt></td>
 <td width=100>&nbsp;</td>
 <td>Combining rank</td></tr>
</table>
<span style='font-size:1pt'><p>&nbsp;</p></span>

The function<tt> u∪n </tt>is equivalent 
to<tt> u</tt>&nbsp;,<tt> </tt>except that it has
a <i>combining rank</i> of<tt> n </tt>
(relevant to the application of the
conjunctions<tt> ∪ </tt>and<tt> ∩ </tt>to verbs). 
The combining rank of all primitive verbs is zero.
</p>

<span style='font-size:5pt'><p>&nbsp;</p></span>


<a name="union"></a>
<table><td width=100><tt>u∪v</tt></td>
 <td width=220>Rank: Min of ranks of<tt> u </tt>and<tt> v</tt></td>
 <td>Union</td></tr>
</table>
<span style='font-size:1pt'><p>&nbsp;</p></span>

<b>Monad</b>. The result of<tt> u∪v </tt>
is a &ldquo;catenation&rdquo; of<tt> u </tt>and<tt> v </tt>
determined by the combining ranks of<tt> u </tt>and<tt> v </tt>
(denoted here by<tt> cu </tt>and<tt> cv</tt>)<tt> </tt>
as follows:

<pre>
u∪v ⍵ ←→ (u⍵),¨&lt;(v⍵)     if cu=cv
      ←→ (u⍵)⍪(v⍵)       if cu≠cv
</pre>

The combining rank of<tt> u∪v </tt>
is<tt> (cu⌈cv)+cu=cv</tt>&nbsp;.<tt> </tt>
For example:</p>

<pre>
   -∪|∪× ¯2 ¯1 0 1
 2  2 ¯1
 1  1 ¯1
 0  0  0
¯1  1  1
</pre>

<span style='font-size:5pt'><p>&nbsp;</p></span>


<a name="intersection"></a>
<a name="union"></a>
<table><td width=100><tt>u∩v</tt></td>
 <td width=220>Rank: Min of ranks of<tt> u </tt>and<tt> v</tt></td>
 <td>Intersection</td></tr>
</table>
<span style='font-size:1pt'><p>&nbsp;</p></span>

<b>Monad</b>. The combining rank 
(defined under<tt> ∪</tt>)<tt> </tt>
is<tt> cu-1</tt>&nbsp;,<tt> </tt>
where<tt> cu </tt>denotes the combining rank 
of<tt> u</tt>&nbsp;.<tt> </tt>
Moreover:

<pre>
   u∩v⍵ ←→ v⌿⍤cu u⍵
</pre>

<p>For example,<tt> f∪g∩+ </tt>and<tt> f∪g∩× </tt>
denote what is commonly
denoted in mathematics by<tt> f+g </tt>
and<tt> f×g</tt>&nbsp;.</p>

<span style='font-size:5pt'><p>&nbsp;</p></span>


<a name="del"></a>
<table><td width=100><tt>m∇n</tt></td>
 <td width=120>Rank:<tt> ¯ ¯ ¯</tt></td>
 <td width=100>&nbsp;</td>
 <td>Define; Define</td></tr>
</table>
<span style='font-size:1pt'><p>&nbsp;</p></span>

<b>Verb definition</b>. If<tt> m </tt>and<tt> d </tt>are 
(possibly boxed) character nouns, 
then<tt> m∇d </tt>yields a verb of unbounded rank whose
monadic and dyadic cases are determined by<tt> m </tt>
and<tt> d </tt>respectively.
For example:</p>

<pre>
   ⊢m←,⊃'⍵×⍎(⍵≤2)↓''$⍵-1'''
|¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|
|⍵×⍎(⍵≤2)↓'$⍵-1'|
|_______________|

   ⊢d←'s←⍴⍵'⊃'c&#x2345;⍺,⍵'⊃'(2,s)⍴c'
|¯¯¯¯||¯¯¯¯¯||¯¯¯¯¯¯¯|
Is←⍴⍵||c&#x2345;⍺,⍵||(2,s)⍴c|
|____||_____||_______|

   s←c←⍵←2
   r←'abc' m∇d 'def'
   r
abc
def

   s
2

   c
abcdef

   ⍵
2
</pre>

<p>The major aspects of<tt> ∇ </tt>
can be inferred from this example:
the derived function executes by first assigning to<tt> ⍺ </tt>
and<tt> ⍵ </tt>the values of the arguments, 
then executing the boxed sentences in<tt> d </tt>in sequence, 
and then providing as the explicit
result of the function the result of the last sentence
executed.</p>

<p>The names<tt> ⍺</tt>&nbsp;,<tt> ⍵</tt>&nbsp;,<tt> →</tt>&nbsp;,<tt> </tt>
and<tt> $ </tt>are <i>local</i> to the function,
and other names may be localized <i>dynamically</i>, 
as discussed in
<a href="APLDictionary1.htm#2j">Section II.J</a>.</p>

<p>The monadic case of<tt> m∇d </tt>illustrates the use of the
symbol<tt> $ </tt>for <i>self-reference</i>, 
that is, reference to the derived
function being produced. For example:</p>

<pre>
   m∇d 2             m∇d 3            m∇d 4
2                 6                24
</pre>

<p>The sequence of execution of the sentences in 
evaluating<tt> m∇d&nbsp;⍵</tt>&nbsp;,<tt> </tt>
is controlled by a system variable<tt> → </tt>(local
to a function) as follows:<tt> → </tt>
is first assigned the value 
of<tt> ⍳0{⍴m</tt>&nbsp;;<tt> </tt>
sentence<tt> &gt;(0{→){m </tt>is selected for 
execution,<tt> → </tt>is respecified 
by<tt> →←1↓→</tt>&nbsp;,<tt> </tt>
the selected sentence is executed,
and the sequence is repeated until<tt> → </tt>is exhausted, 
or until a value of<tt> 0{→ </tt>
occurs that is not an index to<tt> m</tt>&nbsp;.<tt> </tt>
Similar remarks apply to the dyadic case.</p>

<p>Since<tt> → </tt>may be respecified within any sentence, any
sequence of execution can be achieved. 
For example, if: <nobr><tt> p←'b←,1'⊃'→←&gt;(⍵≥⍴b){2⊃3 1'⊃'b'⊃'b←(0,b)+b,0'</tt>&nbsp;,</nobr><tt> </tt>
then,</p>

<pre>
   p
|¯¯¯¯||¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯||¯||¯¯¯¯¯¯¯¯¯¯¯|
|b←,1||→←&gt;(⍵≥⍴b){2⊃3 1||b||b←(0,b)+b,0|
|____||_______________||_||___________|

   f←p∇∘
   f 0               f 1            f 3
1                 1 1             1 3 3 1
</pre>

<p>If sentence<tt> k </tt>(that is,<tt> &gt;k{a</tt>)<tt> </tt>
begins with a name followed
by a right parenthesis, that name (called a <i>label</i>)
is localized and assigned the 
value<tt> k↓⍳⍴a</tt>&nbsp;.<tt> </tt>
Labels are useful in branching, that is, 
in expressions of the 
form<tt> →←&gt;j{l1⊃l2⊃l3 </tt>or<tt> →←l1~l2</tt>&nbsp;.</p>

<p>Finally, if<tt> a </tt>is any argument 
of<tt> ∇</tt>&nbsp;,<tt> </tt>it is treated 
as<tt> ,⊃a</tt>&nbsp;.<tt> </tt>
Consequently, open arguments can be used, 
as in<tt> '⍵*÷2'∇'⍵*÷⍺'</tt>&nbsp;.</p>

<p><b>Adverb definition</b>. The conjunction<tt> ∇ </tt>
accepts certain integer left arguments: 
in particular<tt> 3∇(m⊃d) </tt>produces a
function, and is equivalent to<tt> m∇d</tt>&nbsp;.<tt> </tt> 
More generally,<tt> 1∇n </tt>
yields an adverb,<tt> 2∇n </tt>
a conjunction, and<tt> 3∇n </tt>
a verb, provided
that<tt> n </tt>is a suitable representation 
of the corresponding result.</p>

<p>The representation of a conjunction differs from that
for a function only in that it may include 
the names<tt> <u>⍺</u> </tt>and<tt> <u>⍵</u></tt>&nbsp;,<tt> </tt>
which refer to the left and fight arguments 
of the resulting conjunction. 
Similar remarks apply to an adverb.
For example,<tt> COM←1∇('(<u>⍺</u>⍵)'⊃'⍵<u>⍺</u>⍺') </tt>
is a &ldquo;commute&rdquo;
adverb such that<tt> a F COM b </tt>is equivalent 
to<tt> b&nbsp;F&nbsp;a</tt>&nbsp;,<tt> </tt>
and<tt> F&nbsp;COM&nbsp;b </tt>is equivalent to<tt> F&nbsp;b</tt>.</p>

<p>Similarly,<tt> TIL←2∇('(<u>⍵</u>⍵)<u>⍺</u>⍵'⊃'(<u>⍵</u>⍵)<u>⍺</u>⍺') </tt>is a
conjunction such that if<tt> H←F&nbsp;TIL&nbsp;G</tt>&nbsp;,<tt> </tt>
then<tt> a&nbsp;H&nbsp;b </tt>is equivalent
to<tt> (G&nbsp;b)F&nbsp;a</tt>&nbsp;,<tt> </tt>and<tt> H&nbsp;b </tt>
is equivalent to<tt> (G&nbsp;b)F&nbsp;b</tt>&nbsp;.</p>

<p><b>Representations</b>. The expression<tt> 0∇a </tt>
yields a noun which
is the <i>representation</i> 
of the argument<tt> a</tt>&nbsp;.<tt> </tt>
If<tt> a </tt>is a verb,
adverb, or conjunction defined by<tt> a←k∇(m⊃d) </tt>
(for any<tt> k∊1,&nbsp;2,&nbsp;3</tt>),<tt> </tt>
then<tt> 0∇a </tt>yields 
the &ldquo;standard&rdquo; 
representation<tt> (,⊃m),(,⊃d)</tt>&nbsp;.</p>

<p>More generally, the representation of a verb, adverb,
or conjunction may comprise more than two elements. For
example, if<tt> H←F.G</tt>&nbsp;,<tt> </tt>
then the representation of<tt> H </tt>must incorporate
the complete representations of the verbs 
(or nouns)<tt> F </tt>and<tt> G</tt>&nbsp;.<tt> </tt>
This is necessary to ensure that subsequent reassignments
of the names<tt> F </tt>and<tt> G </tt>
will not affect the definition
of<tt> H</tt>&nbsp;.<tt> </tt>
This is analogous to the fact that the value of the 
noun<tt> c←a×b </tt>is not affected by subsequent reassignments 
of the values of<tt> a </tt>and<tt> b</tt>&nbsp;.</p>

<p>For<tt> k∊⍳4</tt>&nbsp;,<tt> </tt>
the expression<tt> k∇r </tt>applies to any suitable
representation<tt> r</tt>&nbsp;.<tt> </tt>
Consequently<tt> a </tt>is equivalent to<tt> k∇(0∇a) </tt>
for any<tt> a</tt>&nbsp;.</p>

<span style='font-size:5pt'><p>&nbsp;</p></span>


<a name="colon"></a>
<table><td width=100><tt>u:n </tt></td>
 <td width=120>Rank:</td>
 <td width=100>&nbsp;</td>
 <td>Custom</td></tr>
</table>
<span style='font-size:1pt'><p>&nbsp;</p></span>

Most adverbs and conjunctions apply to all functions
in a single manner; 
the custom conjunction<tt> : </tt>applies to particular
functions in ways defined for the specific function,
and its effects are discussed under each function affected.
For example,<nobr><tt> 1 ○:90 a </tt></nobr>
evaluates the sine of<tt> a </tt>in degrees,
that is, in a system having 90 units per 
quadrant;<tt> ⍕:b&nbsp;x </tt>
formats<tt> x </tt>with the 
&ldquo;position and spacing&rdquo; 
determined by the value of<tt> b</tt>&nbsp;.

<p>For each of the 
relations<tt> </tt>(<tt>&lt;≤=≥&gt;≠≡</tt>),<tt> </tt>
the custom conjunction
specifies the tolerance. 
For example,<tt> &lt;:1E¯6 </tt>is
equivalent to<tt> &lt; </tt>used with<tt> ⎕ct </tt>
set to<tt> 1E¯6</tt>&nbsp;.</p>
<span style='font-size:5pt'><p>&nbsp;</p></span>


<a name="withe"></a>
<table><td width=100><tt>u&#x2369;v </tt></td>
 <td width=120>Rank:<tt> mv lu mv</tt></td>
 <td width=100>&nbsp;</td>
 <td>Withe</td></tr>
</table>
<span style='font-size:1pt'><p>&nbsp;</p></span>

Withe<tt> </tt>(<tt>u&#x2369;v</tt>)<tt> </tt>
is similar to<tt> </tt>(<tt>u⍤v</tt>)&nbsp;,<tt> </tt>
but applies<tt> v </tt>only to
the right argument:</p>

<pre>
   ⍺ u&#x2369;v ⍵ ←→ ⍺ u v ⍵
     u&#x2369;v ⍵ ←→ ⍵ u v ⍵
</pre>
<br>



<a name="ref"></a>
<p><b>References</b></p>

<table>
<tr><td valign=top>[1]</td><td>&nbsp;</td><td>
International Standards Organization. 
<i>Standard for Programming Language APL</i>, 
ISO TC97/SC5 WG 6 N33, 1986.
 </td></tr>
<tr><td valign=top>[2]</td><td>&nbsp;</td><td>
Falkoff, A.D., and K.E. Iverson, 
<a target=_parent href="http://www.jsoftware.com/papers/APLDesign.htm">&ldquo;The Design of APL&rdquo;</a>,
IBM Journal of Research and Development, Vol.17,
No. 4, July 1973.
(Republished in 
<acronym title="McDonnell, E.E., Editor, 
A Source Book in APL, APL Press, 1981.">[16]</acronym>).
 </td></tr>
<tr><td valign=top>[3]</td><td>&nbsp;</td><td>
Falkoff, A.D., and K.E. Iverson, 
<a target=_parent href="http://www.jsoftware.com/papers/APLEvol.htm"><i>The Evolution of APL</i></a>,
SIGPLAN Notices 13, ACM, August 1978. 
(Republished in 
<acronym title="McDonnell, E.E., Editor, 
A Source Book in APL, APL Press, 1981.">[16]</acronym>).
 </td></tr>
<tr><td valign=top>[4]</td><td>&nbsp;</td><td>
<i>The American Heritage Dictionary of the English Language</i>,
Houghton Mifflin Company.
 </td></tr>
<tr><td valign=top>[5]</td><td>&nbsp;</td><td>
Berry, P.C., <i>SHARP APL Pocket Reference</i>, Toronto,
I.P. Sharp Associates, 1984. Publication 0199 8409
E3 R1.
 </td></tr>
<tr><td valign=top>[6]</td><td>&nbsp;</td><td>
Iverson, K.E., 
<a target=_parent href="http://www.jsoftware.com/papers/DirectDef.htm"><i>Elementary Analysis</i></a>, 
APL Press, 1976.
 </td></tr>
<tr><td valign=top>[7]</td><td>&nbsp;</td><td>
Falkoff, A.D. and K.E. Iverson, <i>APL Language</i>
(IBM GC26-3847).
</td></tr>
<tr><td valign=top>[8]</td><td>&nbsp;</td><td>
Berry, P.C., <i>SHARP APL Reference Manual</i>, 
(with Additions and Corrections). Toronto, I.P. Sharp Associates,
1981. ISBN 0 86493 0011.
 </td></tr>
<tr><td valign=top>[9]</td><td>&nbsp;</td><td>
McDonnell E.E., 
<a target=_parent href="http://www.jsoftware.com/papers/eem/0div0.htm">&ldquo;Zero Divided by Zero&rdquo;</a>, 
New York: Association for Computing Machinery, 
<i>Proceedings of APL76</i>, pp. 295-302.
 </td></tr>
<tr><td valign=top>[10]</td><td>&nbsp;</td><td>
Gellert, W., et al., 
<i>The VNR Concise Encyclopedia of Mathematics</i>, Van Nostrand Reinhold.
 </td></tr>
<tr><td valign=top>[11]</td><td>&nbsp;</td><td>
McDonnell, E.E., 
<a target=_parent href="http://www.jsoftware.com/papers/eem/complexfloor.htm">&ldquo;Complex Floor&rdquo;</a>, 
<i>APL Congress 73</i>, North Holland Publishing Company.
 </td></tr>
<tr><td valign=top>[12]</td><td>&nbsp;</td><td>
Rabenhorst, D.A., <i>APL2 IUP Manual</i>, IBM Corporation.
</td></tr>
<tr><td valign=top>[13]</td><td>&nbsp;</td><td>
Cheney, C., <i>NARS Manual</i>, STSC Inc.
 </td></tr>
<tr><td valign=top>[14]</td><td>&nbsp;</td><td>
Wooster, P.K., <i>Extended Upgrade and Downgrade</i>,
SHARP APL Technical Note 41, I.P. Sharp Associates.
 </td></tr>
<tr><td valign=top>[15]</td><td>&nbsp;</td><td>
Smith, H.J., &ldquo;Sorting - a New/Old Problem&rdquo;, 
<i>APL79 Conference Proceedings</i>, APL Quote Quad, ACM.
 </td></tr>
<tr><td valign=top>[16]</td><td>&nbsp;</td><td>
McDonnell, E.E., Editor, 
<a target=_parent href="http://www.jsoftware.com/jwiki/Doc/A%20Source%20Book%20in%20APL"><i>A Source Book in APL</i></a>, 
APL Press, 1981.
 </td></tr>
<tr><td valign=top>[17]</td><td>&nbsp;</td><td>
Hui, Roger, 
<a target=_parent href="http://www.jsoftware.com/papers/from.htm">&ldquo;Some 
uses of { and }&rdquo;</a>, 
APL87.
 </td></tr>
</table>
<br>



<a name="tab1"></a>
<p align=center><b>Table 1: APL Alphabet and ASCII Transliteration</b></p>

<table width=100% border=1 cellspacing=0 cellpadding=6><tr><td><table><tr><td valign=top width=252>
<table>
<tr><td><tt>↑</tt></td><td>&nbsp; &nbsp;</td> <td>Pike  </td><td>&nbsp;</td> <td><tt>@I^   </tt></td></tr>
<tr><td><tt>→</tt></td><td>&nbsp;</td> <td>&nbsp;</td><td>&nbsp;</td> <td><tt>@-&gt;</tt></td></tr>
<tr><td><tt>↓</tt></td><td>&nbsp;</td> <td>Spike </td><td>&nbsp;</td> <td><tt>@Iv   </tt></td></tr>
<tr><td><tt>←</tt></td><td>&nbsp;</td> <td>&nbsp;</td><td>&nbsp;</td> <td><tt>@&lt;-</tt></td></tr>
<tr><td>&nbsp;</td></tr>

<tr><td><tt>⊤   </tt></td><td>&nbsp;</td> <td>&nbsp;       </td><td>&nbsp;</td> <td><tt>@T    </tt></td></tr>
<tr><td><tt>⊣   </tt></td><td>&nbsp;</td> <td>&nbsp;       </td><td>&nbsp;</td> <td><tt>@-I   </tt></td></tr>
<tr><td><tt>⊥   </tt></td><td>&nbsp;</td> <td>Base         </td><td>&nbsp;</td> <td><tt>@@T   </tt></td></tr>
<tr><td><tt>⊢   </tt></td><td>&nbsp;</td> <td>&nbsp;       </td><td>&nbsp;</td> <td><tt>@I-   </tt></td></tr>
<tr><td>&nbsp;</td></tr>

<tr><td><tt>∪   </tt></td><td>&nbsp;</td> <td>Cup          </td><td>&nbsp;</td> <td><tt>@u    </tt></td></tr>
<tr><td><tt>⊂   </tt></td><td>&nbsp;</td> <td>&nbsp;       </td><td>&nbsp;</td> <td><tt>@c    </tt></td></tr>
<tr><td><tt>∩   </tt></td><td>&nbsp;</td> <td>Cap          </td><td>&nbsp;</td> <td><tt>@n    </tt></td></tr>
<tr><td><tt>⊃   </tt></td><td>&nbsp;</td> <td>&nbsp;       </td><td>&nbsp;</td> <td><tt>@@c   </tt></td></tr>
<tr><td>&nbsp;</td></tr>

<tr><td><tt>∨   </tt></td><td>&nbsp;</td> <td>&nbsp;       </td><td>&nbsp;</td> <td><tt>@v    </tt></td></tr>
<tr><td><tt>&lt;</tt></td><td>&nbsp;</td> <td>&nbsp;       </td><td>&nbsp;</td> <td><tt>&lt;  </tt></td></tr>
<tr><td><tt>^   </tt></td><td>&nbsp;</td> <td>Caret        </td><td>&nbsp;</td> <td><tt>^     </tt></td></tr>
<tr><td><tt>&gt;</tt></td><td>&nbsp;</td> <td>&nbsp;       </td><td>&nbsp;</td> <td><tt>&gt;  </tt></td></tr>
<tr><td>&nbsp;</td></tr>

<tr><td><tt>≥   </tt></td><td>&nbsp;</td> <td>&nbsp;       </td><td>&nbsp;</td> <td><tt>@&gt;_</tt></td></tr>
<tr><td><tt>≤   </tt></td><td>&nbsp;</td> <td>&nbsp;       </td><td>&nbsp;</td> <td><tt>@&lt;_</tt></td></tr>
<tr><td><tt>[   </tt></td><td>&nbsp;</td> <td>Left Bracket </td><td>&nbsp;</td> <td><tt>[     </tt></td></tr>
<tr><td><tt>]   </tt></td><td>&nbsp;</td> <td>Right Bracket</td><td>&nbsp;</td> <td><tt>]     </tt></td></tr>
<tr><td>&nbsp;</td></tr>

<tr><td><tt>⌊   </tt></td><td>&nbsp;</td> <td>Downstile    </td><td>&nbsp;</td> <td><tt>@L    </tt></td></tr>
<tr><td><tt>⌈   </tt></td><td>&nbsp;</td> <td>Upstile      </td><td>&nbsp;</td> <td><tt>@@L   </tt></td></tr>
<tr><td><tt>|   </tt></td><td>&nbsp;</td> <td>Stile        </td><td>&nbsp;</td> <td><tt>@I    </tt></td></tr>
<tr><td><tt>/   </tt></td><td>&nbsp;</td> <td>Slash        </td><td>&nbsp;</td> <td><tt>/     </tt></td></tr>
<tr><td>&nbsp;</td></tr>

<tr><td><tt>-   </tt></td><td>&nbsp;</td> <td>Bar          </td><td>&nbsp;</td> <td><tt>-     </tt></td></tr>
<tr><td><tt>\   </tt></td><td>&nbsp;</td> <td>&nbsp;       </td><td>&nbsp;</td> <td><tt>\     </tt></td></tr>
<tr><td><tt>+   </tt></td><td>&nbsp;</td> <td>Greek Cross  </td><td>&nbsp;</td> <td><tt>+     </tt></td></tr>
<tr><td><tt>×   </tt></td><td>&nbsp;</td> <td>Cross        </td><td>&nbsp;</td> <td><tt>@x    </tt></td></tr>
<tr><td>&nbsp;</td></tr>

<tr><td><tt>=   </tt></td><td>&nbsp;</td> <td>&nbsp;       </td><td>&nbsp;</td> <td><tt>=     </tt></td></tr>
<tr><td><tt>≠   </tt></td><td>&nbsp;</td> <td>&nbsp;       </td><td>&nbsp;</td> <td><tt>@=/   </tt></td></tr>
<tr><td><tt>*   </tt></td><td>&nbsp;</td> <td>Star         </td><td>&nbsp;</td> <td><tt>*     </tt></td></tr>
<tr><td><tt>≡   </tt></td><td>&nbsp;</td> <td>&nbsp;       </td><td>&nbsp;</td> <td><tt>@=_   </tt></td></tr>
<tr><td>&nbsp;</td></tr>

<tr><td><tt>,   </tt></td><td>&nbsp;</td> <td>Comma        </td><td>&nbsp;</td> <td><tt>,     </tt></td></tr>
<tr><td><tt>;   </tt></td><td>&nbsp;</td> <td>Semicolon    </td><td>&nbsp;</td> <td><tt>;     </tt></td></tr>
<tr><td><tt>.   </tt></td><td>&nbsp;</td> <td>Period       </td><td>&nbsp;</td> <td><tt>.     </tt></td></tr>
<tr><td><tt>:   </tt></td><td>&nbsp;</td> <td>Colon        </td><td>&nbsp;</td> <td><tt>:     </tt></td></tr>
<tr><td>&nbsp;</td></tr>

<tr><td><tt>?   </tt></td><td>&nbsp;</td> <td>Query        </td><td>&nbsp;</td> <td><tt>?     </tt></td></tr>
<tr><td><tt>'   </tt></td><td>&nbsp;</td> <td>Quote        </td><td>&nbsp;</td> <td><tt>'     </tt></td></tr>
<tr><td><tt>¨   </tt></td><td>&nbsp;</td> <td>Dieresis     </td><td>&nbsp;</td> <td><tt>"     </tt></td></tr>
<tr><td><tt>!   </tt></td><td>&nbsp;</td> <td>Exclamation  </td><td>&nbsp;</td> <td><tt>!     </tt></td></tr>
<tr><td>&nbsp;</td></tr>

<tr><td><tt>¯   </tt></td><td>&nbsp;</td> <td>Macron       </td><td>&nbsp;</td> <td><tt>@-    </tt></td></tr>
<tr><td><tt>~   </tt></td><td>&nbsp;</td> <td>Tilde        </td><td>&nbsp;</td> <td><tt>~     </tt></td></tr>
<tr><td><tt>$   </tt></td><td>&nbsp;</td> <td>Dollar       </td><td>&nbsp;</td> <td><tt>$     </tt></td></tr>
<tr><td><tt>_   </tt></td><td>&nbsp;</td> <td>Underscore   </td><td>&nbsp;</td> <td><tt>_     </tt></td></tr>

</table></td><td valign=top width=252><table>

<tr><td><tt>(   </tt></td><td>&nbsp;</td> <td>Left Paren   </td><td>&nbsp;</td> <td><tt>(     </tt></td></tr>
<tr><td><tt>)   </tt></td><td>&nbsp;</td> <td>Right Paren  </td><td>&nbsp;</td> <td><tt>)     </tt></td></tr>
<tr><td><tt>{   </tt></td><td>&nbsp;</td> <td>Left Brace   </td><td>&nbsp;</td> <td><tt>{     </tt></td></tr>
<tr><td><tt>}   </tt></td><td>&nbsp;</td> <td>Right Brace  </td><td>&nbsp;</td> <td><tt>}     </tt></td></tr>
<tr><td>&nbsp;</td></tr>

<tr><td><tt>⋄   </tt></td><td>&nbsp;</td> <td>Diamond      </td><td>&nbsp;</td> <td><tt>@&lt;&gt;</tt></td></tr>
<tr><td><tt>∘   </tt></td><td>&nbsp;</td> <td>Jot          </td><td>&nbsp;</td> <td><tt>@o    </tt></td></tr>
<tr><td><tt>○   </tt></td><td>&nbsp;</td> <td>Circle       </td><td>&nbsp;</td> <td><tt>@O    </tt></td></tr>
<tr><td><tt>÷   </tt></td><td>&nbsp;</td> <td>&nbsp;       </td><td>&nbsp;</td> <td><tt>@-:   </tt></td></tr>
<tr><td>&nbsp;</td></tr>

<tr><td><tt>⍺   </tt></td><td>&nbsp;</td> <td>Alpha        </td><td>&nbsp;</td> <td><tt>@a    </tt></td></tr>
<tr><td><tt>∊   </tt></td><td>&nbsp;</td> <td>Epsilon      </td><td>&nbsp;</td> <td><tt>@e    </tt></td></tr>
<tr><td><tt>⍳   </tt></td><td>&nbsp;</td> <td>Iota         </td><td>&nbsp;</td> <td><tt>@i    </tt></td></tr>
<tr><td><tt>⍴   </tt></td><td>&nbsp;</td> <td>Rho          </td><td>&nbsp;</td> <td><tt>@r    </tt></td></tr>
<tr><td>&nbsp;</td></tr>

<tr><td><tt>⍵   </tt></td><td>&nbsp;</td> <td>Omega        </td><td>&nbsp;</td> <td><tt>@w    </tt></td></tr>
<tr><td><tt>∆   </tt></td><td>&nbsp;</td> <td>Delta        </td><td>&nbsp;</td> <td><tt>@D    </tt></td></tr>
<tr><td><tt>∇   </tt></td><td>&nbsp;</td> <td>Del          </td><td>&nbsp;</td> <td><tt>@@D   </tt></td></tr>
<tr><td><tt>⎕   </tt></td><td>&nbsp;</td> <td>Quad         </td><td>&nbsp;</td> <td><tt>@[]   </tt></td></tr>
<tr><td>&nbsp;</td></tr>

<tr><td><tt>⍝   </tt></td><td>&nbsp;</td> <td>Lamp         </td><td>&nbsp;</td> <td><tt>@no   </tt></td></tr>
<tr><td><tt>⌹   </tt></td><td>&nbsp;</td> <td>Domino       </td><td>&nbsp;</td> <td><tt>@[-:] </tt></td></tr>
<tr><td><tt>⍤   </tt></td><td>&nbsp;</td> <td>Paw          </td><td>&nbsp;</td> <td><tt>@o"   </tt></td></tr>
<tr><td><tt>⍥   </tt></td><td>&nbsp;</td> <td>Hoof         </td><td>&nbsp;</td> <td><tt>@O"   </tt></td></tr>
<tr><td>&nbsp;</td></tr>

<tr><td><tt>⌽   </tt></td><td>&nbsp;</td> <td>&nbsp;       </td><td>&nbsp;</td> <td><tt>@OI   </tt></td></tr>
<tr><td><tt>⊖   </tt></td><td>&nbsp;</td> <td>&nbsp;       </td><td>&nbsp;</td> <td><tt>@O-   </tt></td></tr>
<tr><td><tt>⍉   </tt></td><td>&nbsp;</td> <td>&nbsp;       </td><td>&nbsp;</td> <td><tt>@O\   </tt></td></tr>
<tr><td><tt>⍟   </tt></td><td>&nbsp;</td> <td>&nbsp;       </td><td>&nbsp;</td> <td><tt>@O*   </tt></td></tr>
<tr><td>&nbsp;</td></tr>

<tr><td><tt>⍱   </tt></td><td>&nbsp;</td> <td>&nbsp;       </td><td>&nbsp;</td> <td><tt>@v~   </tt></td></tr>
<tr><td><tt>⍲   </tt></td><td>&nbsp;</td> <td>&nbsp;       </td><td>&nbsp;</td> <td><tt>@^~   </tt></td></tr>
<tr><td><tt>⍎   </tt></td><td>&nbsp;</td> <td>Tack         </td><td>&nbsp;</td> <td><tt>@@To  </tt></td></tr>
<tr><td><tt>⍕   </tt></td><td>&nbsp;</td> <td>Thorn        </td><td>&nbsp;</td> <td><tt>@To   </tt></td></tr>
<tr><td>&nbsp;</td></tr>

<tr><td><tt>⍋   </tt></td><td>&nbsp;</td> <td>Pine         </td><td>&nbsp;</td> <td><tt>@DI   </tt></td></tr>
<tr><td><tt>⍒   </tt></td><td>&nbsp;</td> <td>Spine        </td><td>&nbsp;</td> <td><tt>@@DI  </tt></td></tr>
<tr><td><tt>⌿   </tt></td><td>&nbsp;</td> <td>&nbsp;       </td><td>&nbsp;</td> <td><tt>@/-   </tt></td></tr>
<tr><td><tt>⍀   </tt></td><td>&nbsp;</td> <td>&nbsp;       </td><td>&nbsp;</td> <td><tt>@\-   </tt></td></tr>
<tr><td>&nbsp;</td></tr>

<tr><td><tt>⍫   </tt></td><td>&nbsp;</td> <td>&nbsp;       </td><td>&nbsp;</td> <td><tt>@@D~   </tt></td></tr>
<tr><td><tt>⍞   </tt></td><td>&nbsp;</td> <td>&nbsp;       </td><td>&nbsp;</td> <td><tt>@[']   </tt></td></tr>
<tr><td><tt>⍪   </tt></td><td>&nbsp;</td> <td>&nbsp;       </td><td>&nbsp;</td> <td><tt>@,-    </tt></td></tr>
<tr><td><tt>&#x2345;</tt></td><td>&nbsp;</td> <td>&nbsp;   </td><td>&nbsp;</td> <td><tt>@<-|   </tt></td></tr>
<tr><td>&nbsp;</td></tr>

<tr><td><tt>&#x2376;</tt></td><td>&nbsp;</td> <td>&nbsp;   </td><td>&nbsp;</td> <td><tt>@a_   </tt></td></tr>
<tr><td><tt>⍷       </tt></td><td>&nbsp;</td> <td>&nbsp;   </td><td>&nbsp;</td> <td><tt>@e_   </tt></td></tr>
<tr><td><tt>⍸       </tt></td><td>&nbsp;</td> <td>&nbsp;   </td><td>&nbsp;</td> <td><tt>@i_   </tt></td></tr>
<tr><td><tt>&#x2379;</tt></td><td>&nbsp;</td> <td>&nbsp;   </td><td>&nbsp;</td> <td><tt>@w_   </tt></td></tr>
<tr><td>&nbsp;</td></tr>

<tr><td><tt>&#x2369;</tt></td><td>&nbsp;</td> <td>Withe</td><td>&nbsp;</td> <td><tt>@&gt;"</tt></td></tr>

</table></td></tr></table>
</td></tr></table>

<p>The ASCII 
<acronym title="Berry, P.C., SHARP APL Pocket Reference, Toronto, 
I.P. Sharp Associates, 1984. Publication 0199 8409 E3 R1.">[5]</acronym>
transliteration scheme in the last column is based upon <i>similarity</i>, 
English-Greek <i>correspondences</i>,
and <i>variants</i>, denoted by 
an extra delimiter<tt> </tt>(<tt>@</tt>)<tt> </tt>
and varying by rotation about a horizontal or vertical axis. 
Each transliteration which begins 
with a delimiter must end with a space.
<br>&nbsp;</p>



<a name="tab2"></a>
<p align=center><b>Table 2: Parsing Process</b></p>

<table border=1 width=100% cellpadding=5 cellspacing=0><tr><td>
<pre>
parse l;names;r;u                                  
names←'ABCDE'⊣⍎'st',(0=⎕nc 'st')/'←2 8⍴''⍝1+/.←()'''
r←4⍴' '⊣l←'⍝',(l≠' ')/l                            
l1:l,'⋄',r                                          
u←∧/(cases∊&lt;'')∨((⍴cases)⍴4↑r)∊⍤&gt;cases              
→l1×⍎,(&lt;\u)⌿actions

move:s⊣l ←¯1↓l⊣r ←(⍵eval(-1⌊s←0≠⍴l)↑l),r⊣⎕←(-⍴l)↑⍵
  eval:⍵:⍺='→':st[1;st[0;]⍳,⍵]

noun: 1⊣r ←'1' f ⍵
verb: 1⊣r ←'+' f ⍵
punc: 1⊣r ←r[1] f ⍵
is:1⊣r ←t f ⍵⊣st ←((1↑s⌽q,¯1↑(s←'1'=q←r[0])⌽names),t←r[2]),st
  f:(k↑r),⍺,((k←u⍳1)↓(~u←⍵='↓')/4↑r),4↓r⊣⎕←((1+⍴l)⍴' '),⍵
</pre>

<p>The<tt> parse </tt>function is controlled 
by a table of<tt> cases</tt>&nbsp;,<tt> </tt>and a table of<tt> actions</tt>&nbsp;:</p>

<table><tr><td valign=top><pre>
   cases
⍝/+←(   +     1        
.       1     +     1  
⍝1/+←(  1     +     1  
⍝1/+←(  1+    /        
⍝1/+←(  1+    .     1+ 
1abcde  ←     1+/.     
(       1/.+  )        
←                      </pre></td><td><tt>&nbsp; &nbsp; &nbsp;</tt></td><td valign=top><pre>
   actions
noun ' ↓↓ '  
noun '  ↓↓'  
noun ' ↓↓↓'  
verb ' ↓↓ '  
verb ' ↓↓↓'  
is   '↓↓↓ '  
punc '↓↓↓ '  
move '∘'     
move '→'     </pre></td></tr></table>

For example, when the right stack 
is<tt> (+1)+1</tt>&nbsp;,<tt> </tt> 
the case in the leading row is satisfied 
because<tt> ( </tt>belongs to the
(boxed) list in the leading 
element,<tt> + </tt>to the 
next,<tt> 1 </tt>to the next, 
and<tt> ) </tt>to the last 
(since an empty list indicates that
anything is accepted). 
The corresponding 
action<tt> </tt>(<tt>noun ' ↓↓ '</tt>)<tt> </tt>
is therefore executed. 
It replaces the elements
indicated by the arrows 
by a single<tt> 1</tt>&nbsp;,<tt> </tt> 
which represents the noun 
that results from the execution 
of<tt> +1</tt>&nbsp;.<br>

<p>It should be noted that the <i>earliest</i>
eligible case is chosen; 
the moves (from left stack to right stack) in the last
two cases therefore occur 
only if nothing else is possible.</p>

<p>The noun names contains 
the capital letters<tt> A, B, C, D, E </tt> 
used as pronouns in assignments 
of the form<tt> (1)+1</tt>&nbsp;,<tt> </tt>
a case recognized because of the<tt> 1 </tt>
included in the first element of the seventh row 
of cases (that is,<tt> 6{cases</tt>).<tt> </tt>
Name assignments made by previous uses 
of<tt> parse </tt>can be expunged 
by expunging the symbol 
table<tt> st</tt>&nbsp;,<tt> </tt>that is,
by entering<tt> ⎕ex&nbsp;'st'</tt>&nbsp;.</p>

<p>A version of parse that uses only facilities 
available in all dialects may be obtained 
by replacing its last two lines
by a single line:</p>

<pre>
→l1×⍎actions[(^/ 0 1 1 ⍉cases ∨.^'abcde⍝ ()←./+1'∘.=4↑r)⍳1;]
</pre>

<p>and replacing cases by the 
boolean array<tt> cases←⍉(14⍴2)⊤n</tt>&nbsp;,<tt> </tt>
where<tt> n </tt>is:</p>

<pre>
  342     8   343   343   343 15873    64    16 16383
    2     1     1     3     3    16    15 16383 16383
    1     2     2     4     8    15    32 16383 16383
16383     1     1 16383     3 16383 16383 16383 16383
</pre>
</td></tr></table>
<br>



<a name="tab3"></a>
<p align=center><b>Table 3: Translation to Canonical Form</b></p>

<table border=1 width=100% cellpadding=5 cellspacing=0><tr><td>
<pre>
z←translate a;b;d;l;m;nq;t
z←0 0 ⍴d←'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOP
                                      QRSTUVWXYZ⎕0123456789'
nq←t\b←(t←=\''''≠a)/a
t←('←'=1⌽b)>b∊']⎕⍞ ⍺⍵'
d←(¯1⌽l∊t/l←+\~b∊d)/b
d[t/⍳⍴t←'←'=d]←' '
d←,';',(∨⌿<\d∧.=⍉d)⌿d←(+/∧\d=' ')⌽d←(-+\t)⊖
                                      ((+/t),⍴d)↑(1,⍴d)⍴d
b[t/⍳⍴t←':'=t\(t←=\''''≠b)/b←a]←' '
→(∧/ 3 5 ≠m←1+l←1++/t)/0 
b←(-+\t)⊖(l,⍴b)↑(1,⍴b)⍴b
b←b,[⎕io](1↓⍴b)↑a
→(3=m)/l1
b←b[⎕io+0 2 1 3 4;]
l1:z←(1⌽template[(⎕io+2⌊2⊥'⍺⍵'∊nq),1+m+⍳m-1;],b),
                                      (m,⍴d)↑(1,⍴d)⍴d

   template
 ⍵←   
⍵⍵←   
⍵⍵←⍺  
       
 ⍵←   
  ⍝   
 →2+0≠
 →0⊣⍵←
 →0⊣⍵←
  ⍝   

∆;⍺;⍵                                                        
(∨/⍺≠(⍴⍺)↑⎕fx translate ⍵)/'not done',0⍴⎕ex ⍺←(+/∧\⍵≠':')↑⍵←⍞
</pre>

<p>For example:</p>

<pre>
   ∆                       ∆
f: ⍺+÷⍵                 fib: z,+/¯2↑z←fib ⍵-1 : ⍵=1 : 1

   3 f 4                   fib 10
3.25                    1 1 2 3 5 8 13 21 34 55
</pre>

<p>The function<tt> ∆ </tt>can be modified 
so that if a function name alone is entered 
it will first display the definition of the
function (in direct definition form), 
then allow revision using the editing facilities 
of the particular computer in use,
and then fix the definition of the revised function.</p>
</td></tr></table>
<br>



<a name="tab4"></a>
<p align=center><b>Table 4: Standard Names and Synonyms</b></p>

<table border=1 cellspacing=0 cellpadding=3 width=100%><tr><td valign=top width=50%><table>
<tr>
 <td valign=top><tt>≥</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Aft</font></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Is greater than or equal to, Not less than</font></td></tr>
<tr>
 <td valign=top><tt>&gt;</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>After</font></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Is greater than</font></td></tr>
<tr>
 <td valign=top><tt>{</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>All</font></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Catalogue, Generalized cartesian product</font></td></tr>
<tr>
 <td valign=top><tt>∧</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>And</font></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Least common multiple,<br>And (on booleans)</font></td></tr>
<tr>
 <td valign=top><tt>⊤</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Antibase</font></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Representation, Encode</font></td></tr>
<tr><td>&nbsp;</td></tr>
<tr>
 <td valign=top><tt>⊥</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Base</td><td>&nbsp;</td>
 <td valign=top><font size=-1>Base value, Decode</font></td></tr>
<tr>
 <td valign=top><tt>&lt;</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Before</td><td>&nbsp;</td>
 <td valign=top><font size=-1>Is less than</font></td></tr>
<tr>
 <td valign=top><tt>&lt;</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Box</td><td>&nbsp;</td>
 <td valign=top><font size=-1>Enclose</font></td></tr>
<tr>
 <td valign=top><tt>⊃</tt></td><td>&nbsp;</td>
 <td valign=top nowrap><font size=-1>Box open</td><td>&nbsp;</td>
 <td valign=top><font size=-1>Conditional enclose</font></td></tr>
<tr>
 <td valign=top><tt>,</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>By</td><td>&nbsp;</td>
 <td valign=top><font size=-1>Catenate along last axis</font></td></tr>
<tr><td>&nbsp;</td></tr>
<tr>
 <td valign=top><tt>⍉</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Cant</td><td>&nbsp;</td>
 <td valign=top><font size=-1>&nbsp;</font></td></tr>
<tr>
 <td valign=top><tt>⌈</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Ceiling</td><td>&nbsp;</td>
 <td valign=top><font size=-1>&nbsp;</font></td></tr>
<tr>
 <td valign=top><tt>○</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Circle</td><td>&nbsp;</td>
 <td valign=top><font size=-1>See definitions</font></td></tr>
<tr>
 <td valign=top><tt>⍳</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Count</td><td>&nbsp;</td>
 <td valign=top><font size=-1>Integers to</font></td></tr>
<tr>
 <td valign=top><tt>≤</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Cycle</td><td>&nbsp;</td>
 <td valign=top><font size=-1>&nbsp;</font></td></tr>
<tr><td>&nbsp;</td></tr>
<tr>
 <td valign=top><tt>?</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Deal</td><td>&nbsp;</td>
 <td valign=top><font size=-1>Pseudo-random draws without replacement</font></td></tr>
<tr>
 <td valign=top><tt>⍒</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Downgrade</td><td>&nbsp;</td>
 <td valign=top><font size=-1>&nbsp;</font></td></tr>
<tr>
 <td valign=top><tt>↓</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Drop</td><td>&nbsp;</td>
 <td valign=top><font size=-1>&nbsp;</font></td></tr>
<tr>
 <td valign=top><tt>=</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Equal</td><td>&nbsp;</td>
 <td valign=top><font size=-1>Is equal to, Equals</font></td></tr>
<tr>
 <td valign=top><tt>⍎</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Execute</td><td>&nbsp;</td>
 <td valign=top><font size=-1>&nbsp;</font></td></tr>
<tr><td>&nbsp;</td></tr>
<tr>
 <td valign=top><tt>!</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Factorial</td><td>&nbsp;</td>
 <td valign=top><font size=-1>&nbsp;</font></td></tr>
<tr>
 <td valign=top><tt>⌊</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Floor</td><td>&nbsp;</td>
 <td valign=top><font size=-1>Integer part of</font></td></tr>
<tr>
 <td valign=top><tt>≤</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Fore</td><td>&nbsp;</td>
 <td valign=top><font size=-1>Is less than or equal to,<br>Not greater than</font></td></tr>
<tr>
 <td valign=top><tt>⍕</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Format</td><td>&nbsp;</td>
 <td valign=top><font size=-1>&nbsp;</font></td></tr>
<tr>
 <td valign=top><tt>{</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>From</td><td>&nbsp;</td>
 <td valign=top><font size=-1>&nbsp;</font></td></tr>
<tr><td>&nbsp;</td></tr>
<tr>
 <td valign=top><tt>⍋</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Grade</td><td>&nbsp;</td>
 <td valign=top><font size=-1>&nbsp;</font></td></tr>
<tr>
 <td valign=top><tt>∊</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>In</td><td>&nbsp;</td>
 <td valign=top><font size=-1>Is a member of, Belongs to</font></td></tr>
<tr>
 <td valign=top><tt>⍷</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>In</td><td>&nbsp;</td>
 <td valign=top><font size=-1>String search</font></td></tr>
<tr>
 <td valign=top><tt>⍳</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Index</td><td>&nbsp;</td>
 <td valign=top><font size=-1>Index of</font></td></tr>
<tr>
 <td valign=top><tt>⍸</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Index</td><td>&nbsp;</td>
 <td valign=top><font size=-1>String search index</font></td></tr>
<tr><td>&nbsp;</td></tr>
<tr>
 <td valign=top><tt>⌹</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Inverse</td><td>&nbsp;</td>
 <td valign=top><font size=-1>Matrix inverse;<br>Matrix division</font></td></tr>
<tr>
 <td valign=top><tt>⊣</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Left</td><td>&nbsp;</td>
 <td valign=top><font size=-1>Lev</font></td></tr>
<tr>
 <td valign=top><tt>~</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Less</td><td>&nbsp;</td>
 <td valign=top><font size=-1>Set difference</font></td></tr>
<tr>
 <td valign=top><tt>⊃</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Index</td><td>&nbsp;</td>
 <td valign=top><font size=-1>Index of</font></td></tr>
<tr>
 <td valign=top><tt>⍟</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Log</td><td>&nbsp;</td>
 <td valign=top><font size=-1>Natural logarithm;<br>Base-<i>e</i> log</font></td></tr>

</table></td><td valign=top width=50%><table>

<tr>
 <td valign=top><tt>≡</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Match</td><td>&nbsp;</td>
 <td valign=top><font size=-1>&nbsp;</font></td></tr>
<tr>
 <td valign=top><tt>+</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Mate</td><td>&nbsp;</td>
 <td valign=top><font size=-1>Conjugate</font></td></tr>
<tr>
 <td valign=top><tt>⌈</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Maximum</td><td>&nbsp;</td>
 <td valign=top><font size=-1>&nbsp;</font></td></tr>
<tr>
 <td valign=top><tt>⌊</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Minimum</td><td>&nbsp;</td>
 <td valign=top><font size=-1>&nbsp;</font></td></tr>
<tr>
 <td valign=top><tt>-</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Minus</td><td>&nbsp;</td>
 <td valign=top><font size=-1>Negative, Subtract, Less</font></td></tr>
<tr><td>&nbsp;</td></tr>
<tr>
 <td valign=top><tt>≥</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Mix</td><td>&nbsp;</td>
 <td valign=top><font size=-1>Permutation from cycles</font></td></tr>
<tr>
 <td valign=top><tt>[</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Mix</td><td>&nbsp;</td>
 <td valign=top><font size=-1>Permute</font></td></tr>
<tr>
 <td valign=top><tt>∪</tt></td><td>&nbsp;</td>
 <td valign=top nowrap><font size=-1>Mix index</td><td>&nbsp;</td>
 <td valign=top><font size=-1>Permutation index</font></td></tr>
<tr>
 <td valign=top><tt>⍲</tt></td><td>&nbsp;</td>
 <td valign=top nowrap><font size=-1>Nand</td><td>&nbsp;</td>
 <td valign=top><font size=-1>Not and</font></td></tr>
<tr>
 <td valign=top><tt>⍱</tt></td><td>&nbsp;</td>
 <td valign=top nowrap><font size=-1>Nor</td><td>&nbsp;</td>
 <td valign=top><font size=-1>Not or</font></td></tr>
<tr><td>&nbsp;</td></tr>
<tr>
 <td valign=top><tt>~</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Not</td><td>&nbsp;</td>
 <td valign=top><font size=-1>&nbsp;</font></td></tr>
<tr>
 <td valign=top><tt>↑</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Nub</td><td>&nbsp;</td>
 <td valign=top><font size=-1>Distinct elements of</font></td></tr>
<tr>
 <td valign=top><tt>=</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Nub in</td><td>&nbsp;</td>
 <td valign=top><font size=-1>&nbsp;</font></td></tr>
<tr>
 <td valign=top><tt>≠</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Nubsieve</td><td>&nbsp;</td>
 <td valign=top><font size=-1>&nbsp;</font></td></tr>
<tr>
 <td valign=top><tt>&gt;</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Open</td><td>&nbsp;</td>
 <td valign=top><font size=-1>Disclose</font></td></tr>
<tr><td>&nbsp;</td></tr>
<tr>
 <td valign=top><tt>∨</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Or</td><td>&nbsp;</td>
 <td valign=top><font size=-1>Greatest common divisor,<br>Or (on booleans)</font></td></tr>
<tr>
 <td valign=top><tt>!</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Out of</td><td>&nbsp;</td>
 <td valign=top><font size=-1>Binomial coefficients;<br>No. of combinations</font></td></tr>
<tr>
 <td valign=top><tt>⍪</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Over</td><td>&nbsp;</td>
 <td valign=top><font size=-1>Catenate along leading axis</font></td></tr>
<tr>
 <td valign=top><tt>÷</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Per</td><td>&nbsp;</td>
 <td valign=top><font size=-1>Reciprocal; Divided by, Over</font></td></tr>
<tr>
 <td valign=top><tt>○</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Pi</td><td>&nbsp;</td>
 <td valign=top><font size=-1>Pi times</font></td></tr>
<tr><td>&nbsp;</td></tr>
<tr>
 <td valign=top><tt>+</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Plus</td><td>&nbsp;</td>
 <td valign=top><font size=-1>Add, Added to</font></td></tr>
<tr>
 <td valign=top><tt>*</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Power</td><td>&nbsp;</td>
 <td valign=top><font size=-1>Exponential, <i>e</i><sup>⍵</sup>, Antilog;<br>To the power, Antilog</font></td></tr>
<tr>
 <td valign=top><tt>,</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Ravel</td><td>&nbsp;</td>
 <td valign=top><font size=-1>&nbsp;</font></td></tr>
<tr>
 <td valign=top><tt>↓</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Raze</td><td>&nbsp;</td>
 <td valign=top><font size=-1>&nbsp;</font></td></tr>
<tr>
 <td valign=top><tt>∊</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Raze in</td><td>&nbsp;</td>
 <td valign=top><font size=-1>&nbsp;</font></td></tr>
<tr><td>&nbsp;</td></tr>
<tr>
 <td valign=top><tt>⍴</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Reshape</td><td>&nbsp;</td>
 <td valign=top><font size=-1>&nbsp;</font></td></tr>
<tr>
 <td valign=top><tt>|</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Residue</td><td>&nbsp;</td>
 <td valign=top><font size=-1>Remainder, Modulo</font></td></tr>
<tr>
 <td valign=top><tt>⌽</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Reverse</td><td>&nbsp;</td>
 <td valign=top><font size=-1>&nbsp;</font></td></tr>
<tr>
 <td valign=top><tt>⊢</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Right</td><td>&nbsp;</td>
 <td valign=top><font size=-1>Identity; Dex</font></td></tr>
<tr>
 <td valign=top><tt>?</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Roll</td><td>&nbsp;</td>
 <td valign=top><font size=-1>Pseudo-random choice</font></td></tr>
<tr><td>&nbsp;</td></tr>
<tr>
 <td valign=top><tt>⌽</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Rotate</td><td>&nbsp;</td>
 <td valign=top><font size=-1>Rotate along last axis</font></td></tr>
<tr>
 <td valign=top><tt>⊖</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Rowel</td><td>&nbsp;</td>
 <td valign=top><font size=-1>Rotate along leading axis</font></td></tr>
<tr>
 <td valign=top><tt>⍴</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Shape</td><td>&nbsp;</td>
 <td valign=top><font size=-1>&nbsp;</font></td></tr>
<tr>
 <td valign=top><tt>|</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Size</td><td>&nbsp;</td>
 <td valign=top><font size=-1>Absolute value, Magnitude</font></td></tr>
<tr>
 <td valign=top><tt>⍪</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Table</td><td>&nbsp;</td>
 <td valign=top><font size=-1>&nbsp;</font></td></tr>
<tr><td>&nbsp;</td></tr>
<tr>
 <td valign=top><tt>↑</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Take</td><td>&nbsp;</td>
 <td valign=top><font size=-1>&nbsp;</font></td></tr>
<tr>
 <td valign=top><tt>×</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Times</td><td>&nbsp;</td>
 <td valign=top><font size=-1>Multiplied by</font></td></tr>
<tr>
 <td valign=top><tt>×</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Trend</td><td>&nbsp;</td>
 <td valign=top><font size=-1>Sign, Signum, Direction,<br>Direction cosines</font></td></tr>
<tr>
 <td valign=top><tt>≠</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Unequal</td><td>&nbsp;</td>
 <td valign=top><font size=-1>Is unequal to</font></td></tr>
<tr>
 <td valign=top><tt>⊖</tt></td><td>&nbsp;</td>
 <td valign=top><font size=-1>Upset</td><td>&nbsp;</td>
 <td valign=top><font size=-1>Reverse on leading axis</font></td></tr></table></td></tr></table>
<br>



<br><hr>
<font size=-1>
<p>First appeared in APL Quote Quad, Volume 18, Number 1, 1987-09.</p>

<p><script src="apldisplay.js" type="text/javascript"></script></p>
</font>

<table>
<tr><td><font size=-1>created: &nbsp;</font></td><td><font size=-1>2009-10-09 23:00</font></td></tr>
<tr><td><font size=-1>updated:</font></td><td><font size=-1>2016-11-16 07:10</font></td></tr>
</table>
</td></tr></table>

<br><br><br>

</body>
</html>
