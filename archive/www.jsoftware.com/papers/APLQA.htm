<html>
<head><meta http-equiv="content-type" content="text/html;charset=utf-8">
<title>APL Quotations and Anecdotes</title>
<link href="adoc.css" rel=stylesheet>
</head>

<body>

<br>
<p align=center><font size=+3>APL Quotations and Anecdotes</font>
<font size=-2><br><br></font>
<b><tt>http://www.jsoftware.com/papers/APLQA.htm</tt></b>
</p>

<br>



<table align=center width=550>



<tr><td colspan=3>
<p>It has been said that APL has quite a character set.  
The following are a collection
of stories by or about these interesting characters, 
arranged in roughly chronological order.
Additional stories can be found at:</p>

<table>
<tr><td>&nbsp; &nbsp;</td><td valign=top>&#149;&nbsp;</td><td>Ken Iverson Quotations and Anecdotes<br>
  &nbsp; &nbsp; <a target=APLQAx href="http://www.jsoftware.com/papers/KEIQA.htm">http://www.jsoftware.com/papers/KEIQA.htm</a>
  </td></tr>
<tr><td>&nbsp; &nbsp;</td><td valign=top>&#149;&nbsp;</td><td>Eugene McDonnell Quotations and Anecdotes<br>
  &nbsp; &nbsp; <a target=APLQAx href="http://www.jsoftware.com/papers/eem/anecdotes.htm">http://www.jsoftware.com/papers/eem/anecdotes.htm</a>
  </td></tr>
</table>

<p>For narrative reasons, there is a slight overlap between the present collection and
the other two collections.</p>

<br><hr></br>
</td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Aiken"></a>
Ken regularly stood up to Howard Aiken, 
and Aiken stood six-foot-three and 
had Spockean ears and pointed tufts of hair and when he reared up 
and looked down at you, you thought you were looking at the Devil. 
And when he growled at you, you thought that too. 
Never mind: Aiken had the characteristic that if you stood up to him 
he respected that, and if you didn&rsquo;t he just trod you underfoot. 
Ken stood up to him.</p>

<p>Ken&rsquo;s manner was always argumentative, 
but argumentative with an effective expression: 
&ldquo;Perhaps one ought to think about it this way&#133;&rdquo; 
This was in contrast with Aiken&rsquo;s 
&ldquo;Goddamit it&rsquo;s gotta be so-and-so, all right?&rdquo; 
Ken was firm in his views but he was reasonable. 
He satisfied the old Latin motto,
<i>Numquam incertus, semper apertus</i>&mdash;never uncertain, always open.</p>

<p align=right>&#151;
Fred Brooks, 
<a target=APLQAx href="http://www.vector.org.uk/archive/v223/fb223.htm"><i>Vector</i></a>, 2006-08
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="jail"></a>
Unsurprisingly, Ken stood up for what he believed in.  
He once spent a few hours in jail after being arrested during a protest 
against the Vietnam War.  In the same cell was Garry Wills, 
the historian and author.</p>

<p align=right>&#151;
Roger Hui, 
<a target=APLQAx href="http://keiapl.org/rhui/remember.htm"><i>Remembering Ken Iverson</i></a>, 2004-11
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="no_jail"></a>
Eugene McDonnell was very interested to know more about the previous story.
What happened was that a bunch of people from Watson Research went down to protest
in separate groups.  
Ken and Eugene were in different groups, and Eugene had not heard about 
the jail part until reading about it in 2004.
Eugene said he never got to go to jail because his group was not so rowdy.
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="IBM_Research"></a>
I left Harvard with offers from IBM Research and Bell Laboratories. 
Fred Brooks (who had joined IBM somewhat earlier) advised me to choose IBM 
because computers were their primary concern. 
After I joined the IBM Research Division, 
Fred advised that I stick to whatever I really wanted to do, 
because management was so starved for ideas 
that anything not clearly crazy would find support. 
In particular, I was allowed to finish and publish a book on my notation, 
(<a target=APLQAx href="http://www.jsoftware.com/papers/APL.htm"><i>A Programming Language</i></a>, 
Wiley, 1962), 
as well as <i>Automatic Data Processing</i>, with co-author Fred Brooks (Wiley, 1963).</p>

<p align=right>&#151;
Kenneth E. Iverson, 
<a target=APLQAx href="http://www.jsoftware.com/papers/autobio.htm"><i>Kenneth E. Iverson</i></a>, 
2008
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Clinton">
The founder, Ken Iverson, inspired great loyalty the old-fashioned 
way: he earned it.</p>

<p align=right>&#151;
Bill Clinton, <i>My Life</i>, 2004, p. 321
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Jean_Iverson"></a>
&ldquo;I am indebted to my wife for assistance
in preparing the final draft&rdquo;, so says the last sentence of the Preface to 
<a target=APLQAx href="http://www.jsoftware.com/papers/APL.htm"><i>A Programming Language</i></a>.
The acknowledgment only hints at the heroic effort involved:
Jean typed the text and hand-drew the special characters and symbols using
a Keuffel&amp;Esser Leroy Lettering Set.
As well, she participated in the proofreading of
several &ldquo;final&rdquo; drafts,
reading out every comma, period, slash, dash, etc.
while Ken followed in the galley copy.</p>

<p>Jean also compiled the index of the book
with the aid of punched cards.
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="1.30"></a>
In 2009, while putting 
<a target=APLQAx href="http://www.jsoftware.com/papers/APL.htm"><i>A Programming Language</i></a> 
on-line I encountered a difficulty with exercise 1.30 on page 67.
<p><b>1.30&nbsp;</b> Show that for a homogeneous tree <b>H</b>,
<i>&mu;</i>(<b>H</b>) = <b><i>y</i></b> <tt>⊥</tt> <b><i>y</i></b>,
where <img align=top src="https://www.jsoftware.com/papers/APLimg/yrarr.bmp"> = <b>&nu;</b>(<b>H</b>).
</p>

<p>What&rsquo;s the problem?  
In the text, the letter <b><i>y</i></b> superscribed with the arrow
had a tiny blob of ink between the arrowhead and the <b><i>y</i></b> itself.
My copy of the book was printed in 1989 by a xerographic process,
leading me to think that the blob was a production flaw. 
But every jot, dot, tilde, and twiddle is significant in the book,
so I could not rule out entirely that the blob is significant.</p>

<p>I soon enlisted the assistance of Joey Tuttle who has
an original imprint.
Under <a target=APLQAx href="http://www.jsoftware.com/papers/APLimg/APL_ex1.30.jpg">high magnification</a>, it can be seen that the blob was indeed a flaw,
present in all copies of the book.  
(Check your copy.)
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="FPL"></a>
Ken presented his paper
<a target=APLQAx href="http://www.jsoftware.com/papers/FPL.htm"><i>Formalism in Programming Languages</i></a>
in August 1963 at a Working Conference on Mechanical Language Structures, Princeton, N.J.
The list of conferees is full of famous and soon-to-be famous names,
and a few future Turing Award winners
(Backus, Curry, Dijkstra, Floyd, Iverson, Newell, Perlis, Wilkes).
The paper also records the discussion that occurred
after the presentation, ending with an 
<a target=APLQAx href="http://www.jsoftware.com/papers/KEIQA.htm#Dijkstra">exchange between Ken and Dijkstra</a>, 
in which Ken&rsquo;s reply to 
Dijkstra&rsquo;s question was a one-liner.</p>

<p>The question immediately preceding Dijkstra&rsquo;s question was posed
by S. Gorn of the University of Pennsylvania:  
&ldquo;Does your generalized operator notation for matrices lead 
to a simpler proof of the generalized Laplace expansion of determinants?&rdquo;
In reply, Ken launched into a page&rsquo;s worth of carefully reasoned argument
full of intricate notation.  With anyone else, 
one would say that the answer was most likely composed afterwards
and then inserted into the written record.
Since this was Ken, it may just be possible that
his reply was <i>ex tempore</i>.
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="LBM"></a>
Talk about starting at the top. Working for and with Ken Iverson 
was my first job out of college. 
Roger [Moore] and I were introduced to Iverson Notation 
at the same SRI chalk talk. 
I didn&rsquo;t do anything with it at the time, 
but a while later an IBM maverick technical guy 
and <a href="APLQA.htm#APL_Blossom_Time">rhyming philosopher</a>, Michael Montalbano, 
started hanging around Stanford&rsquo;s brand-new computer science department. 
He was writing
<a target=APLQAx href="http://www.jsoftware.com/papers/KEIQA.htm#Montalbano">linear programming algorithms</a>
in the Notation, then hand-translating them into FORTRAN 
for his business-school students. 
He gave some informal lectures on the Notation; 
Phil Abrams and I attended enthusiastically.</p>

<p>IBM announced the IBM System/360 on April 7, 1964. 
Shortly after, Mike handed me a new <i>IBM Systems Journal</i>
that had articles by the System/360 architects — and holy cow, 
one by Ken Iverson, Adin Falkoff, and Ed Sussenguth 
that precisely defined the whole 360 line in 18 pages of Notation, 
plus commentary: &ldquo;A Formal Description of System/360.&rdquo;</p>

<p>Phil and I devoured it. 
Once past the steepest part of the learning curve, 
we gave a series of seminars to other students. 
I found a few typos, which I mailed to Ken.</p>

<p>Then Ken came to visit, touring several institutions 
to talk about the Formal Description and his notation. 
I listened, argued once or twice, and handed over my latest errata. 
Ken thanked me, and said,
&ldquo;Larry, these are pretty minor. 
Why don&rsquo;t you find something seriously wrong?&rdquo;</p>

<p>Nothing could have fired me up like that challenge. 
I scoured the article. Late at night I sat in bed, 
with the fold-out pages resting 
over my recent bride&rsquo;s 
nose (a nuisance) and eyes (appreciated). 
I got lucky. 
The Memory Access program had a race condition between requests 
from the Processor and Channel programs.</p>

<p>Next day at lunch I showed Ken what I&rsquo;d found. 
Mid-afternoon Mike came by my office. 
&ldquo;Larry, Ken&rsquo;s taking the Lord&rsquo;s name in vain. 
He came back from lunch saying &lsquo;That sonofabitch Breed! 
Why didn&rsquo;t we talk to him 
before we published this god-damned thing?&rsquo; &rdquo; 
And I knew that I had to go to work for him.</p>

<p align=right>&#151;
Larry Breed, 
comment in <a target=APLQAx href="http://lathwellproductions.ca/wordpress//2011/11/27/its-apls-birthday-or-is-it/#comment-3004"><i>It&rsquo;s APL&rsquo;s Birthday, or is it?</i></a>, 
2012-02-21
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="cake"></a>
Then I got <i>A Formal Description of System</i>/360
by Falkoff, Iverson, and Sussenguth &mdash; 
an amazing piece of work which later became known as the grey manual. 
I thoroughly enjoyed time spent on this document 
and came to appreciate that symbolic notation 
really can be used for describing real as well as formal systems. 
I didn&rsquo;t find any fault with this document 
but I hope Larry Breed correctly describes how he found an error 
and told Ken about it at lunch at Stanford,
being careful to bring it up when Ken had cake in his mouth.</p>

<p align=right>&#151;
Jim Brown, 
<a target=APLQAx href="http://archive.vector.org.uk/art10001270"><i>Vector</i></a>, 
2006-08
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="360Ack"></a>
The APL language was first defined by 
K.E. Iverson in <i>A Programming Language</i> (Wiley, 1962) 
and has since been developed in collaboration with A.D. Falkoff. 
The <i>APL</i>\360 Terminal System was designed 
with the additional collaboration of L.M. Breed, 
who with R.D. Moore<sup><tt>*</tt></sup>, also designed the S/360 implementation. 
The system was programmed for S/360 
by Breed, Moore, and R.H. Lathwell, 
with continuing assistance from L.J. Woodrum<sup><tt>⍟</tt></sup>, 
and contributions by C.H. Brenner, H.A. Driscoll<sup><tt>**</tt></sup>, 
and S.E. Krueger<sup><tt>**</tt></sup>. 
The present implementation also benefitted 
from experience with an earlier version, 
designed and programmed for the IBM 7090 
by Breed and P.S. Abrams<sup><tt>⍟⍟</tt></sup>.</p>

<p>The development of the system also profited 
from ideas contributed by many users and colleagues, 
notably E.E. McDonnell, who suggested the notation 
for the signum and the circular functions.</p>

<p>In the preparation of the present manual, 
the authors are indebted to L.M. Breed 
for many discussions and suggestions; 
to R.H. Lathwell, E.E. McDonnell, and J.G. Arnold<sup><tt>*⍟</tt></sup>
for critical reading of successive drafts; 
and to Mrs. G.K. Sedlmayer and Miss Valerie Gilbert 
for superior clerical assistance.</p>

<p>A special acknowledgement is due to 
John L. Lawrence, who provided important 
support and encouragement during the early development 
of APL implementation, 
and who pioneered the application of APL 
in computer-related instruction.</p>

<hr align=left width=60%>
<table>
<tr><td><tt>*</tt></td><td>&nbsp;</td><td>I.P. Sharp Associates, Toronto, Canada.</td></tr>
<tr><td><tt>⍟</tt></td><td>&nbsp;</td><td>General Systems Architecture, IBM Corporation, Poughkeepsie, N.Y.</td></tr>
<tr><td><tt>**</tt></td><td>&nbsp;</td><td>Science Research Associates, Chicago, Illinois.</td></tr>
<tr><td><tt>⍟⍟</tt></td><td>&nbsp;</td><td>Computer Science Department, Stanford University, Stanford, California.</td></tr>
<tr><td><tt>*⍟</tt></td><td>&nbsp;</td><td>Industry Development, IBM Corporation, White Plains, NY.</td></tr>
</table>

<p align=right>&#151;
Acknowledgements, <i>APL\</i>360 <i>User&rsquo;s Manual</i>, 1968-08
<br>&nbsp;</p> 



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="APL"></a>
I remember quite well the day I first heard the name APL.
It was the summer of 1966 and I was working in the IBM Mohansic Laboratory,
a small building in Yorktown Heights, NY. 
The project I was working on was IBM&rsquo;s first effort at
developing a commercial time-sharing system, one which was called TSS.
The system was showing signs of becoming incomprehensible as more and more bells
and whistles were added to it.
As an experiment in documentation, I had hired three summer students
and given them the job of transforming &ldquo;development workbook&rdquo;
type of documentation we had for certain parts of the system into
something more formal, namely Iverson notation, which the three students
had learned while taking a course given by Ken Iverson at 
Fox Lane High School in Mount Kisco, NY.
One of the students was Eric Iverson, Ken&rsquo;s son.</p>

<p>As I walked by the office the three students shared, I could hear
sounds of an argument going on. I poked my head in the door,
and Eric asked me, &ldquo;Isn&rsquo;t it true that everyone knows
the notation we&rsquo;re using is called APL?&rdquo; 
I was sorry to have to disappoint him by confessing that I had never
heard it called that.  Where had he got the idea it was well known?
And who had decided to call it that?
In fact, why did it have to be called anything?
Quite a while later I heard how it was named.
When the implementation effort started in June of 1966,
the documentation effort started, too. I suppose when they
had to write about &ldquo;it&rdquo;, Falkoff and Iverson
realized that they would have to give &ldquo;it&rdquo; a name.
There were probably many suggestions made at the time,
but I have heard of only two.  A group in SRA in Chicago
which was developing instructional materials using 
the notation was in favor of the name &ldquo;Mathlab&rdquo;.
This did not catch on.  Another suggestion was to call it
&ldquo;Iverson&rsquo;s Better Math&rdquo; and then let people
coin the appropriate acronym.  This was deemed facetious.</p>

<p>Then one day Adin Falkoff walked into Ken&rsquo;s office
and wrote &ldquo;A Programming Language&rdquo; on the board,
and underneath it the acronym &ldquo;APL&rdquo;.
Thus it was born.
It was just a week or so after this that Eric Iverson
asked me his question, at a time when the name hadn&rsquo;t
yet found its way the thirteen miles up the Taconic Parkway
from IBM Research to IBM Mohansic.</p>

<p align=right>&#151;
Eugene McDonnell, 
<a target=APLQAx href="http://www.jsoftware.com/jwiki/Doc/A_Source_Book_in_APL#origins"><i>A Source Book in APL</i></a>, 1981
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="ebi1"></a>
In 1966 Eugene worked at IBM and hired Eric Iverson as a summer student.  
Twelve years later Eugene left IBM to join the language and system  
group at I.P. Sharp Associates, managed by Eric Iverson.</p>

<p>Two years thereafter Ken Iverson too left IBM to join I.P. Sharp,
also to be managed by Eric Iverson.  After that, Eugene didn&rsquo;t
feel so bad about his own reversal in the pecking order.
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="scheduler"></a>
In a time-sharing system, 
the key to good performance lies in the way 
the external storage devices are used.  
Here the contrast between the TSS and APL systems 
was most remarkable.  
On TSS, one could look through the glass windows 
of the disk devices and watch the motion of the arms. 
These jerked rapidly back and forth, 
swooping over wide areas of the disk faces, 
with the appearance of someone in the grip 
of St. Vitus&rsquo; dance.  
On the APL disks, one arm would be moving quite regularly, 
like the escapement mechanism of a clock, 
as it went from one track to the adjacent track, 
then to the next track, and so on, 
over fifty or so tracks in several seconds, 
and then retracted to the beginning and 
started the cycle over again.  
Sometimes the total excursion was more, sometimes less;  
it was so regular 
that an experienced person like Roger Moore, 
who was principally responsible for the APL supervisor, 
could tell how many users were signed on by watching it.</p>

<p align=right>&#151;
Eugene McDonnell, 
<a target=APLQAx href="http://www.jsoftware.com/papers/eem/socio.htm"><i>The Socio-Technical Beginnings of APL</i></a>, 1979
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="prompt"></a>
One of the most characteristic conveniences 
of the system is the cue chosen for the user 
to make a new entry. 
On other systems being developed at this time, 
this user cue varied from one kind of 
character sequence to another:  
on one system a question mark would be printed, 
on another, a rather long-winded time stamp, 
on another, the word &ldquo;READY&rdquo;.  
In keeping with its general policy 
of informing the user as briefly as possible, 
the signal APL uses to indicate that output 
display has finished, 
or that computer processing is over, 
is succinct indeed.  
No printing characters appear at all:
six spaces are sent, 
moving the cursor or printing element to the right, 
and the keyboard is unlocked for a new input.  
To me, that six-space cue is one of the key items 
in APL&rsquo;s elegance. 
Larry Breed recalls that 
it was Ken Iverson who suggested it.</p>

<p align=right>&#151;
Eugene McDonnell, 
<a target=APLQAx href="http://www.jsoftware.com/papers/eem/socio.htm"><i>The Socio-Technical Beginnings of APL</i></a>, 1979
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="3spaces"></a>
Early in the J implementation Ken suggested that the prompt should be 3 spaces instead of 6.  There are suggestions and there are suggestions, and this suggestion was made in a tone which brooked no argument.  So I made it so.</p>

<p>Later, k one-upped us by doing a one-space prompt.
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="soccer_ball"></a>
In 1966 Eugene went into a sporting goods store in Peekskill, NY
to buy a soccer ball.
The salesman showed him ones that cost $10,
others that cost $14, and finally the
professional version for $28.
(Even $10 was a lot of money in those days.)
Presented with this array of choices, 
Eugene can not decide, 
explaining to the salesman that it was for his daughter Julia.
The saleman said, &ldquo;Oh, for <i>girls</i> 
we have some over here for $7.&rdquo;
Eugene immediately responded, &ldquo;I&rsquo;ve decided!  I&rsquo;ll take the $28 one.&rdquo;
</p>

<p align=right>&#151;
Paul Berry
<br>&nbsp;</p></td></tr>


<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="KWS"></a>
One of the best known epiphanies in Western culture is possibly 
that of Saul on the way to Damascus.
My own epiphany in programming languages 
was much less dramatic than Saul&rsquo;s. 
I was not going anywhere, there was no blinding light or voice from above, 
nor did I fall down. 
It was in 1965 or 1966, and I was sitting quietly in my office 
in the Department of Computing Science 
at the University of Alberta thinking 
about the commonly occurring statistical problem of classifying 
a number of observations given the left-hand end of the first frequency class, 
the class width and the number of classes. 
This is a problem I had already handled in other languages 
but now I was trying to program it 
in a new language called Iverson&rsquo;s notation or APL.</p>

<p align=right>&#151;
Keith Smillie,
<a target=APLQAx href="http://archive.vector.org.uk/art10008120"><i>Kenneth Iverson, APL and J:
Some<br>Personal Recollections</i></a>, 2004-11
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="JAB"></a>
Ken&rsquo;s name next came to my attention when a friend 
and I took our wives to a dinner meeting of the local ACM chapter. 
I always felt there was no way to impress a woman like an ACM meeting. 
In fact, we did go for a social evening and 
didn&rsquo;t even make note of the speaker 
who was someone I never heard of anyway. 
It was Adin Falkoff with a portable 
(by some extended meaning of that word) 
2741 terminal which he dialed into Yorktown and showed us APL. &#133;</p>

<p>I was absolutely blown away by the whole presentation. 
Adin typed in &ldquo;2 space 3 backspace backspace plus&rdquo; 
and pressed return and it typed &ldquo;5&rdquo;. 
He called it visual fidelity. 
I recall our wives were not so impressed by this 
as they were apparently able to work out this result 
in their heads without use of a terminal and phone line.</p>

<p align=right>&#151;
Jim Brown, 
<a target=APLQAx href="http://www.vector.org.uk/archive/v223/brown.htm"><i>Vector</i></a>, 2006-08
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="IPS"></a>
Born in Dublin, 1932, Ian Sharp graduated in engineering from Cambridge University, 
spent four years in OR for United Steel Companies. 
In 1960 he came to Canada and became chief programmer responsible 
for software development at Ferranti-Packard, Toronto. 
In 1964 he formed I.P. Sharp Associates.</p>

<p align=right>&#151;
<i>Canadian Datasytems</i>, 1970-02
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="IPSA"></a>
I.P. Sharp Associates was founded by the 
<a target=APLQAx href="http://en.wikipedia.org/wiki/Ferranti-Packard_6000">FP6000</a> 
programming team and one other in 1964.
Directors: Ian Sharp, Roger Moore, Ted McDorman, and Don Smith;
three others: David Oldacre, Brian Daly, and James McSherry.
The preceding seven joined in December 1964 at various dates.
In spring 1965, David Butler, an engineer from the non-FP6000 part of Electronics Division, joined.
Butler was more interested in military business than any other employee.</p>

<p>Ian, Brian, and Jim McS painted the new office at DeMarco Building at Keele &amp; Lawrence.</p>

<p align=right>&#151;
Roger Moore
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="punch_cards"></a>Roger Moore
was returning from the US to Canada.
The customs officer at the border questioned him about 
some boxes of punch cards in his possession.
Roger avoided further complications by explaining
to the officer that the punch cards were <i>used</i> rather than new.</p>

<p align=right>&#151;
Ian Sharp
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="car_doors"></a>
Graham Driscoll had a reputation for being direct
and taking unusual approaches to solving problems.
Once an entranceway was temporarily blocked by a car.
Driscoll overcame the obstacle by opening one car door,
got into the car, and
exited the car and the entranceway through the other door.</p>

<p align=right>&#151;
Ken Iverson
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="from_everywhere"></a>
The early APL group at IBM had a deep and abiding interest in words,
in their correct use and in their etymology.
Once, someone uttered in frustration, &ldquo;Horseshit!&rdquo;
Graham Driscoll immediately responded,
&ldquo;&lsquo;Horse&rsquo; is Middle English, and comes from the Old English <i>hors</i>;
&lsquo;shit&rsquo; too is Middle English, and comes from everywhere.&rdquo;</p>

<p align=right>&#151;
Ken Iverson
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="PCB"></a>
Ken made a great many appearances at schools and universities, 
to explain how he thought students could and should make use of computers, 
and in particular, how they could start right away, using APL. 
At some of these guest experiences, 
I got to serve as his assistant, 
and I felt a bit like Robin getting to carry Batman&rsquo;s bag. 
But listening to Ken give those demonstrations, 
I marvelled at the spontaneous and natural way he seemed to talk. 
Especially I loved the way he deftly handled questions from the audience. 
He seemed endlessly able to respond to their queries 
with neat examples and appropriate jokes. 
Only after I had listened to these presentations many times, 
did I begin to catch on to how he did this. 
He carried around in his head a huge fund of examples, jokes, aphorisms, stories, 
but he kept them in reserve.  He didn&rsquo;t offer them. 
He waited until a listener&rsquo;s question happened to set up one of them, 
and then he sprang it forth. 
It sounded just like something he&rsquo;d thought of that instant 
in response to what the questioner had asked.</p>

<p align=right>&#151;
Paul Berry, 
<a target=APLQAx href="http://www.vector.org.uk/archive/v223/whitney.htm"><i>Vector</i></a>, 2006-08
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Breed"></a>
Seeking to counter the popularity of Dartmouth Basic (running on teletypes and a remote GE computer) at 
the prestigious Hotchkiss School in Connecticut, IBM V.P. Arthur K. Watson, who was a Hotchkiss 
trustee, had APL terminals and access to the Yorktown <i>APL</i>\360 system installed for Hotchkiss students. 
The students loved it, and carefully steered newbies to the Basic teletypes so as to maximize their own APL 
time.</p>

<p align=right>&#151;
Larry Breed, <a target=APLQAx href="http://archive.computerhistory.org/resources/text/2009/102636222.05.01.acc.pdf"><i>How 
We Got to APL\1130</i></a>, 2004-05-10
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Falkoff"></a>
Q: I have read some other discussions where you and other people
suggested that one of the interesting applications
was using APL to teach programming and mathematics
at the elementary and high school levels.</p>

<p>Adin: We did some of that, particularly at the beginning,
and we had a little fun with it.</p>

<p>At that time we only had typewriter terminals 
and we made some available to some local private schools.
There was one in particular 
where problem students were supposed to be taught,
and we gave them exercises to do 
on the typewriter and turned them loose.</p>

<p>The fun part was that we found 
that some of these students 
who were supposed to be resistant to learning
broke into the school after hours 
so they could do more work on it.
They were using typewriter terminals 
hooked to our time-sharing system.</p>

<p align=right>&#151;
Adin Falkoff, 
<i>Masterminds of Programming</i></a>, 2009
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="implementers"></a>
The ACM Grace Murray Hopper Award is given 
to the outstanding young computer professional of the year, 
selected on the basis of a single recent major technical or service contribution. 
The candidate must have been 35 years of age or less 
at the time the qualifying contribution was made.</p>

<p>The 1973 Grace Murray Hopper Award goes to Larry Breed, Richard Lathwell, and Roger Moore, 
for their work in the design and implementation of <i>APL</i>\360, 
setting new standards in simplicity, efficiency, reliability and response time 
for interactive systems.</p>

<p align=right>&#151;
ACM,
<a target=APLQAx href="http://awards.acm.org/hopper/all.cfm"><i>Grace Murray Hopper Award</i></a>
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Hofstadter"></a>
In January of 1973, when I was 27 years old, I was a graduate student in physics.  
A few months earlier, I had taken some time off from the University of Oregon 
in Eugene and had moved to New York City.  
I spent the fall semester there taking physics courses at CCNY 
while supporting myself by teaching &ldquo;Physics for Nurses&rdquo; 
at Hunter College on the Upper East Side of Manhattan.  
However, by the end of the fall term, 
I decided I should return to Eugene and complete my Ph.D. there.  
The previous summer, I&rsquo;d driven cross-country in my silver-colored 1956 Mercury Monterey, 
which I affectionately called &ldquo;Q&rdquo;, 
short for &ldquo;quicksilver&rdquo; 
(an ancient word meaning &ldquo;mercury&rdquo;) &mdash; 
shown in <a target=APLQAx href="https://www.jsoftware.com/papers/APL_Q.htm">two attached photos</a>, one taken way back in 1971, 
and the other in 2006 (yes, I still own Q today!)  
So, back to our tale &#133; 
I was now taking Q (or rather, Q was now taking me) back the other way &mdash; 
back across the amber waves of grain, the purple mountains&rsquo; majesty, 
across the fruited plain, from sea to shining sea.
</p>

<p>Q and I tended to drive very late at night, and one night 
in the middle of darkest Iowa, 
at about 1 AM, there was a sudden extremely intense downpour, 
so I stopped at a truck stop to wait it out.  
Under the bright lights I had a coffee, and when the storm had somewhat abated, 
I went back out to Q and started off again.  
It was still raining, but not nearly as hard.  
Right as I was about to get back onto the freeway, 
I spied a rather pathetic totally drenched figure standing on the side of the road thumbing a ride, 
and he looked young and not in the least threatening, 
so I pulled on the reins of my steel steed and came to a halt, 
and told the sopping-wet fellow to hop in.  
He was probably in his late twenties, like me, 
and he had red hair, unlike me, and at that most wet juncture in his life, 
he was very relieved to get a ride.</p>

<p>So we got to talking, and after a while 
I mentioned that I had grown up on the Stanford campus.  
My traveling companion said that his brother had been at Stanford some years earlier, 
so naturally I asked what his brother had studied there, 
and he said that he was a computer person.  
Back in those days, this was an incredible rarity. 
In fact, Stanford had only one single computer when I, 
as a high-school kid, had started programming it, in 1960.  
So I said, &ldquo;And what was his name?&rdquo;  
And my still-shivering seatmate replied, &ldquo;Roger Moore&rdquo;.</p>

<p>Well, what do you know &mdash; Roger Moore!  
I remembered good old red-haired Roger extremely vividly 
from my undergraduate days at Stanford, in the early sixties.  
Back then, there was a small coterie of recursion-crazed math nuts &mdash;
today they would be called &ldquo;geeks&rdquo; or &ldquo;nerds&rdquo;, 
but back then those words did not exist &mdash; 
who hung around all day and all night in the basement of Encina Hall, 
where the legendary Burroughs 220 was located, 
and who talked endlessly about the subtleties and beauties of <font size=-1>ALGOL</font>
(a brand-new computer language of the time, and truly <font size=-1>ALGOL</font> 
was a wonderful and important breakthrough in computer science).  
This delightful, nerdy band included my friends 
Larry Breed, Larry Tesler, Charlie Brenner, Roger Moore, 
Bill Strachan, and myself (and probably a couple of others, but, like Q, 
my memory is a wee bit rusty after all these decades).</p>

<p>So of all things, in the middle of my life in the middle of a storm 
in the middle of the night in the middle of nowhere 
in the middle of the North American continent, 
Q and I had picked up the brother 
of someone I had hung out with some ten years earlier.  
Small world indeed.</p>

<p align=right>&#151;
Douglas Hofstadter, <i>A Q Tale</i>, 2009 
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="execute_remainder"></a>
I was allowed to use the Stanford computer (IBM 650) 
when I was in high school. 
That was thanks to Prof. George Forsythe (mathematician, 
founder of the computer science department at Stanford,
founding editor of the Journal of the ACM) 
who introduced some of us to computers at the weekly 
Tuesday Joe Berg Science Seminar series at Palo Alto High School. 
Probably in 1961, the summer before I matriculated 
as a regular student, I met Roger Moore. 
By that time the computation center was in the basement 
of Encina Hall and the computer had been upgraded to a Burroughs 220 
whose <font size=-1>ALGOL</font>-inspired <font size=-1>BALGOL</font> 
compiler was our main programming tool. 
We regulars who hung out there knew the compiler&rsquo;s quirks 
inside and out even to the extent of some putatively 
illegal syntax constructions that would slip 
through the parser and potentially do something useful. 
Roger reached into my punched card box 
on the shelf of the make-ready room and took a look at my handiwork. 
What he saw must have been obscure programming 
on my part no doubt intended to save a few bytes or milliseconds. 
Good natured but a little snidely he summarized his feeling: 
&ldquo;Ah, very clever. 
Floating point divide and execute the remainder.&rdquo;
</p>
<p align=right>&#151;
Charles Brenner 
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="sum_bits"></a>
&#133; Al Rose, a vice president of STSC,
called on Roger Moore,
a vice president of I.P. Sharp,
to improve the speed of Boolean summation.
Moore had reasons of his own 
for wanting to do this, so he agreed.
His analysis of the problem was faily subtle,
and he managed to gain more efficiency
in more areas than the original problem called for,
but we will concentrate here on the essentials
of his solution of the basic problem.</p>

<p>The heart of the technique 
was exploitation of the Translate instruction,
peculiar to the architecture 
of the IBM System/360 line of computers.
The Translate instruction is able to replace
as many as 256 eight-bit bytes of data
in storage by the same number of other bytes.
Each byte of the first argument is used to
select a byte from the second argument,
which then replaces the byte of the first argument.
Considering the elements of the two arguments
as integers in the range 0-255,
one could define the Translate instruction
by the expression<tt> a←b[a]</tt>&nbsp;,<tt> </tt>
where the length of<tt> a </tt>
is 256 elements or less,
and the length of<tt> b </tt>
is at least<tt> ⌈/a</tt>&nbsp;.<tt> </tt>
The reason Translate is in the System/360
set of instructions is to convert
data from one transmission code to another,
but that is not what Moore used it for.
Instead, he put into<tt> b </tt>elements
which gave the count of the number of bits
in the corresponding elements of<tt> a</tt>&nbsp;.<tt> </tt>
For example, if the entry in<tt> a </tt>
were<tt> 01110110 </tt>
(which, considered as a base-2 number is 118),
entry 118 in<tt> b </tt>
would be<tt> 00000101</tt>&nbsp;,<tt> </tt>
since there are five 1-bits
in the element of<tt> a</tt>&nbsp;,<tt> </tt>
and<tt> 00000101</tt>&nbsp;,<tt> </tt>
considered as a base-2 number,
has the value 5.</p>

<p>With this translate table in hand,
it was a relatively simple matter
to take a Boolean array,
translate the bytes of its rows
to the corresponding bit count,
and then sum the translated bytes.
Suppose, for example, that a 32-element
Boolean vector<tt> v </tt>is represented
in the computer memory by the four bytes:</p>

<pre>
   11010110 00100011 01111101 00101101
</pre>

<p>These would be translated to the four bytes:</p>

<pre>
   00000101 00000011 00000110 00000100
</pre>

<p>which are the binary representations
of the numbers 5, 3, 6, and 4, respectively.
These four numbers could be summed by a Load
and three Adds,
to give the desired sum 18.
Thus with one Translate, one Load, and three Adds
it is possible to do what otherwise
took 32 Translations, one Load, and 31 Adds.
Actually Moore&rsquo;s strategy 
was more sophisticated than this,
so that he was able to 
handle<tt> ^/</tt>&nbsp;,<tt> ∨/</tt>&nbsp;,<tt> ≠/</tt>&nbsp;,<tt> </tt>
and<tt> =/ </tt>with the same code,
and his code is considerably faster than
even this analysis would indicate,
but that isn&rsquo;t part of the present story.</p>

<p>So successful was this technique that
when IBM&rsquo;s new high-performance VS APL system
was announced in 1975,
the Plus-Reduction on the I.P. Sharp and
STSC systems was still twice as fast as that
of VS APL. &#133;</p>

<p align=right>&#151;
Eugene McDonnell, 
<a target=APLQAx href="http://www.jsoftware.com/papers/eem/qq111.htm"><i>Sum 
of the Bits</i></a>, 1980-09<p>

<p>[<i>Editor note</i>: &ldquo;Considerably faster
than even this analysis would indicate&rdquo; 
perhaps worked by exploiting the fact that the byte counts, 
taken four at a time as &ldquo;full word integers&rdquo;, 
can be summed four at a time (&ldquo;in parallel&rdquo;),
up to<tt> ⌊255÷8 (=31) </tt>times without overflowing
the individual counts.
See the J Wiki essay
<a target=APLQAx href="https://code.jsoftware.com/wiki/Essays/Sum_of_a_Bit_Array"><i>Sum
of a Bit Array</i></a> for more details.]
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="photo"></a>
<a target=APLQAx href="https://www.jsoftware.com/papers/APL_originators.htm"><img src="https://www.jsoftware.com/papers/APLimg/APL_originators.jpg" width=500 height=400></a>
<br>
(L to R) Dick Lathwell, Ken Iverson, Roger Moore, Adin Falkoff, Phil Abrams, and Larry Breed. 
(On the extreme left in the background: Jon McGrew.) 
Taken in the I.P. Sharp Associates hospitality suite 
during the 1978 APL Users Meeting in Toronto, Canada.</p>

<p>A slightly different version of this photo appeared 
on the front page of 
the I.P. Sharp Newsletter, 1978-11 to -12, volume 6, number 6.
The caption on the photo had the following sentence:
It is believed to be the first time all six &ldquo;originators of APL&rdquo;
have been in the same place at the same time;
it is probably the first time that all six have worn jackets and ties
simultaneously and the first time Ken and Adin have been observed
to smile simultaneously.
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="RBE"></a>
How I got my job at IPSA. It began with a conversation between me and a headhunter.</p>

<table>
<tr><td>Me: &nbsp;</td><td>I want to work on compilers.</td></tr>
<tr><td>Me:</td><td>I want to work my own hours.</td></tr>
<tr><td>Me:</td><td>I don&rsquo;t want to have to wear a suit.</td></tr>
<tr><td>Me:</td><td>I don&rsquo;t care what it pays.</td></tr>
<tr><td>HH:</td><td>There is only one place in town like that.</td></tr>
</table>

<p>I interviewed with Ian, who seemed satisfied, 
but he told me, &ldquo;You&rsquo;ll have to talk with Roger.&rdquo;
He made it sound as if Roger was some sort of demigod.
Which was not far from the truth.
I was led to an elfin, rumpled-looking character
who was smoking a cigarette and staring and muttering at a listing.
Roger Moore.</p>

<p>I introduced myself and said Ian had sent me over about 
the compiler job.
Roger was more interested in the problem than in me, I think.
I got frustrated sitting there, while he smoked and muttered and
looked at the code, so I asked him to explain the problem
to me, then pitched in. I don&rsquo;t recall what we were
looking at; it was probably the IPSCOBOL compiler code.
After an hour or so, I said I had to leave to go on another interview,
so I asked him where we stood on the job.
&ldquo;Oh, oh, yeah, I guess we can use you.&rdquo;</p>

<p>Generating IPSCOBOL test cases was part of the job. 
The more interesting part was analyzing the compiler output for correctness.
Both of those tasks screamed for automation, which led to my
learning APL.</p>

<p align=right>&#151;
Bob Bernecky
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="APL_course0"></a>
It was early in my first week at I.P. Sharp in Ottawa 
when Ian Sharp arrived for a visit. 
Ian&rsquo;s standard <i>modus operandi</i> was to sit with employees 
in silence until they spilled whatever was on their mind. 
It was a great way of finding out what was really going on in the company. 
This day was no different, and I was searching for something to say. 
Since I had never seen APL before, I asked Ian 
whether there was an APL course coming up soon. 
He responded there was one scheduled the next week. 
When I asked if I could take it, 
Ian responded, &ldquo;You’re giving it!&rdquo; 
I was a highly motivated learner, to say the least. 
It was perhaps the best course I ever gave, 
as I was certainly at no risk of cramming 
too much information into the course.</p>

<p align=right>&#151;
Lib Gibson
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="666box"></a>
Lower Canada College in Montreal was fortunate enough to 
have been introduced to APL when John Brown, 
then head of the Mathematics Department of the school, 
met Ken Iverson at an IBM conference in the late 60&rsquo;s. 
John excitedly brought IBM&rsquo;s APL to the School, 
and this was later replaced by a connection to SHARP APL (then APL Plus). 
Everyone used the same account number, and so had access to everyone else&rsquo;s information. 
Some people, including myself, started to reason about how one 
could protect workspaces and files (when these were released in 1970) 
from prying eyes. We started to think beyond (workspace) locks 
and (file) magic numbers, and this led to techniques 
for monitoring application security, trapping snoopers, 
encrypting data, hiding programs, etc.</p>

<p>The first Mailbox (the term &ldquo;e-mail&rdquo; hadn&rsquo;t yet been coined) 
was developed by Larry Breed at STSC during a period in time 
when IPSA and STSC collaborated on many language and environmental features. 
Larry&rsquo;s Mailbox was actually the world&rsquo;s second electronic mail application 
that I know of, the first having been written in 1971 
by Frank Bates III of Mobility Systems. 
Frank&rsquo;s application demonstrated the efficacy of communication 
through this medium, but was not a robust, 
commercial application and was not secure. 
In early 1972, Larry set out to build something that was.</p>

<p>There was something appealing about trying to break into a messaging system. 
For one, you can learn a lot trying, and even more when you&rsquo;re successful. 
Additionally, Larry had introduced some novel changes 
into the APL interpreter to allow name masking, 
and this made the allure still greater&mdash;even mysterious. 
After having penetrated numerous other applications running on the mainframe, 
it wasn&rsquo;t hard to convince myself to try to break into the Mailbox. 
I did this successfully on many occasions, 
using a variety of techniques that I developed. 
Each time, I would report what I had done to David Keith, 
branch manager of the IPSA Montreal office, 
and eventually that hole would be plugged and I&rsquo;d move on to find a new one. 
Years later, Larry told me he was late for the annual STSC Christmas party 
in 1972 because he was busy fixing my latest reported vulnerability.</p>

<p>One Saturday in 1973, I recall being at the School 
browsing through everyone&rsquo;s messages 
when I came across one written by David Keith 
about a confidential sales prospect. 
The message was addressed to Ian Sharp 
and a few senior managers in the company. 
It went on for some time about the nature 
of the opportunity and the likely next steps in securing it. 
In conclusion, David reiterated the confidentiality of the matter and, 
almost prophetically, added &ldquo;that goes for you snoopers at LCC, too!&rdquo; 
It was a mirthful moment.</p>

<p>A couple of months later, David Bonyun of I.P. Sharp, 
then System Librarian and in charge of all public libraries, 
contacted me and asked if I would write a new Mailbox that was 
functionally similar to the existing one but &ldquo;Leslie Goldsmith proof&rdquo;. 
Doing this would certainly bring to bear all that I had learned 
about trying to protect data at LCC.</p>

<p>My first version of 666 BOX was written as a part-time activity 
in the late summer of 1973. IPSA did not have access to the source 
for the version they had been running, so it was written from scratch. 
Although it underwent many significant changes over the coming years, 
dramatically increasing its capacity 
and later introducing cross-domain message transfer, 
I&rsquo;m not aware of any successful attempts to penetrate it.</p>

<p align=right>&#151;
Leslie Goldsmith
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="penny"></a>
It came time to negotiate the remuneration for the mailbox work.  
Ian Sharp offered a fixed sum; Leslie Goldsmith countered with a royalty approach 
of one penny per message.   
The negotiations demonstrated the financial acumen of both parties: 
if Leslie had prevailed he would eventually 
have received several orders of magnitude more than the fixed sum. 
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="IPS0"></a>
A constant source of irritation was the universal attitude 
of all telephone companies to the idea of electronic mail. 
It was regarded as a huge threat to the considerable income 
that they all derived from Telex traffic. 
Telex was an ultra-low speed communication system among Teletype terminals. 
The service was introduced in the mid 1940s as the solution 
to all corporate data transmission requirements. 
No significant improvements or upgrades were made to that service 
over the next 30 to 40 years. 
The first real threat came with the advent of electronic mail, 
or at least that was how electronic mail was perceived. 
The first reaction of any monopoly to a perceived threat 
is to ban it outright, and that is more or less 
what the telephone companies of the world did. 
As a company we had no serious intention of offering 
a general inter-company communications facility 
that might have competed with Telex. 
We were mainly interested in an internal communication system 
among employees and a mechanism to communicate with our customers. 
Assuaging paranoia was almost a full time job and was probably 
the subject of more meetings around the globe than any other single issue.</p>

We never did succeed completely in allaying suspicion, 
and many phone companies were sure that we were eating their Telex lunch, 
even though they had no evidence of it. 
As a gesture of goodwill, we modified our Email software 
so that it was not possible for one customer to communicate with another, 
but that was largely a waste of time 
since they did not really believe that we had done that. 
In Germany the Bundespost invented a tariff 
which they said we must apply to all Emails 
and send them money each month. 
Since we did not have revenue from electronic mail in Germany, 
we never sent them &ldquo;their share&rdquo; 
and eventually the issue atrophied.</p>

<p>It was of course the proliferation of computers and 
private corporate networks which caused the erosion of Telex use. 
More and more people started to use electronic mail 
and the telephone companies were simply over-powered 
by the tidal surge of individual as well as corporate usage. 
It is doubtful that as many as 1% of the present population 
of Email users has any idea that just a few short years ago 
the whole thing was illegal.</p>

<p align=right>&#151;
Ian Sharp, <a target=APLQAx href="http://rogerdmoore.ca/INF/EIPSPTTa.html"><i>I.P. Sharp Associates 
and the Telephone Monopolies</i></a>, 2005
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="BWO"></a>
In the fall of 1970 I was introduced to Iverson Notation, 
to express algorithms. 
I was impressed by its brevity and unambiguity. 
For the first and only time, I enjoyed homework.</p>

<p>In the spring of 1971, I took a survey class about 
programming languages&mdash;a different one each week. 
I was standing outside a classroom and overheard two classmates:</p>

<p>&ldquo;What&rsquo;s the language this week?&rdquo;</p>
<p>&ldquo;APL.&rdquo;</p>
<p>&ldquo;What&rsquo;s that?&rdquo;</p>
<p>&ldquo;It&rsquo;s Iverson Notation on a 2741 typewriter terminal.&rdquo;</p>

&#133; Instant love. Not only my favourite language, 
but no more punch cards. 
Little did I realize then that 
it would set my life’s career path.</p>

<p align=right>&#151;
Brian Oliver, 
<a target=APLQAx href="http://aprogramminglanguage.com/wordpress/2011/11/27/its-apls-birthday-or-is-it/#comments"><i>
It&rsquo;s APL&rsquo;s Birthday! Or is it?</i></a>, 2011-11-27
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Al_Rose"></a>
Al Rose was one of the best stage acts I can remember. 
I attended a gig of his somewhere in London in the early &rsquo;70s. 
Al had an IBM golf-ball APL terminal. 
As a finale, he said, 
&ldquo;I have The Book of Psalms here &mdash; what do you want to know?&rdquo; 
There was a long pause, until someone in the audience asked,
&ldquo;Which word occurs most often?&rdquo;</p>

<p>Al put his head down and thought for around a minute 
(which is a very, very long time when you&rsquo;re on stage). 
Then he typed in a fairly long APL expression. 
There was a pause. 
Then the typewriter started clattering out 
a list of the unique words and their counts in order of frequency. 
It brought the house down.</p>

<p>The best thing about the experience was the look on the 
FORTRAN programmers&rsquo; faces :-)</p>

<p align=right>&#151;
John Scholes
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Al_Rose1"></a>
Al Rose&rsquo;s feat was all the more impressive because
he did it in a first-generation APL.
In current Dyalog APL, the computation 
is<nobr><tt> &nbsp;⌽ {(⊂⍒⍵)⌷⍵} {(≢⍵)⍺}⌸ x</tt>&nbsp;.</nobr>
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="LISP"></a>
LISP came out from people who didn&rsquo;t see the progression 
raw binary<tt> → </tt>assembler<tt> → </tt>FORTRAN.</p>

<p align=right>&#151;
John Scholes, as quoted by Stefano Lanzavecchia<br>
<a target=APLQAx href="http://archive.vector.org.uk/art10004860">in <i>Vector</i>, volume 20, number 2</a>.
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Shallit"></a>
Jeffrey Shallit was a summer intern 
at the IBM Philadelphia Scientific Center in 1973. 
He was working on some high precision computations using APL. 
I can&rsquo;t remember whether it was a precise evaluation 
of pi to several thousand places, 
or perhaps Mersenne prime #24  <nobr>( <tt>_1+2^19937x</tt>)</nobr> &mdash;
but in any case, Jeffrey had succeeded 
in printing out this lengthy number, and
left a copy of the pages of digits on several people&rsquo;s desks. 
The next morning, Ron Frank came in, 
looked at the copy on his desk, 
circled a digit towards the end of the long number and wrote, 
&ldquo;Are you sure about this digit?&rdquo; 
and put it back on the desk Jeff was using.</p>

<p>That afternoon, Jeff came in and discovered the note 
and raced into Ron&rsquo;s office saying, 
&ldquo;How do you know that digit is wrong??&rdquo;
To which Ron calmly replied, 
&ldquo;I have no idea if it is correct or not &mdash; 
I was just asking if you were sure &#133;&rdquo;</p>

<p>I was (am still) impressed with Jeffrey&rsquo;s 
work because he did it in an 80KB APL workspace. 
Hard to imagine these days when it is routine to
work with a hundred thousand times that much memory &#133;
Although I note that J only consumes 80704 bytes 
to calculate<tt> _1+2^19937x </tt>and that&rsquo;s impressive too.</p>

<p align=right>&#151;
Joey Tuttle
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="1GB"></a>
My usual metric for the progress in Big Iron was based on the size
that a disk drive had to be, in order to kill you if it fell on you.
By the end of my physical contact with that hardware, in the mid &rsquo;80s,
it was up to <nobr>1 GB.</nobr>
</p>

<p align=right>&#151;
Bob Bernecky
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name=STARMAP></a>
Ken encouraged me to collaborate with John Thorstensen, 
a graduate student in astronomy, on a program called STARMAP.
The idea was to explain the movement of the stars and planets 
across the sky and to do it by writing programs 
that clearly stated the simple formulas that described their motion. 
&#133;
When we asked for approval to publish this example 
of didactic programming we got back 
from the publications review committee a message that said, 
&ldquo;Permission denied. This paper discloses proprietary algorithms 
that are the intellectual property of IBM.&rdquo; 
I sent in an appeal saying, as diplomatically as I could, 
Don&rsquo;t be silly. 
This is an APL restatement of Kepler&rsquo;s function from about 1610. 
But then we got a new rejection. This time it said, 
&ldquo;Permission denied. This is not original work.&rdquo;

<p align=right>&#151;
Paul Berry, <a target=APLQAx href="http://archive.vector.org.uk/art10000980"><i>Expository Programming</i></a>, 2006
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="MCM1973"></a>
In August 1973, MCM sent Ted Edwards to the APL Congress 
in Copenhagen with a prototype of the MCM/70. 
What was unusual about that MCM/70 was that 
it was mounted in an attach&eacute; case 
and was operating on batteries.
Edwards was not only able to board the plane 
with this unusual device 
but also reviewed his presentation using that MCM/70 
during the flight to Copenhagen. 
This constitutes another &ldquo;first&rdquo; for MCM: 
the first portable computer operated during a flight. 
And, of course, that &ldquo;laptop&rdquo; was running MCM/APL.
The MCM/70 story was picked up by the Danish daily 
Politiken on 1973-09-28.</p>

<p align=right>&#151;
Zbigniew Stachniak, 
<a target=APLQAx href="http://lathwellproductions.ca/wordpress/2010/10/14/york-mcm70-the-angst-of-being-there-first#comment-1296">York, 
MCM70 &amp; the angst of being there first</a>,<br>2010-10-17
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="first_day"></a>
My career in APL started as a summer student
at IPSA Calgary in 1975, where Arthur Whitney 
was a summer student the year before.
On my first day on the job Ian Sharp happened to be visiting,
and the whole office went out to lunch with Ian.
During lunch I expounded on matters far and wide.
Ian watched me for a while, then turned to Lib Gibson,
IPSA Calgary branch manager, and asked,
&ldquo;Isn&rsquo;t Arthur Whitney coming back with us this year?&rdquo;</p>

<p>It was years before I realized that I had been put down.</p>

<p align=right>&#151;
Roger Hui
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="magic_touch"></a>
In 1975 or 1976, IPSA installed a faster IBM mainframe 
for their SHARP APL timesharing service.  
On the first day on this machine, 
I (in Calgary) happened to enter an expression involving<tt> ⌹ </tt>
and generated a system error with a register dump and everything.  
Seemingly in no time flat Roger Moore (in Toronto) 
was on the case and fixed the problem.  
He then inquired of Lib Gibson, IPSA Calgary branch manager, 
re who was the person with the magic touch.  
Lib replied that it was Roger the summer student, 
adding that having a magic touch was a characteristic of all Rogers.
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="LHG"></a>
Working at IPSA, with its far-flung offices and its
Mailbox, it was possible to &ldquo;know&rdquo; 
a person for years without ever meeting the person.  
Well into my IPSA career, I asked Lib Gibson, &ldquo;Is Leslie Goldsmith
a guy or a girl?&rdquo;
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="FBA"></a>
In 1975 or 1976 the IPSA Calgary office barbeque 
took place at a lake about 10 minutes away 
from Lib Gibson&rsquo;s house.
We gathered at the house, then walked over to
the lake carrying the food, drinks, dishes, cutlery, etc.
Frank Arthur and I had the cooler.</p>

<p>The cooler was awkward and heavy and I kept having
to switch hands.  After a while Frank asked me to let go,
then proceeded to put the cooler on his head
and walked the rest of the way with the cooler
balanced on his head.  
This was a skill he learned in his native Ghana.
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Beverlys_Bordello"></a>
In those days we had IBM 2741 terminals that connected to
the IPSA mainframe in Toronto via acoustic couplers
and modems, dialed through ordinary telephones. 
Those phones were not supposed to receive incoming calls,
but once in a while <i>did</i> ring due to incorrectly dialed numbers.
On such occasions, Fred Appleyard would pick up the phone
and say, &ldquo;Beverly&rsquo;s Bordello.&rdquo;
And sometimes Frank Arthur would pick up and say,
&ldquo;Cathy&rsquo;s Cathouse.&rdquo;</p>

<p>One time, instead of ending the call quickly, 
the caller asked, &ldquo;What number did I dial?&rdquo;
<br>&nbsp;</p></td></tr>


<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="modems"></a>
Modem technology introduced around 1960 was the Western Electric 103A. 
It used frequency shift keying and could run at 300 baud. 
Original terminals were 2741s and clones at 134.5 baud. 
I cannot remember exactly when ASCII support was introduced. 
APL ASCII was helped by the daisy wheel printer technology which ran at 30 cps 
(provided you didn&rsquo;t feed it 
with wrong character sequences like<tt> N⍴'E0'</tt>).
</p>

<p>Prior to IPSANET it was expensive to provide 300 bps service outside of Toronto. 
A wider bandwidth time-division multiplex channel was required which increased costs. 
With packet switching support for higher speeds became possible. 
I think IPSA was widely deployed in 1978 
(check <a target=APLQAx href="http://rogerdmoore.ca/INF">rogerdmoore.ca/INF</a>) 
with 134.5/300 bps autospeed ports on the Alpha and 3705. 
Checking May/June 1978 network topology 
suggests that TDM links were gone in 1978.</p>

<p>1978 was during the Vadic <i>v</i> WE 212A wars.  
Both provided 1200 bps over dial-up lines; 
only Vadic could be acoustically coupled. 
I think there were some 1200 bps network ports in 1978. 
As these ports became more common, 
we discovered that the exact Alpha hardware configured did not really support 1200 bps. 
I spend a couple of weeks looking the source of the problem. 
The problem was associated the bloody awful transmit shutdown scheme 
in the Advanced [<i>sic</i>] Micro Device 9551 chip.  
Commercial async chips (unlike IBM 3705) 
were incapable of transmitting an invisible idle 
(start bit at mark and data=all marks). 
With the 9551 turning off transmit mode immediately jammed transmit data at mark. 
This meant Alpha software had to send two dummy characters 
after last character from a packet. 
In normal 9551 transmit operation a new character was requested 
in the middle of stop bit transmission.  
For a characters other than last Alpha hardware 
would supply a new character in between instructions. 
When count expired on the data transfer there was an interrupt. 
If interrupt was serviced by shutting down transmit mode 
while the stop bit was being transmitted, everything was OK. 
If interrupt service was delayed then transmission 
of start bit of next character would start. 
A small delay would result in a visible blip on transmit data 
which would probably be ignored by the modem. 
Transmitting half of the start bit would be visible to modem and end user. 
Thus delay of interrupt by (1/1200 sec) would guarantee a noise character at user terminal. 
Shorter delay might give garbage.</p>

<p>Solution was global switch to Intel 8251 chip 
which had a much more civilized approach 
to transmit shutdown. 
With 8251, shutting down transmit mode disabled further requests for more characters 
but allowed buffered characters in chip (usually two) to be transmitted. 
This network wide hardware change 
which occurred one node at a time was required to properly support 1200 bps.</p>

<p align=right>&#151;
Roger Moore
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="APL_course1"></a>
When I was in my early twenties, 
for a while I happened to be the only person 
in Atkins Computing who knew any APL. 
I was a techie, working in &ldquo;Systems&rdquo;, 
supporting the Sigma operating system, 
including the new Sigma APL 
(which was written in wonderful Metasymbol).</p>

<p>Atkins was keen to sell time-sharing CPU cycles to Rank-Xerox, 
who had indicated an interest in APL 
and wanted to evaluate our &ldquo;APL Training Course&rdquo;.</p>

<p>I was detailed to give an &ldquo;Introduction to APL&rdquo; course for evaluation. 
Come the day, I found myself in the conference room with a blackboard. 
I don&rsquo;t think the company owned an APL terminal at that time; 
we used<tt> $I $R $TAK $DRP </tt> &#133; on a KSR-33 teletype.</p>

<table>
<tr><td colspan=3>&nbsp; &nbsp; &nbsp;<i>Dramatis Personae</i></td></tr>
<tr><td>Me</td>        <td>&nbsp; &nbsp;</td><td>Atkins techie</td></tr>
<tr><td>Sally</td>     <td>&nbsp;</td><td>Atkins client support</td></tr>
<tr><td>Steve</td>     <td>&nbsp;</td><td>Atkins client support</td></tr>
<tr><td>Alpha-male</td><td>&nbsp;</td><td>Rank-Xerox</td></tr>
<tr><td>Sidekick0</td> <td>&nbsp;</td><td>Rank-Xerox</td></tr>
<tr><td>Sidekick1</td> <td>&nbsp;</td><td>Rank-Xerox</td></tr>
</table>

<p>Can you spot what&rsquo;s wrong with this picture? No? I&rsquo;ll tell you.</p>

<p>Me: I was profoundly shy at this point in my life and found any sort of public speaking almost impossible. I had been to an all-boys school and (for all intents and purposes) an all-male math faculty, and so blushed and stuttered in the presence of g-g-g-irls. I was in the room to try to teach APL.</p>

<p>Sally: was the &ldquo;Company Glam&rdquo;: long blonde hair, long legs, 
the whole package. 
Her job was to soothe the predominantly male customer base, and she was very good at it. Whenever Sally walked in, my throat swelled up and I found it hard to breathe. 
Sally was in the room to be cute, not to learn APL.</p>

<p>Steve: hated me. He had a low opinion of technical people and saw my being exposed to clients as trespassing on his territory. He would be giving the next APL course &ldquo;properly&rdquo;. Steve was in the room to trip me up, not to learn APL.</p>

<p>Alpha-male: in his fifties, was the sort of guy the financial services industry likes to use in adverts because their mere appearance commands respect. He had greying beautifully-coiffured hair and wore a very expensive suit. (My father wore an old blue suit to work but it was shiny in places and he often slept on the sofa in it.)
Equally daunting for me was Alpha&rsquo;s BBC/Royal accent and perfect diction. 
He was of a species different from mine. 
Alpha brought just his presence to the room; he was not there to learn APL.</p>

<p>Sidekick0&amp;1 had shadowy bit-parts. They didn&rsquo;t do or say much. 
They were in the room, I suspect, to agree with and to make Alpha look good, 
not to learn APL.</p>

<p>I started shakily; &ldquo;APL was invented by Dr. Kenneth Iverson; APL works back to front, well not really, well sort of &#133;&rdquo;</p>

<p>Half an hour in, no-one had uttered a word. This is because none of them considered themselves participants; they were just there to observe. I was dying and close to tears. I struggled on for an hour or so: the shape of a zero is empty but the shape of an empty is zero because the rank of a vector is one and the rank of a one is a zero and &#133;</p>

<p>And then there was a glimmer of light. Alpha leaned towards Sidekick1 and said something to which Sidekick1 nodded and smiled. At least they were alive! I grabbed the opportunity like a life-belt and asked if I could clarify something. Alpha looked me straight in the eye and said: &ldquo;I thought you used the word &lsquo;Wank&rsquo;.&rdquo;</p>

<p>From the perspective of modern-day sensibilities, it&rsquo;s hard to imagine just how shocking this utterance was. This was a word that I would have found difficult to say to my drinking buddies, let alone at work, let alone in front of clients and, 
most especially, let alone in front of a lady. 
I just didn&rsquo;t know how to react. 
I was literally speechless.</p>

<p>And then it dawned on me: they were here to evaluate the training; it was a psychological test to see how I would react to extremely adverse conditions during my course. I made a snap decision to react firmly. I said &ldquo;No, I used the word R-R-R-ank&rdquo;. I may have raised my eyes skywards in a gesture of disdain.</p>

<p>My mind had turned to mush. I stumbled on until just before lunch but I was more or less sleepwalking. Part of me had stopped functioning. The others seemed to recover a little and all but Alpha managed a question or two.
And then, just before we broke for lunch, he attracted my attention and said with perfect diction: &ldquo;I&rsquo;m sowwy, I weally didn&rsquo;t understand that.&rdquo;</p>

<p>His original bombshell had been little more than a feeble joke that &ldquo;rank&rdquo; was a technical word in APL and that they were from Rank-Xerox.</p>

<p>For years afterwards, I woke up in a hot sweat in the middle of the night. My only consolation being that anyone with such a speech impediment should weally have avoided employment with Wank-Xewox.</p>

<p>We got the contract, perhaps only because Alpha over-compensated 
for the public insult I had bestowed on him. 
I don&rsquo;t know what happened to Steve and Sally. 
I was never quite the same again.</p>

<p align=right>&#151;
Anonymous
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Shakespeare"></a>
A second precious property I&rsquo;ve found,
with respect to APL,
is the term that I&rsquo;ve used 
in that little article that was printed
in SIAM NEWS &mdash;
the word &ldquo;lyrical&rdquo;.
I find that programming APL is fun.
It&rsquo;s charming.
It&rsquo;s pleasant.
I find that programming is no longer a chore,
and one of the reasons it&rsquo;s not is
the fact that there are always so many 
choices available to me.
Whereas, the people in structured programming
tell me if you put enough structure in programs,
everybody in the room here will write
the same ALGOL program or PASCAL program.
Thus, it&rsquo;s going to be easier to read
&mdash; but also dull.</font></p>

<p>God made us all different.
No two of our minds work exactly alike,
and one of the great powers of English
is that those of us who learn to sharpen
our wits on it, and use it properly,
can say things differently from other people.
And hence, it&rsquo;s a pleasure to read English
when it&rsquo;s written by someone who has that talent.
The other day I was reading a newspaper,
an article by somebody in the arts 
who said if Shakespeare were alive today
he&rsquo;d be writing for TV.
And I said to myself when I read that,
&ldquo;Not so.  If Shakespeare were alive today,
he&rsquo;d be a programmer,
and he&rsquo;d be writing one-liners in APL.&rdquo;</p>

<p align=right>&#151;
Alan Perlis, 
<a target=APLQAx href="http://www.jsoftware.com/papers/perlis78.htm"><i>Almost Perfect Artifacts
Improve only in Small Ways:<br>
APL is more French than English</i></a>, 1978-03-29<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="epigrams"></a>
9. It is better to have 100 functions operate on one data structure than 10 functions on 10 data structures.</p>
<p>19. A language that doesn&rsquo;t affect the way you think about programming, is not worth knowing.</p>
<p>85. Though the Chinese should adore APL, it&rsquo;s FORTRAN they put their money on.</p>

<p align=right>&#151;
Alan Perlis, 
<a target=APLQAx href="http://www.cs.yale.edu/homes/perlis-alan/quotes.html"><i>Epigrams in Programming</i></a>, 
1982-09<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="McDonnell_in_APLdom"></a>
<b>McDonnell in APLdom</b></p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; Santa Teresa, forgive us our sins.<br>
&nbsp; &nbsp; &nbsp; &nbsp; Help us remember the light that wins.<br>
&nbsp; &nbsp; &nbsp; &nbsp; Console us and guide us this fateful day,<br>
&nbsp; &nbsp; &nbsp; &nbsp; For Gene McDonnell is going away.</p>

<p>When lapses in logic bedevil your traces,<br>
The father of sticks will lighten your strain<br>
By helping you master the wide open spaces<br>
That fill up the place where you should have a brain.<br>
With a quick, deft mastery logical<br>
And a manner serene, pedagogical,<br>
He cleans out the colons and mops up the commas<br>
And clears up the thinking and eases the pain.</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; Santa Teresa, forgive us our sins.<br>
&nbsp; &nbsp; &nbsp; &nbsp; Help us remember the light that wins.<br>
&nbsp; &nbsp; &nbsp; &nbsp; Console us and guide us this fateful day,<br>
&nbsp; &nbsp; &nbsp; &nbsp; For Gene McDonnell is going away.</p>

<p>Keeper of consoles, time-sharing master,<br>
Leader of fights for the good and the true,<br>
Help us to face our appalling disaster:<br>
A world without logic, a world without you.<br>
Stay us with carets, stay us with APL,<br>
Help us to think in the Iverson way.<br>
You, who survived in the city of scrapple,<br>
Help us survive in the deep, dark, South Bay.</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; Santa Teresa, forgive us our sins.<br>
&nbsp; &nbsp; &nbsp; &nbsp; Help us remember the light that wins.<br>
&nbsp; &nbsp; &nbsp; &nbsp; Console us and guide us this fateful day,<br>
&nbsp; &nbsp; &nbsp; &nbsp; For Gene McDonnell is going away.</p>

<p>Sharper than serpent&rsquo;s tooth, Sharper than swords,<br>
Sharp is the pain that we feel in our hearts.<br>
Sharp his associates, Sharp his rewards,<br>
Dull is our prospect when he departs.<br>
Our blessings go with thee, O friend tried and true.<br>
May the path that you take lead to happier scenes.<br>
But know that we all will be thinking of you,</p>

<p><tt>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</tt> The APL Crew,<br>
<tt>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</tt> Itty Bitty Machines</p>

<p>P.S.<br>
&nbsp; &nbsp; &nbsp; &nbsp; Santa Teresa, forgive us our sins.<br>
&nbsp; &nbsp; &nbsp; &nbsp; Help us remember the light that wins.<br>
&nbsp; &nbsp; &nbsp; &nbsp; Console us and guide us this fateful day,<br>
&nbsp; &nbsp; &nbsp; &nbsp; For Gene the Sharpie has gone away.</p>

<p align=right>&#151;
Michael Montalbano<br>
on the occasion of Eugene McDonnell leaving IBM<br>
to join I.P. Sharp Associates
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="declarations"></a>
<b>JAN Lee</b>: I have a question 
from Peter Wegner from Brown University. 
&ldquo;Both SNOBOL4 and APL achieve their attractiveness 
in part by their lack of declarations; 
that is, declarations force the programmer to plan ahead, 
and the attractiveness of SNOBOL and APL 
is due to the fact that programmers need not plan ahead. 
Should we encourage this attitude amongst programmers?&rdquo;</p>

<p><b>Kenneth Iverson</b>: Well, as I said at the outset, 
the ones that I wanted to duck, I&rsquo;d ask Adin. 
You want to grab that one, Adin? 
The answer is no&mdash;he doesn&rsquo;t want to. 
But he&rsquo;s going to.</p>

<p><b>Lee</b>: Basically, the question is 
that no declarations are required 
in either SNOBOL 4 or APL and 
that seems to be 
against the trend of software engineering.</p>

<p><b>Adin Falkoff</b>: 
Right, and the second part of the question is&mdash;isn&rsquo;t 
that going to cause programmers 
to suffer some kind of mental debilitation.</p>

<p><b>Lee</b>: I think that&rsquo;s a good paraphrasing.</p>

<p><b>Falkoff</b>:
And I&rsquo;m reminded of a conference 
on programming systems for mathematics 
that was held in 1966 or 1967, 
in which the question was, 
&ldquo;Should we have interactive systems 
because that&rsquo;s going to cause 
a degeneration of the mathematical ability of the populace?&rdquo; 
I think that the presence or absence of declarations 
has very little to do with the acceptability of the language. 
I think there are good technical reasons for not having them. 
By and large they tend to be redundant, 
and therefore incur many new rules, 
and thereby make life more complicated.</p>

<p align=right>&#151;
Falkoff and Iverson, 
<a target=APLQAx href="http://www.jsoftware.com/papers/APLEvol.htm"><i>The Evolution of APL</i></a>, 
Transcript of<br>Question and Answer Session, 1978-08
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Turing"></a>
The 1979 ACM Turing Award goes to Kenneth E. Iverson, 
for his pioneering effort in programming languages and mathematical notation resulting 
in what the computing field now knows as APL, 
for his contributions to the implementation of interactive systems, 
to educational uses of APL, and to programming language theory and practice.</p>

<p>The A.M. Turing Award, the ACM&rsquo;s most prestigious technical award, 
is given for major contributions of lasting importance to computing. 
Recipients are invited to give the annual 
<a target=APLQAx href="http://www.jsoftware.com/papers/tot.htm">Turing Award Lecture</a>. 
The award, sometimes referred to as the &ldquo;Nobel Prize&rdquo; of Computing, 
was named in honor of Alan Mathison Turing (1912–1954), 
a British mathematician and computer scientist.</p>

<p align=right>&#151;
ACM, <a target=APLQAx href="http://amturing.acm.org"><i>Turing Award</i></a>
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="medal"></a>
<table><tr>
<td valign=top><img src="https://www.jsoftware.com/papers/APLimg/APLMedal.jpg" width=155 height=193></td>
<td>Ms. Alvord conducted APL contests for her students
for several years and permitted nonstudents 
to enter the contests as well.
An engaging thing about her contests was that
she awarded an official-looking medal
to the winner.
I can remember how proud I was 
to receive my first medal.
(To appreciate this story you should realize that
at the time I had been using APL
for a dozen years and was working in IBM&rsquo;s
prestigious APL design group.)
Well, the day after I received the medal
in the mail at home,
my colleague Paul Berry was on the same commuter train
to our office in Philadelphia.
With great pride I showed my medal to Paul,
who looked at it and said,
&ldquo;Oh yes, my son Michael has <i>two</i>
of those.&rdquo;
Talk about put-downs!: Michael Berry
(now in the Boston office of I.P. Sharp Associates)
was then a high-school junior!</p>

<p align=right>&#151;
Eugene McDonnell, 
<a target=APLQAx href="http://www.jsoftware.com/papers/eem/qq111.htm"><i>Recreational APL: Pyramigram</i></a>, 
1980-09
<br>&nbsp;</p></td>

</tr></table>
<br></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Alvord"></a>
In the summer my family would all be at the shore in Sea Isle, NJ. 
I was the youngest of my cousins. 
My grandmother would look at me and say
&ldquo;JoeJackRosalieBarryPennyLinda&rdquo; 
and I thought it was my full name.  
However, she was usually looking for a fourth for bridge. 
The older generation played bridge all day every day.  
Rosalie always got snagged and would spend the day inside. 
I realized that I should not become a bridge player 
or I would never get in the ocean. 
So I have maintained my resistance to the game 
or I would become addicted. 
It is sort of like a self designed &ldquo;Bridge Anonymous&rdquo;. 
I&rsquo;ll watch your responses but I&rsquo;m unwilling to go 
beyond dealing the cards. 
I&rsquo;ve resisted studying the hands.  
Good Luck getting takers.</p>

<p align=right>&#151;
Linda Alvord, responding to a 
<a target=APLQAx href="http://www.jsoftware.com/pipermail/programming/2012-January/026592.html">J Forum message</a> on a<br>
&ldquo;constrained bridge hand generator&rdquo;
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="nothing"></a>
[Commenting on the empty vector:] 
I think we have the Arabs to thank for inventing zero, 
but I know that we have Dr. Iverson to thank for inventing nothing.</p>

<p align=right>&#151;
Donald McIntyre, 
APL Users Meeting, 1980-10
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Bill_Gates"></a>
Bill Gates had recently dropped out of Harvard and was keen on the
possibilities of the coming wave of personal computers. 
This was before the IBM PC, but not much before. 
He had some knowledge of APL
and thought of it as a possible language for the new machines. He
was traveling across North America talking to anyone who would talk to
him. Ian was on his list because of APL. 
Ian talked with lots of people who had crazy ideas. 
Gates happened to be the one who turned out to be right.</p>

<p>He cold-called Ian and asked for a meeting. 
Shortly after that
meeting started Ian called me and asked if I would join them. 
The three of us chatted pleasantly in Ian&rsquo;s office for some time. 
Then I gave Gates a tour of the data center and the development offices. 
I introduced him to whomever happened to be 
around and that included Bob.
As far as I remember that was the end of it.</p>

<p align=right>&#151;
Eric Iverson</p>

<p>Gates came into my office, and we talked a bit
about development work. I asked him where they
were going with APL. He said that they had 
<a target=APLQAx href="http://en.wikipedia.org/wiki/Open_Letter_to_Hobbyists#/media/File:Bill_Gates_Letter_to_Hobbyists.jpg">tried
building an APL interpreter</a>, but gave up on the idea,
because it spent all its time looking up names in
the symbol table. I told him that was precisely why
nobody did it that way, instead tokenizing APL
code so that such time-consuming actions were
performed only once. 
He shrugged that off, and switched
the topic to his new project, a graphical front end
to DOS, based on the Xerox work. That front
end was Windows, of course.</p>

<p align=right>&#151;
Bob Bernecky</p>

<p>[<i>Editor note</i>:  The timing of Bill Gates&rsquo;s
visit to IPSA Toronto differs considerably between 
the two recollections.
At the time, whether &ldquo;recently dropped out of Harvard&rdquo;,
&ldquo;before the IBM PC&rdquo;,
or &ldquo;a graphical front end to DOS, based on the Xerox work&rdquo;,
Gates was not as notable as he is now
and his visit was not seen as significant,
and so the participants are now unable to recall the date and other details more precisely.
I suppose we can ask Bill Gates.]
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Bill_Gates1"></a>
APL could have become a dominant language
for the microcomputer if only some software
company had developed an APL interpreter
for early microcomputers based on popular
microprocessors such as the Intel 8080
or Zilog Z80.
In the 1970s, those who identified microcomputers
with BASIC and viewed that language 
as an insignificant programming toy,
could have entered the microcomputer market
earlier by choosing an APL-based machine.
In view of the popularity of APL,
such a company could have derived substantial
profits from selling its APL software &mdash;
the same way Microsoft was paying its bills
with the sales of BASIC.
In fact it was Microsoft&rsquo;s co-founder and APL&rsquo;s
vocal supporter Bill Gates who wanted to do just that.
Microsoft had been developing its own APL interpreter
since 1976,
perhaps under the influence of IBM&rsquo;s introduction
of its APL-based IBM 5100 computer.
&ldquo;Equivalence with the 5100 was my goal,&rdquo;
explained Gates in his March 1979 interview for
<i>ETI Canada</i> [&ldquo;APL: Good for the Brain&rdquo;].
After the success of Microsoft BASIC, first offered
to the owners of the Altair 8800 microcomputers
in mid-1975, 
&ldquo;APL seemed like a great follow-on product,&rdquo;
continued Gates.
However, in 1976, Microsoft was still a small
software company carefully addressing market needs.
FORTRAN got higher priority and by the end of 1976,
only one person was left at Microsoft 
to continue the APL work.
Microsoft FORTRAN was introduced in June 1977
and COBOL the following year.
It was not until 1979 that Microsoft announced
its APL-80 interpreter for the Intel 8080
and Zilog Z80 platforms.
It was to be out in April 1979 and compatible
with IBM&rsquo;s APL.SV software.
But in the end the Microsoft APL-80 proved
to be vaporware and by the early 1980s,
it was Microsoft&rsquo;s BASIC and not APL
that was installed on the majority 
of personal computers.</p>

<p align=right>&#151;
Zbigniew Stachniak, 
<a target=APLQAx href="http://www.amazon.ca/Inventing-PC-MCM-70-Story/dp/0773538526"><i>Inventing 
the PC</i></a>, 2011, p. 184.
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="lipstick"></a>An APL conference in the late &rsquo;70s
or early &rsquo;80s had conference bags emblazoned with red printing, 
which due to poor quality rubbed off easily.  
At one point Brian Daly, IPSA Canada country manager,
turned to Morgan Smyth, IPSA Toronto branch manager,
looked him up and down and, while gesturing 
at the front of Smyth&rsquo;s pants, said,
&ldquo;I trust that&rsquo;s not lipstick?&rdquo;
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="NARS"></a>
This reference manual describes STSC&rsquo;s Nested Array System,
an experimental research implementation of APL developed 
to explore extensions to the APL language.
Among other proposals this system offers nested arrays,
arrays in which each position can contain an array of any rank.
Nested arrays can conveniently represent data which is difficult
to represent in conventional APL data structures.</p>

<p>The purpose of this research is to develop extensions
to APL which will make APL programmers more productive.
The concepts in this manual can also be used to model processes
which will later be rewritten in APL or another language.
Explore and evaluate these concepts and use them 
to extend your thought tools.</p>

<p>The process of implementing the Nested Array System
has focused on producing a fully functional system
rather than an efficient system.
Operating efficiency will be addressed at a later time.</p>

<p>STSC currently plans to offer the research implementation
until January 1982.
Selected features from this system will be provided
in STSC&rsquo;s production APL*PLUS VM System.</p>

<p>Among the many people whose ideas are included in this system
are J.A. Brown, Kenneth E. Iverson, Michael A. Jenkins,
E.E. McDonnell, Trenchard More, and Bob Smith.
The Nested Array System was implemented by Bob Smith.</p>

<p>I would like to thank those who spent many hours
reviewing earlier versions of this manual:
Tom Edelson, Paul Jackson, Bob Korsan, Gene Mannacio,
Bob McGhee, Don Scheer, and Roy Sykes, Jr.
I am especially grateful to John Gilmore, Graham Prindle,
Laurie Russell, Barbara Schick, and Bob Smith
who contributed many useful items.</p>

<p align=right>&#151;
Carl M. Cheney, Preface,
<i>APL*Plus Nested Array System<br>
Reference Manual</i>, 1981-03
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="APL_Blossom_Time"></a>
<b>APL Blossom Time &mdash; A History in Verse</b></p> 

<p>A nostalgic reminiscence of the early days of APL, remembered to the tune of
<i>The Battle of New Orleans</i>.</p>

<table>
<tr><td colspan=2>Back in the old days, in 1962,<br>
A feller named Ken Iverson decided what to do.<br>
He gathered all the papers he&rsquo;d been writing fer a spell<br>
And he put them in a little book and called it APL.<br>
<font size=-3>&nbsp;</font></td></tr>

<tr><td valign=top>Well&#133;&nbsp;</td><td><p>
    He got him a jot and he got him a ravel<br>
    And he revved his compression up as high as she could go<br>
    And he did some reduction and he did some expansion<br>
    And he sheltered all his numbers with a ceiling and a flo&rsquo;.<br>
<font size=-3>&nbsp;</font></td></tr>

<tr><td colspan=2>Now Sussenguth and Falkoff, they thought it would be fine<br> 
To use the new notation to describe the product line.<br> 
They got with Dr. Iverson and went behind the scenes<br> 
And wrote a clear description of a batch of new machines.<br>
<font size=-3>&nbsp;</font></td></tr>

<tr><td valign=top>Well&#133;</td><td><p>
   They wrote down dots and they wrote down squiggles<br>
   And they wrote down symbols that they didn&rsquo;t even know<br>
   And they wrote down questions when they didn&rsquo;t know the answer<br>
   And they made the Systems Journal in nineteen sixty-fo&rsquo;<br>
<font size=-3>&nbsp;</font></td></tr>

<tr><td colspan=2>Now writing dots and squiggles is a mighty pleasant task<br>
But it doesn&rsquo;t answer questions that a lot of people ask.<br>
Ken needed an interpreter for folks who couldn&rsquo;t read<br>
So he hiked to Californ-i-a to talk to Larry Breed.<br>
<font size=-3>&nbsp;</font></td></tr>

<tr><td valign=top>Oh&#133;</td><td><p>
   He got Larry Breed and he got Phil Abrams<br> 
   And they started coding FORTRAN just as fast as they could go<br> 
   And they punched up cards and ran them through the reader<br> 
   In Stanford, Palo Alto, on the seventy-ninety-oh.<br>
<font size=-3>&nbsp;</font></td></tr>

<tr><td colspan=2>Well a FORTRAN batch interpreter&rsquo;s a mighty awesome thing<br> 
But while it hums a pretty tune it doesn&rsquo;t really sing.<br> 
The thing that we all had to have to make our lives sublime<br> 
Was an interactive program that would let us share the time.<br>
<font size=-3>&nbsp;</font></td></tr>

<tr><td valign=top>Oh&#133;</td><td><p>
   They got Roger Moore and they got Dick Lathwell,<br>
   And they got Gene McDonnell with his carets and his sticks,<br> 
   And you should&rsquo;ve heard the uproar in the Hudson River valley<br>
   When they saved the first<tt> CLEANSPACE </tt>in 1966.<br>
<font size=-3>&nbsp;</font></td></tr>

<tr><td colspan=2>Well, when Al Rose saw this he took a little ride<br> 
In a big station wagon with a type ball by his side.<br> 
He did a lot of teaching and he had a lot of fun<br>
With an old, bent, beat-up 2741.<br>
<font size=-3>&nbsp;</font></td></tr>

<tr><td valign=top>Oh&#133;</td><td><p>
   It typed out stars and it typed out circles<br> 
   And it twisted and it wiggled just like a living thing.<br> 
   Al fed it a tape when he couldn&rsquo;t get a phone line<br>
   And it purred like a tiger with its trainer in the ring.<br>
<font size=-3>&nbsp;</font></td></tr>

<tr><td colspan=2>Now, there&rsquo;s much more to the story, but I just don&rsquo;t have the time <br>
(And I doubt you have the patience) for an even longer rhyme.<br>
So I&rsquo;m ending this first chapter of the tale I hope to tell<br>
Of how Iverson&rsquo;s notation blossomed into APL.<br>
<font size=-3>&nbsp;</font></td></tr>

<tr><td valign=top>So&#133;</td><td><p>
Keep writing nands when you&rsquo;re not writing neithers,<br> 
   And point with an arrow to the place you want to be,<br> 
   But don&rsquo;t forget to bless those early APL sources<br>
   Who preserved the little seedling that became an APL tree.<br>
<font size=-3>&nbsp;</font></td></tr>
</table>

<p>Dedicated to the pioneers of APL with respect and
affection by J.C.L. Guest</p>

<p align=right>&#151;
Mike Montalbano, 
<a target=APLQAx href="http://ed-thelen.org/comp-hist/APL-hist.html"><i>A Personal History of APL</i></a>,
Appendix A:<br>
APL Blossom Time, 1982-10
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="azz"></a>
However, all was not grim in those early years,
and one gets an insight into the sense of humor
which still abounds in the APL world.
The Great Inner Products Contest was announced
in the January 15, 1971 issue.
Readers were encouraged to submit their
&ldquo;favorite and most expressive use
of the inner product&rdquo;.
Among the so-called rules of the competition:</p>

<table><tr><td width=28 nowrap>&nbsp;</td><td>
<p>The entry<tt> +.× </tt>is not permitted except
by management and APL salesmen.</p>

<p>Explaining<tt> ×.+ </tt>places you in a special
category.</p>
</td></tr></table>

<p>Volume II, Number 6, March 17, 1971 reveals that
the APL community could meet challenge with characteristic
tongue-in-cheek:</p>

<table><tr><td width=28 nowrap>&nbsp;</td><td>
<p>The most interesting [entry] was from Roger Moore,
I.P. Sharp Associates, Toronto, who points out that
the &ldquo;new improved&rdquo; 5732-XM6 or 5736-XM6
executing<tt> ⍴B∧.=⍉B←500&nbsp;1⍴1 </tt>in a CLEAR WS
produces a register dump and a SYSTEM ERROR.
He suggested that a call to the QUEND macro 
be inserted immediately after card 5272 of
APLSVDOP in order to &ldquo;destroy&rdquo;
his interesting inner product entry. 
His Post Script that another call to the QUEND
macro after card 3712 in the same assembly fixes
the bug encountered when something like<tt> ∧/125000&nbsp;1⍴1 </tt>
is attempted.  (Way to go IBM!)</p>
</td></tr></table>

<p>Not all was fun and games, however.
Mike Jenkins introduced the new matrix inversion primitive,
domino, to the APL community in Volume III, Number 4,
February 10, 1972.  This landmark paper is often referred to,
and can still be used today to gain insight into this function.
And domino can be used in interesting and mysterious ways, too.
At the [APL82] meeting in Heidelberg, Timo Seppälä of TMT-Team Oy,
Helsinki, was asking people if they knew the shortest expression 
for computing the average of a vector.
(Think about it and then look for the answer at the end
of this introduction.)</p>

<p align=right>&#151;
Arlene Azzarello,
<a target=APLQAx href="http://www.jsoftware.com/papers/QQ_Early_Years.htm"><i>APL QUOTE-QUAD: The Early Years</i></a>, 
1982-11.
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="John_Gilmore"></a>
John Gilmore never finished high school and went to work for STSC.  
He later became the fifth employee of Sun Microsystems and founder of Cygnus Support.</p>

<p>John was well-known for being eccentric.  
He once rode to the STSC offices in Bethesda on a motorcycle, 
long hair streaming back from his head, wearing a skirt.  
At that time Bethesda was booming with construction and 
he elicited wolf whistles from the construction workers in the area as he went by.
<p align=right>&#151;
Bob Smith and Mary Stanley
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Dyalog1.0"></a>
At the APL83 conference in Washington DC, Dyalog APL Version 1.0 was presented
to an unsuspecting audience for the first time:
the first second-generation APL interpreter, implemented on Unix &mdash;
the operating system for the next generation of computers.
Dyalog APL was clearly ideally positioned 
for the emerging markets of the future!</p>

<p align=right>&#151;
Gitte Christensen, 
<a target=APLQAx href="http://archive.vector.org.uk/issues/d25.pdf"><i>Dyalog at 25</i></a>, 
2008-09, page 1
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Dyalog1.0a"></a>
<b>David Crossley:</b> Our schedule was to have a working interpreter
within twelve months, 
with the objective of presenting Dyalog APL to the world 
at the APL83 conference in Washington DC.
We monitored progress and revised our estimates at monthly intervals,
or sometimes on an <i>ad hoc</i> basis.
We met our objective and presented our product at Washington 
in April 1983, complete with user manuals,
on a number of Unix platforms kindly loaned by the manufacturers.</p>

<p>One rather large and heavy minicomputer arrived rather worse for wear,
having been dropped by the delivery people!
Our sponsors were not amused &mdash; and neither were we.</p>

<p>Not all the scheduled features were complete,
but certainly the essential features &mdash;
and a great deal more beside &mdash;
were achieved.</p>

<p><b>John Scholes:</b> Pete [Donnelly] used to organise the conference booths,
I think.  I spent most of the time at APL83 behind a curtain coding,
because we had problems with the compactor.
It&rsquo;s surprising Pete still has any hair left,
with the organising and borrowing of machines,
making sure it all arrived and had Unix on it.
It was horrific.</p>

<p align=right>&#151;
<a target=APLQAx href="http://archive.vector.org.uk/issues/d25.pdf"><i>Dyalog at 25</i></a>, 
2008-09, page 17
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="reteerts_ffoeg"></a>
<p><b>Peter Donnelly:</b> This was entirely my fault.
I was desperate to win a benchmark and 
at the time the Gould was the fastest Unix box on the market.
This might have been the port where the normal mechanism
to detect the end of a pipe (EOF) didn&rsquo;t work,
so Geoff ended the message sent to or from an AP
with the string<tt> reteerts ffoeg</tt>&nbsp;.</p>

<p><b>John Scholes:</b> I always had it in mind to phone Dyalog support
one April Fool&rsquo;s Day, with a heavy mid-European accent,
claiming to be Mr Reteerts Ffoeg.
&ldquo;I hev problem vis APs on Gould 3000;
ven send my name across the interface, APL hengs &#133&rdquo;</p>

<p>So the Gould took &mdash; I don&rsquo;t know how long the Gould port took;
it could have been months.  Typically they were &mdash;
Geoff may have a different view, but probably &mdash; they would be a month.
People would say: Have you got it on so-and-so?
And Geoff and I used to mutter in the background and 
suggest that we say if you want it, 
charge them twenty grand a port.
But, as I said, every two men and a dog with a garage used
to invent a Unix machine and someone would come along and say,
can you port your APL to it; if you port APL to this machine
we&rsquo;ll buy it.
We&rsquo;d spend a couple of months porting to it,
they&rsquo;d go out of business,
and we&rsquo;d cross it off and carry on.</p>

<p>Pete has a wonderful poster &mdash; 
there&rsquo;s a photograph somewhere &mdash;
of one of our booths at one of the exhibitions.
It says, Dyalog APL is now available on 
&mdash; machine after machine &mdash;
and none of these machines exist anymore.
They came and went.
Near the top was a &ldquo;Bleasdale&rdquo;,
named after the company&rsquo;s founder,
Eddie Bleasdale.</p>

<table align=center border=1 cellspacing=0 cellpadding=10><tr><td><table>
<tr><td>Amdahl</td> <td>&nbsp; &nbsp;</td> <td>Fortune</td> <td>&nbsp; &nbsp;</td> <td>Miniframe</td> <td>&nbsp; &nbsp;</td> <td>Sun</td></tr>
<tr><td>AT&amp;T</td> <td></td> <td>Gould</td> <td></td> <td>NCR Tower</td> <td></td> <td>Torch</td></tr>
<tr><td>Bleasdale</td> <td></td> <td>HP9000</td> <td></td> <td>Perkin-Elmer</td> <td></td> <td>Uniqx</td></tr>
<tr><td>Cadmus</td> <td></td> <td>ICL Perq</td> <td></td> <td>Pyramid</td> <td></td> <td>VAX</td></tr>
<tr><td>Diab DS90</td> <td></td> <td>MASCOMP</td> <td></td> <td>Ridge</td> <td></td> <td>Zilog</td></tr>
</table></td></tr></table>

<p><b>Geoff Streeter:</b> On the list of machines is the ICL Perq,
which was rebranded &ldquo;Three Rivers Perf&rdquo;.
It may not exist anymore, but it was the forerunner of the Apple Mac.
I remember being stunned at the interface,
complete with a tablet and &ldquo;puck&rdquo;.
These days, think Wacom for that sort of tool.
The Perq was strange because pointers to &ldquo;words&rdquo;
were 4 bytes but pointers to characters were 6 bytes.
That caused some fun.</p>

<p>The Gould port was not a long port.
It was, however, a stressful one. 
The only serious problem was the alignment-of-doubles issue.
Still, solving that paid enormous dividends later,
when every RISC chip turned out to have the same constraint.
Intel 686 (Ppro) and later also ran faster
with doubles aligned on 64-bit boundaries.</p>

<p align=right>&#151;
<a target=APLQAx href="http://archive.vector.org.uk/issues/d25.pdf"><i>Dyalog at 25</i></a>, 
2008-09, page 23-24
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="toothpaste"></a>
One time during the Brezhnev era,
Jim Ryan visited Moscow, but forgot
to bring toothpaste.  
He went down to the hotel front desk to buy some.  
After taking a rouble from Jim,
the desk clerk took out a tube of toothpaste.
But the rouble didn&rsquo;t buy you a tube of toothpaste.  
Instead, what you got was a squeeze from the tube, 
and you were supposed to have a toothbrush
with you to receive it. 
Since Jim did not have a toothbrush with him, 
the clerk proceeded to squeeze out toothpaste 
onto his finger.
<p align=right>&#151;
Eric Iverson
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Perlis-foreword"></a>APL is both a programming language and a system that supports
the writing, editing, using, saving and sharing of programs.
It is appropriate to think of them as one since all use of APL involves
both in an integrated way.</p>

<p>The two are interactive and mediated from terminals so that
personal involvement is continual and natural and &mdash;
for computer systems &mdash; relatively effortless.
As this books so admirably illustrates, one can &ldquo;sneak up&rdquo;
on the mastery of APL starting from an almost negligible investment
in language and system techniques.
At the other extreme, once one has mastered APL one has accomplished
something of permanent value and benefit:
programs of great value and interest can be written by one person
that in other languages would require a team!</p>

<p>The power of the APL language comes from its direct manipulation 
of aggregates of data in the form of arrays.
Everyone recognizes that computers excel when aggregates are manipulated,
where the descriptive details of a function do not grow with the size
of the aggregates being manipulated, 
and where one description suffices to cover a large population of aggregates.
Most other languages require their programs to penetrate these structures,
manipulate the components individually even in order to achieve 
a uniform effect.
It is not surprising that APL programs are significantly shorter
and more lucid than programs in most other languages.
In programming, clarity is not a consequence of discursiveness
or low information density in the program text.</p>

<p>Because of its power in aggregates and component manipulation,
APL has many more primitive functions than other languages.
Rather than adding to complexity, this multiplicity actually simplifies.
When a typical processing need arises, APL has a primitive function
that naturally performs it.
Learning the properties and uses of these primitives adds
but a little to the labor of APL mastery.
Shortly after encountering a function one sees how it
&ldquo;falls in&rdquo; with others already understood
and soon it begins to participate in program construction
in a natural way.</p>

<p>Programmers are surprised and pleased to discover that 
all APL primitive functions get used and that none are arcane
and of questionable utility.  
Even more, one soon acquires skill in combining these functions
artfully into phrases commonly called &ldquo;idioms&rdquo;,
that are frequently used and that extend every progrogrammer&rsquo;s
arsenal of programming constructions.
No other language supports such a rich development of idioms,
or even permits one to think idiomatically.</p>

<p>It is often said of APL that it provides too much choice 
for programmers &mdash;
there are too many ways to perform desired functions,
and among a group of APL programmers the same task will often
lead them to create quite different programs.
Consequently, reading APL programs is not trivial.
Considering that APL text is often one-third to one-fifth
the size of equivalent text in another language,
APL programs turn out to be as understandable 
as those in other languages.
The very richness of the set of APL functions that
makes its mastery so challenging makes the learning
of other languages much easier once APL is learned.</p>

<p>APL has its own operating system and the use
of APL is much the same (but alas not identical)
on all computers, from the smallest and cheapest
to the largest and most expensive.
Unlike BASIC, for which each computer has its own idiosyncratic version,
APL is a paragon of constancy between machines.</p>

<p>The workspace in which the user&rsquo;s APL traffic is organized
is a natural, simple and friendly environment in which to compute.
Its permanence is set by the individual user and can comfortably be
thought of as an immense personal blackboard.
Indeed, each user has a large number of such blackboards identified
by chosen names and between which the user can flit 
and transfer data and function.
Best of all, a workspace can be frozen, suspended in time,
saved and resumed in the future as though no time has passed.
A collection of workspaces forms a library
and the user has access to both public and private libraries
to which he has been granted access.</p>

<p>More idiosyncratic than the workspace, APL supports large files &mdash; 
but differently on most machines.
A recent development in APL is heterogeneous nested arrays.
Their value is unquestioned, but the permanence of their definition
and form within the APL language is still under study.
Like all living languages APL changes, but more slowly and carefully
than most others.
Unlike most other languages APL affects the way one thinks about programming:
familiarity with BASIC or PASCAL does not automatically translate over
to expertise in APL.</p>

<p>This is not a book on programming or even programming in APL.
Instead, it is a carefully organized journey through the APL language and system.
The journey is amazingly smooth and painless.
The book reads very well.
One does not have to be a computer specialist to understand the material.
The exercises are by and large elementary,
though a few difficult problems are scattered throughout.
No book on APL can present a complete specification of the APL
language and system and still be readable.
However, this book, in conjunction with an APL system,
provides the basic spectrum of insights into APL behavior:</p>

<table>
<tr><td valign=top nowrap>(a) &nbsp;</td><td>Read the material on issue X.</td></tr>
<tr><td valign=top>(b)</td> <td>Do a sample of the exercises.</td></tr>
<tr><td valign=top>(c)</td> <td>Execute some obvious instances of X at the terminal.</td></tr>
<tr><td valign=top>(d)</td> <td>Pose questions about X of the form
&ldquo;What if &#133; .&rdquo;
Execute them at the terminal.
Between the results obtained and a re-reading of the text
one will soon say, &ldquo;Ah, that is why this happened and I now
understand issue X.&rdquo;</td></tr>
</table>

<p>By the time one has read the book, 
the details of APL behavior will have become so engraved
in one&rsquo;s skull that one will think naturally at the programming level
but perform at the primitive function level.
One will have become an APL programmer.</p>

<p align=right>&#151;
Alan J. Perlis, Foreword to <i>APL: An Interactive Approach</i>,<br>
Third Edition, Wiley, 1983-08
<br>&nbsp;</p></td></tr>


<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="IPS1"></a>
Probably the most interesting case involved 
a large customer in Copenhagen, 
who approached the national phone company 
with a request that they needed local dial connections 
in all the locations where they had subsidiary companies, 
which included North America, the Far East, Australia, Japan 
and numerous locations in Europe. 
They needed such a network in order to remain competitive 
in their very competitive world. 
The phone company told them that such a network 
was currently beyond their capability, 
but could well be available at some time in the future. 
So with only a minor push from the Danish government, 
the phone company agreed to the temporary installation 
of our full software system including communications, 
pending the availability of a locally-provided solution.</p>

<p>As a face saver the national PTT would like to be paid 
for all traffic in each direction on the line 
between the customer&rsquo;s site and our office in Copenhagen. 
We agreed to that, and since the PTT had no means of measuring 
that traffic, we offered to do it for them and 
provide the monthly information that they needed in order to bill us. 
We did that, but no invoice was ever received.</p>

<p align=right>&#151;
Ian Sharp, <a target=APLQAx href="http://rogerdmoore.ca/INF/EIPSPTTa.html"><i>I.P. Sharp Associates 
and the Telephone Monopolies</i></a>, 2005
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="JKT_email_file"></a>
Joey Tuttle keeps meticulous records of his e-mails
and has a way of quickly and accurately finding
old messages.  His reputation
in this regard was such that
sometimes Ian Sharp would ask Joey for copies of
old messages in which Joey was either the sender
or a recipient.
Precise dates in this collection are made possible mostly 
because Joey was able to retrieve the relevant messages.
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="DHS"></a>
David Steinbrook and I became friends while he was in Philadelphia,
and I was running the IPSA Miami branch. 
Aviation business took me to PHL several times. 
Anyway, for a reason I forget, David came to Miami. 
As the genial host that I was, I took him to the beach. 
He said he had never seen the ocean before.
That blew me away. He was a genuine individual with musical
skills beyond normal comprehension.</p>

<p align=right>&#151;
Brian Oliver
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Selleck"></a>
Karen Thompson (Cynthia Rhodes): How long you say you&rsquo;ve been doing this?</p>

<p>Jack Ramsay (Tom Selleck): I just sort of fell into it by accident. 
I kind of liked it, so I took some night courses in robotics, APL.  
All of a sudden, I just seemed to know more about it than anybody else.</p>

<p align=right>&#151;
<a target=APLQAx href="http://www.springfieldspringfield.co.uk/movie_script.php?movie=runaway"><i>Runaway</i></a> (film), 1984
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="ravel"></a>
Ken visited us now and again and I remember once I was struggling 
with translating his <i>An Introduction to APL</i> into Danish. 
I told Ken that I was completely unable to come up 
with a good translation for the APL function <i>ravel</i>, 
which had previously suffered the prosaic name &ldquo;make list of&rdquo; in Danish. 
[He said,] &ldquo;You should use the word you use 
when you have knitted something and you then undo the knitting &mdash; 
when you are removing the structure and are left with the thread.&rdquo; 
Suddenly the term <i>ravel</i> made sense to me in a completely different way.

<p align=right>&#151;
Gitte Christensen, 
<a target=APLQAx href="http://www.vector.org.uk/archive/v223/gitte222.htm"><i>Vector</i></a>, 2006-08
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="lambda"></a>
Ken named APL/J primitives carefully, 
resulting in names that are apt, short, and mnemonic, for example,
<i>ceiling</i>, <i>floor</i>, <i>ravel</i>, <i>nub</i>.</p>

<p>During a discussion on Latin squares and Greco-Latin squares,
Ken wondered out loud why they were called
&ldquo;Greco-Latin squares&rdquo;.  
I suggested that it was because
they used Greek and Latin letters 
(and &ldquo;Latin squares&rdquo; because they used Latin letters), 
but that it was only my guess.  
Ken responded in an exasperated voice,
&ldquo;I bet you are right!  That makes as much sense
as the name &lsquo;lambda calculus&rsquo;!&rdquo;
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="mnemonic"></a>
<i>Brooker</i>: It is not obvious to me that these two symbols for 
<font size=-1>FLOOR</font> and <font size=-1>CEILING</font> 
have a great deal of mnemonic value.</p>

<p><i>Iverson</i>: Yes, but once you have read it, you can remember it.</p>

<p align=right>&#151;
Kenneth E. Iverson, 
<a target=APLQAx href="http://www.jsoftware.com/papers/FPL.htm"><i>Formalism 
in Programming Languages</i></a>, <br>
Discussion, 1964-02
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Knuth"></a>
If <i>x</i> is any real number, we write</p>

<table>
<tr><td rowspan=2>&nbsp; &nbsp;</td>
 <td>&lfloor;<i>x</i>&rfloor;</td> <td>=</td> 
 <td>the greatest integer less than or equal to <i>x</i> 
  (the &ldquo;floor&rdquo; of <i>x</i>);</td></tr>
<tr><td>&lceil;<i>x</i>&rceil;</td> <td>=</td> 
 <td>the least integer greater than or equal to <i>x</i> 
 (the &ldquo;ceiling&rdquo; of <i>x</i>).</td></tr>
</table>

<p>The notation [<i>x</i>] is often used elsewhere
for one or the other of these functions, 
usually the former; the notations above,
which are due to K.E. Iverson,
are more useful, because both functions occur
about equally often in practice.
The function &lfloor;<i>x</i>&rfloor; 
is sometimes called the <i>entier</i> function,
from the French word for &ldquo;integer&rdquo;.</p>

<p align=right>&#151;
Donald E. Knuth, 
<i>The Art of Computer Programming</i>,<br>
Volume 1, Section 1.2.4, 1968
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="GKP"></a>
We start by covering the floor (greatest integer) and 
ceiling (least integer) functions, which are defined
for all real <i>x</i> as follows:</p>

<table>
<tr><td rowspan=2>&nbsp; &nbsp;</td>
 <td>&lfloor;<i>x</i>&rfloor;</td> <td>=</td> 
 <td>the greatest integer less than or equal to <i>x</i>;</td>
 <td rowspan=2>&nbsp; &nbsp; &nbsp; &nbsp; (3.1)</td></tr>
<tr><td>&lceil;<i>x</i>&rceil;</td> <td>=</td> 
 <td>the least integer greater than or equal to <i>x</i>.</td></tr>
</table>

<p>Kenneth E. Iverson introduced this notation, 
as well as the names &ldquo;floor&rdquo; and &ldquo;ceiling&rdquo;,
early in the 1960s 
<nobr>[<a target=APLQAx href="http://www.jsoftware.com/papers/APL.htm"><i>A Programming Language</i></a>, page 12].</nobr>
He found that typesetters could handle the symbols
by shaving the tops and bottoms off of &lsquo;[&rsquo; and &lsquo;]&rsquo;.
His notation has become sufficiently popular
that floor and ceiling brackets can now be used in a technical paper
without an explanation of what they mean.
Until recently, people had most often been writing &lsquo;[<i>x</i>]&rsquo;
for the greatest integer &le; <i>x</i>, 
without a good equivalent for the least integer function.
Some authors had even tried to use &lsquo;]<i>x</i>[&rsquo;
&mdash; with a predictable lack of success.</p>

<p align=right>&#151;
Graham, Knuth, and Patashnik, <i>Concrete Mathematics</i>,<br>
Section 3.1, 1989
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="closing_symbol"></a>
Another notational step that was taken at that time, 
and this has to do with cleaning up the syntax, 
was the dropping of the closing symbol for absolute value, 
floor, and ceiling. 
I have observed that in certain ivory towers of pure mathematics 
they have adopted the floor and ceiling symbols 
still with the pair about them, 
and I estimate that in roughly another decade 
they will get around to dropping the second.</p>

<p align=right>&#151;
Adin Falkoff,
<a target=APLQAx href="http://www.jsoftware.com/papers/apl360history.htm"><i>APL</i>\360 <i>History</i></a>, 1969-07-11
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="bubble_sort"></a>
A <a target=APLQAx href="http://users.cs.duke.edu/~ola/bubble/bubble.html">search of the literature</a>
found no mention of the term &ldquo;bubble sort&rdquo;
earlier than <a target=APLQAx href="http://www.jsoftware.com/papers/APL.htm"><i>A Programming Language</i></a> (1962).
I can believe that Iverson invented the name.  
Page 217 of <i>A Programming Language</i> says:</p>

<blockquote>The result is to bubble each item upward in the sequence until it encounters an item 
with a smaller (or equal) key and then to leave it and continue bubbling the new smaller item.  
In particular, the smallest item is bubbled to the top.
</blockquote>

<p>It is consistent with his use of previously non-technical but descriptive, 
picturesque, and mnemonic terms in technical subjects.  
&ldquo;Floor&rdquo; and &ldquo;ceiling&rdquo; from the same period 
are other examples which come to mind.
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="pike"></a>
The three columns of Table 1 provide the APL symbol,
a name for the symbol, and a transliteration 
scheme for use with the ASCII character set ...</p>

<table>
<tr><td><tt>↑</tt>&nbsp;</td><td>&nbsp;</td><td>Pike </td><td>&nbsp;</td><td>&#133;</td></tr>
<tr><td><tt>↓</tt>&nbsp;</td><td>&nbsp;</td><td>Spike</td></tr>
<tr><td>&#133;</td></tr>
<tr><td><tt>⍋</tt>&nbsp;</td><td>&nbsp;</td><td>Pine </td></tr>
<tr><td><tt>⍒</tt>&nbsp;</td><td>&nbsp;</td><td>Spine</td></tr>
<tr><td>&#133;</td></tr>
</table>

<p align=right>&#151;
Kenneth E. Iverson, 
<a target=APLQAx href="http://www.jsoftware.com/papers/APLDictionary.htm"><i>A Dictionary of APL</i></a>, 
1987-09 
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="sqrt"></a>
There is no reason why the square root function
couldn&rsquo;t be part of APL. 
In fact, when I designed the APL printer trains 
for the IBM 1403 printer, 
I included the radical symbol<tt> &radic; </tt>
on the train, 
in the expectation that one day 
this function would be added to APL. 
It would be a scalar function. 
In its monadic use<tt> &radic;⍵ </tt>would give 
the square root of<tt> ⍵</tt>&nbsp;.<tt> </tt>
In its dyadic use<tt> ⍺&radic;⍵ </tt>
would give the<tt> ⍺</tt>-th root of<tt> ⍵</tt>&nbsp;.<tt> </tt>
For example,<tt> 3&radic;⍵ </tt>
would give the cube root of<tt> ⍵</tt>&nbsp;.<tt> </tt>
Anyone using APL informally 
(for example, in writing a mathematics text) 
could use this symbol.</p>

<p align=right>&#151;
Eugene McDonnell, 
<a target=APLQAx href="http://www.jsoftware.com/papers/eem/sqrt.htm"><i>A Perfect Square Root Routine</i></a>, 
1986-07 
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="APL85_puzzle"></a>
<a target=APLQAx href="https://www.jsoftware.com/papers/APL85jigsaw.htm">
<img src="https://www.jsoftware.com/papers/APLimg/APL85jigsaw.jpg" width=200 height=268 align=left hspace=8></img></a>
The &ldquo;goodies bag&rdquo; for the APL85 conference
in Seattle included a jigsaw puzzle of about 1000 pieces.
The pattern (composed by Paul Berry) 
consisted of APL error messages in various
natural languages and <nobr>&ldquo;APL &rsquo;85&rdquo;</nobr> 
rendered in large yellow strokes, interpersed in a
random matrix of APL characters.
As is customary, the pattern on the puzzle itself
was reproduced on the box.
I did not open this trophy for a long time,
and when I rejoined IPSA in 1986 I left it
on a table in my office, unopened.</p>

<p>Roger Moore was in the adjacent office,
and he&rsquo;d occasionally drop by to 
discuss the network shared variables work he was doing with 
my office mate Richard Potyok.
On such occasions he would (I later realized)
look longingly at the unopened puzzle,
but he was too gentlemanly to
say anything.</p>

<p>On Friday 1986-06-29 I finally opened the puzzle
and started to work on it.  Roger soon noticed
and immediately pitched in.
We made short work of the parts with the
APL error messages and of course 
the big &ldquo;APL &rsquo;85&rdquo; was pretty easy.
The remaining random APL characters proved more challenging.</p>

<p>After a while Roger derived a better method 
than random search:
first, sort the remaining puzzle pieces
according to the characters around the 
domino<tt> </tt>(<tt>⌹</tt>)<tt> </tt>character.
(He printed out<tt> ⎕av </tt>to use in the sorting.)
Then, find a domino character on the box,
look at the characters around it,
and locate the correct puzzle piece in the
sorted piles of puzzle pieces.
Why<tt> ⌹</tt>&nbsp;?<tt> </tt>It is the character
with &ldquo;the most ink&rdquo;, such that it is
easier to recognize a fragment of that character
on a puzzle piece than any other character.
Using this method, the puzzle was almost done by 
Saturday evening and finished soon thereafter.
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="hobo"></a>
The new receptionist at IPSA headquarters in downtown Toronto
reported with alarm that &ldquo;a hobo had just walked into the office&rdquo;.
That&rsquo;s not a hobo, we reassured her, 
that&rsquo;s our vice president.</p>

<p align=right>&#151;
Cam Linton
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="in_charge_of"></a>
Roger Moore was a vice president of I.P. Sharp Associates.  
What were Roger&rsquo;s responsibilities as vice president?  
I&rsquo;ve heard it said by different people that 
&ldquo;Roger Moore is the vice president in charge of Roger Moore&rdquo;.
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="shirt_and_tie"></a>
In the 1990s I used to ride my bike on the Martin Goodman Trail or 
the Sunnyside Boardwalk on the shores of Lake Ontario.  
Sometimes I would see Roger Moore on the trail, also on a bike.  
You can tell it&rsquo;s Roger from a ways off 
because only he would be wearing a short-sleeve white shirt and tie.</p>

<p>More recently (2016), Roger has been 
<a target=APLQAx href="http://web.archive.org/web/20180430021543/http://bpi.1e6.com/files/RDMplaysPokeMon.mp4">seen playing <i>Pokémon Go</i></a>
while wearing shirt and tie.
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="log"></a>
Reasons for Liking</b><tt> <font size=+1>⍟</font></tt></p>

<table>
<tr><td valign=top nowrap>&#149; &nbsp;</td><td>It&rsquo;s kind of cute, possessing a radial symmetry.
 </td></tr>

<tr><td valign=top>&#149;</td><td>It denotes a function 
for which conventional mathematical notation 
<a target=APLQAx href="http://people.math.sfu.ca/~cbm/aands/page_67.htm">[1]</a>
does not have a good symbol:
<table>
<tr><td>&nbsp; &nbsp;</td><td><tt>⍟y</tt></td> <td><tt>&nbsp; ←→ &nbsp;</tt></td><td>ln <i>y</i>&nbsp; 
 or &nbsp;log <i>y</i></td></tr>
<tr><td></td><td><tt>x⍟y</tt></td><td><tt>&nbsp; ←→ &nbsp;</tt></td><td>log<sub><i>x&nbsp;</i></sub><i>y</i></td></tr>
</table>
 </td></tr>

<tr><td valign=top>&#149;</td><td>It alludes 
to<tt> 0=1+*○0j1</tt>&nbsp;,<tt> </tt>
the most beautiful equation in all of mathematics
<a target=APLQAx href="http://www.jsoftware.com/jwiki/Essays/Euler's_Identity">[2]</a>, 
relating in one short phrase the fundamental quantities 0, 1, <i>e</i>, <i>&pi;</i>, 
and<tt> 0j1 </tt>
and the basic operations plus, times, and exponentiation.
 </td></tr>

<tr><td valign=top>&#149;</td><td>It is a visual pun 
&mdash; the symbol looks like the cross section of a felled tree, i.e. a log
<a target=APLQAx href="http://www.jsoftware.com/papers/eem/storyofo.htm">[3]</a>.
 </td></tr>
</table>

<p align=right>&#151;
Roger Hui, 
<a target=APLQAx href="http://archive.vector.org.uk/art10501040"><i>My
Favorite APL Symbol</i></a>, 
2013 
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="2problems"></a>
The two hardest problems in programming are naming things, garbage collection, and off-by-one errors.
</p>

<p align=right>&#151;
Raul Miller, 
<a target=APLQAx href="http://www.jsoftware.com/pipermail/programming/2013-January/031151.html"><i>J Forum message</i></a>, 
2013-01-21 
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="10kinds"></a>
There are 10 kinds of programmers, those who understand binary and those who don&rsquo;t.
</p>

<p align=right>&#151;
John Scholes 
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="I-APL"></a><b>Chapter 1: History and aims of the I-APL Project</b></p>

<p>At the International APL conference in Manchester in July 1986
an idea of Paul Chapman&rsquo;s was taken up by a group of enthusiasts.
The idea was that it would be possible to write a full ISO compatible
APL interpreter in 25K which would run on school and home computers.
The I-APL project was founded with a committee of five:
Ed Cherlin, Editor of APL Market News, and Anthony Camacho,
then secretary of the APL Association, were to be joint chairmen;
Norman Thomson and Howard Peelle were to be education officers
and David Ziemann was the technical expert.
Fundraising began that summer and by October there was
sufficient to authorise Paul to begin work.</p>

<p><b>Project Aims</b></p>

<p>The project aims were to write and issue and APL interpreter
which would run on as many school and home computers as possible, 
and be available in any part of the world.
There would be no charge for the software but there would
have to be some charge for the medium and for copying 
and also for the books which would go with it.
The project and its supporters believe that if APL is to grow
it must be made available in schools.
Experience has taught us that efforts to interest
school teachers cease to be effective as soon as the teachers
discover that APL would be very expensive for them to try.
By removing the cost barrier it was hoped that
many people could be persuaded to try APL
and that many APLers would be encouraged to introduce
APL to teachers.
The project has always seen the production of the interpreter
as the first step and probably not the hardest step
in the difficult job of getting APL 
into widespread educational use.</p>

<p><b>Progress</b></p>

<p>Paul Chapman finished the interpreter on 4 July 1987 and
debugging, optimisation, improvements and customisation
to the PC occupied the next six months.
Version 1.0 was issued in January 1988 and we sold out of manuals
in August 1988.
Version 1.1 was completed in October 1988 and cures all the
V.1.0 bugs reported to us as well as adding some new facilities.
The most important of the new features is the option
to send output to the screen through the BIOS;
this allows PC clones whose display is not 
hardware-compatible to scroll the display correctly,
though slower than the standard version.</p>

<p>The job of porting I-APL requires intimate knowledge of the operating system
and reasonable competence at producing machine code programs 
for the chosen machine.
What a porter has to do is to write an interpreter for the specially invented
language DE in which the APL interpreter is written,
and link it to the operating system of the machine
for input from keyboard, for output to screen, printer, etc.
and to give at least<tt> )SAVE </tt>and<tt> )LOAD </tt>
access to the filing system for workspaces.</p>

<p align=right>&#151;
Anthony Camacho, Paul Chapman, and David Ziemann,<br>
<i>I-APL Instruction Manual</i>, 1989
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="DE"></a>
DE &mdash; Paul called it &ldquo;development environment&rdquo; and 
said he&rsquo;d originally called it  &ldquo;development environment language&rdquo; 
but changed the name when he found he was unaccountably losing files!</p>

<p align=right>&#151;
Anthony Camacho, <a target=APLQAx href="http://jsoftware.com/pipermail/general/2013-December/035673.html">J Forum message</a>, 2013-12-05
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="smoking"></a>
In early 1988 a new Toronto city by-law
required that every company establish a smoking policy,
consisting of designated areas on the company premises
where smoking is permitted.  (And if no smoking policy
can be agreed upon, then no smoking is permitted
on the premises.)
After much discussion at IPSA,
the designated smoking areas were some common rooms
and Ian Sharp&rsquo;s office.
When Ian heard of this, he bristled at the idea of
his office being an exception
and asked to have it removed from the list.</p>

<p align=right>&#151;
Roger Hui and Joey Tuttle
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="guard"></a>
In the 1980s the IPSA head office was located 
in the Exchange Tower in downtown Toronto.  
Security was tight since the Toronto Stock Exchange 
was in the same building.  
At night and during weekends, 
you had to show a security badge to the guard and sign in to gain entry.  
One guard became noted for refusing entry to Paul Reichmann, 
the real-estate magnate, 
because he did not have a security badge.  
I spoke to the guard about it, 
and he told me that he was quietly 
told to not do that any more WRT Reichmann.</p>

<p>I guess in this regard 
Reichmann is no Ian Sharp because 
the quietly told instruction
was not countermanded.  
I know this because I witnessed Reichmann gaining entry 
with just a smile at this same guard.
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="roses"></a>
A party was held at Dick Lathwell&rsquo;s house to
celebrate Agness Lathwell&rsquo;s birthday.  During the party 
there was a knock at the door with a delivery
of a dozen roses.  Everyone assumed that
they were for Agness, but it developed that the flowers
were from Hal Carim to Marie Vilmansen, on 
the occasion of the first anniversary of their <i>divorce</i>.
The gesture immediately put every man in the party in
jeopardy with their wife/partner/girlfriend.</p>

<p align=right>&#151;
Joey Tuttle
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="aplus"></a>
A+ is a descendant of the language &ldquo;A&rdquo; 
created in 1988 by Arthur Whitney at Morgan Stanley. 
At the time, various departments had a significant investment 
in APL applications and talent, 
APL being a language well-suited to the manipulation of large arrays of numbers. 
As technology was moving from the mainframe to distributed systems, 
there was a search for a suitable APL implementation to run on SunOS, 
the distributed platform of the period. 
Not happy with the systems evaluated, Arthur, 
motivated by management, wrote one geared to the business: 
large capacity, high performance. 
He was joined in his efforts as the language took on graphics, 
systems&rsquo; interfaces, utility support, 
and an ever-widening user community. 
Over the course of the next few years, 
as the business began to reap tangible value from the efforts, 
the pieces were shaped into a consistent whole and became A+. 
The &ldquo;+&rdquo; referred to the electric graphical user interface. 
An A+ development group was formally created in 1992.</p>

<p>A+ soon became the language of choice for development 
of Fixed Income applications. 
It offered familiarity to the APL programmers, 
the advantages of an interpreter in a fast-paced development arena 
and admirable floating-point performance. 
A significant driver was that many of Morgan Stanley&rsquo;s 
best and brightest were the developers and supporters of the language. 
Through their practical application of technical values, 
they instilled fervent enthusiasm in talented programmers, 
regardless of their programming language backgrounds.</p>

<p align=right>&#151; Anon, 
<a target=APLQAx href="http://www.aplusdev.org/About/index.html"><i>The History of A+</i></a>
<br>&nbsp;</p></td></tr>


<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<a name="KEInATW"></a>

<table>
<tr><td valign=top><p>This photo is one of my favorites ever, that I took 
when I was working in NY with Arthur at Morgan Stanley in the late 1980&rsquo;s.  
I am fairly certain this unscheduled meet up happened at APL89 in NY.</p>

<p>The photo was spontaneous as the three of us were talking 
and I just stepped back and said &ldquo;now smile guys&rdquo; 
and looked &ldquo;around the camera&rdquo; 
and clowning around so they weren&rsquo;t ready for it, 
then just snapped &#133; it lined up beautifully.</p>
<p align=right>&#151; Rob Hodgkinson</a>
<br>&nbsp;</p></td>

<td>&nbsp;</td>

<td><a target=APLQAx href="https://www.jsoftware.com/papers/APL_KEInATW.htm"><img src="https://www.jsoftware.com/papers/APLimg/KEInATW.jpg" width=250 height=185></a>
</td></tr>
</table>
<br>&nbsp;</td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Incunabulum"></a>
One summer weekend in 1989, Arthur Whitney visited Ken Iverson 
at Kiln Farm and produced&mdash;on one page and in one afternoon&mdash;an 
interpreter fragment on the AT&amp;T 3B1 computer. 
I studied this interpreter for about a week for its organization 
and programming style; and on Sunday, August 27, 1989, 
at about four o&rsquo;clock in the afternoon, wrote the first line of code 
that became the implementation described in this document.</p>

<p>Arthur&rsquo;s one-page interpreter fragment is as follows: &#133;</p>

<p align=right>&#151;
Roger Hui, <i>An Implementation of J</i>,
<a target=APLQAx href="http://www.jsoftware.com/jwiki/Essays/Incunabulum">Appendix A. 
Incunabulum</a>,<br>
1992-01-27
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="18pt"></a>
Years later, talking about &ldquo;the one-page thing&rdquo;,
Arthur Whitney quipped that he still wanted
to do it in one page, but using <i>n</i>-point font.
(The value of <i>n</i> increases with each retelling of the story.)
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="J"></a>
Why &ldquo;J&rdquo;? It is easy to type.</p>

<p align=right>&#151;
Roger Hui, 
<a target=APLQAx href="http://www.jsoftware.com/jwiki/Doc/An%20Implementation%20of%20J"><i>An Implementation of J</i></a>, 
Preface, 1992-01-27
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="step_above"></a>
J&rsquo;s.  A step up from the ordinary.</p>

<p align=right>&#151;
<i>The New Yorker</i>, 1990s 
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="dialect"></a>
The <a target=APLQAx href="http://www.jsoftware.com/help/dictionary/dict.htm"><i>J dictionary</i></a>
begins thus: &ldquo;J is a dialect of APL, a formal imperative language.&rdquo;
In talking about the difference between a language
and a dialect, Ken often cited the
<a target=APLQAx href="http://en.wikipedia.org/wiki/A_language_is_a_dialect_with_an_army_and_navy">aphorism</a>
that a language is a dialect with an army and a navy</a>.
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="wallet"></a>
On 1993-03-17, I was working for Morgan Stanley
in New York City.  On that day I was scheduled to fly to London,
so I took a taxi into work with my luggage from Larchmont to the MS
offices in mid-town Manhattan on 49th Street.  I arrived
at work at around 0700.  At around 0800 I got up from
my desk to get a snack from the canteen.  As I did,
I realized that I didn&rsquo;t have my wallet.</p>

<p>Wracking my brain for what could have happened,
I realized that I might have dropped my wallet as
I got out of the taxi after paying the driver.  
I telephoned the taxi company on the chance that they may have it.  
Then I did a naive thing, a Canadian kind of thing.  
I went downstairs to the street to look for it.</p>

<p>And there it was!  Just sitting there curbside,
plain as day, in mid-town Manhattan for about an hour.
And it was full of cash too, on account of my going to
London later that day.</p>

<p>You don&rsquo;t have to be Irish to be lucky on St. Patrick&rsquo;s Day.
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="taxi"></a>
One time, on returning to New York from London (perhaps the same trip that began so auspiciously as recounted in the previous anecdote), I took a cab ride from JFK to mid-town Manhattan which cost $90.  How so?</p>

<p>As I exited Customs and Immigration and headed towards the long line-up for taxis, I was met by a person holding a clipboard saying, come this way sir.  I went 
that way and met a driver in a nice suit who reached for my suitcase and directed me to a nice car 
parked nearby, no lining up required.  
Shortly after another passenger joined me in the car,
and the car was underway.  Before it left the terminal complex I realized 
that I made a mistake, but it was too late.  
The car went through some industrial areas not
normally on the way to mid-town Manhattan, but I did reach my destination 
without incident.  Of course by that time the driver can charge whatever 
he liked.  He liked $90.</p>

<p>Viewed from a couple of decades removed, I can appreciate the scam for its expert exploitation of psychology: The mark had just been on a long flight, then conditioned by following instructions &mdash; do this, go that way, show your papers, etc.  The subtle intimidation by driving through an industrial area was a deft touch.</p>

<p>A few weeks later, 
I traveled to San Francisco on a speaking gig with the Bay Area APL Group.  
There, I took a city bus from SFO to Palo Alto.  
It was an enjoyable ride in brilliant sunshine along El Camino Real, stopping at California Avenue which was only a short walk 
from where I was staying at the Hotel California.  
The fare was $1.80, 
something like that.
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="computer_science"></a>
When I mentioned &ldquo;computer science&rdquo;, Ken said,
&ldquo;Any field of study that has the word &lsquo;science&rsquo;
in it probably isn&rsquo;t.&rdquo;  
This is how mathematicians make friends.</p>

<p align=right>&#151;
Arthur Whitney, 
<a target=APLQAx href="http://www.vector.org.uk/archive/v223/whitney.htm"><i>Vector</i></a>, 2006-08
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Alberta"></a>
It&rsquo;s well-known that a lot of programming languages
come from Alberta.  Probably less well-known is
the fact that good languages, like APL, come from
northern Alberta.  Java is from Calgary.</p>

<p align=right>&#151;
Arthur Whitney, 
<a target=APLQAx href="http://www.vector.org.uk/archive/v223/whitney.htm"><i>Vector</i></a>, 2006-08
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="big_gun"></a>
In the autumn of 1996, Jim Goff took me for dinner 
to a tiny (only six or seven tables in a small room)
Thai restaurant in Philadelphia. 
After dinner, I entertained Jim with a description of the &ldquo;Deuce&rdquo; machine, 
a development of Alan Turing&rsquo;s &ldquo;ACE&rdquo;.</p>

<p>I described how programming consisted of arranging instructions 
around and around the &ldquo;mercury delay lines&rdquo; memory, 
interleaved to give the last instruction time 
to execute before the next one passed under the read-head. 
I probably used my arms to show this arrangement.</p>

<p>If you didn&rsquo;t leave enough of a gap between instructions, 
the processor would have to wait for the next one to 
do a complete lap before it could be executed. 
I probably gesticulated while explaining this.</p>

<p>The machine sported a large dial 
(which I probably illustrated with my hands) 
showing the &ldquo;efficiency&rdquo; of the running &ldquo;programme&rdquo;. 
100% efficient meant that the processor was never kept waiting 
for the next instruction. 
I made a joke that it would be useful for modern computers 
to have an efficiency dial! 
I probably laughed at my own joke.</p>

<p>I was about to explain Deuce&rsquo;s beautiful and elegant boot sequence 
when I detected flagging interest from my audience.
(I&rsquo;m sensitive to this sort of thing.)
Looking up, I noticed that the woman at the next table seemed 
to be somewhat distressed. 
She said, &ldquo;Do you know we&rsquo;ve just been robbed? 
Didn&rsquo;t you see the man with the gun?&rdquo;</p>

<p>Then the tiny restaurant filled with large policemen: 
&ldquo;Was it a big gun or a small gun?&rdquo;</p>

<p>Apparently, the robber had gone from table to table 
demanding cash and jewelry. 
Perhaps he was perplexed by the strange, crazy man,
talking gibberish while waving his arms around 
and giggling, and so left us alone.</p>

<p>Postscript. I told this yarn to a group of APL implementers 
at one of the Minnowbrook conferences. 
At the end of the story, after a thoughtful pause, 
someone responded: &ldquo;I started programming on a 
three-operand addressing machine.&rdquo;</p>

<p align=right>&#151;
John Scholes
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="warranty"></a>
<b>Lifetime Warranty</b></p>

As a present or former student, you have the right, always and forever, 
to come and see me, to call me, to e-mail me, to talk to me, 
to ask for letters of recommendation, to ask questions &mdash; 
about your courses, your degree, your future schooling, your career, your life; 
I will never be &ldquo;too busy&rdquo; to see you.</p>

<p><b>The fine print</b>

<table>
<tr><td valign=top>&#149;&nbsp;</td><td>
You may always come and see me. 
However, this may involve making an appointment to be sure I&rsquo;m available.</td></tr>
<tr><td valign=top>&#149;&nbsp;</td><td>
You may ask anything. 
However, I may not be able to give you the answer or I may not know the answer. 
If so, I will tell you.</td></tr>
<tr><td valign=top>&#149;&nbsp;</td><td>
Once an appointment has started, you have priority over other students. 
For example, if we have an appointment, 
and another student drops by, your appointment takes priority.</td></tr>
</table>

<p align=right>&#151;
Lee Dickey, <a target=APLQAx href="http://www.math.uwaterloo.ca/~ljdickey/courses/warranty.html"><i>Lifetime Warranty</i></a>
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Jobs"></a>
After a satisfying Thanksgiving dinner Eugene McDonnell and his family 
went for a walk around the neighborhood.  
As they passed by the Jobs residence Eugene 
caught a glimpse through a window of people enjoying dinner around a table.  
But Steve Jobs can be seen in another room, tapping at a computer.  
Eugene thought to himself, &ldquo;Isn&rsquo;t that too bad!  
Can&rsquo;t even enjoy a Thanksgiving dinner.&rdquo;</p>

<p>The following week came the Pixar IPO, 
which sold 6.9 million shares at $22/share.
Steve Jobs&rsquo; 80% holding of Pixar stock 
was valued at $1.1 billion after the IPO.
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="New_Yorker"></a>
How do you get to X from New York?  You head west
until you smell it, then head south until you
step on it.</p>

<p align=right>&#151;
Eugene McDonnell, New York born and raised
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="dinner"></a>
In January 1999, Ken and Jean Iverson visited
Eugene McDonnell in Palo Alto.  
Eugene held a dinner party in their honor on the thirteenth.
In attendance were Eugene and Jeanne McDonnell,
Ken and Jean Iverson, Arthur Whitney and Janet Lustgarten, 
Jim and Karen Brown, Paul and Sachiko Berry, 
Charles Brenner and Sarita Berry,
Larry and Beverly Breed, Harry Saal, 
Ken&rsquo;s nephew Derrick Iverson
and his wife and new baby, 
David Steinbrook, Joel Kaplan, Dick Dunbar, 
Joey Tuttle (who flew in from Boston), and one more.</p>

<p>One of the events of the party was to have
been a telephone call from Kyosuke Saigusa in Japan.
During the party, Eugene went to make the
phone call to Japan as prearranged.  He came back
a few minutes later, perplexed, saying that
he only managed to reach Mrs. Saigusa, who said that
Mr. Saigusa was not available.</p>

<p>At that point Saigusa-san walked in through the front door,
explaining that he was not available by phone from Japan
because he was there in Palo Alto.</p>

<p align=right>&#151;
Joey Tuttle
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="just_as_well"></a>
Years ago, I (was) volunteered to give an impromptu 
&ldquo;what&rsquo;s APL&rdquo; elevator pitch to some Microsoft engineers. 
I stood up and started:</p>
<p>&ldquo;Um, APL&rsquo;s only data type is the array &#133;&rdquo;</p>

<p>&ldquo;Er, APL&rsquo;s primitive functions take arrays as arguments &#133;&rdquo;</p>

<p>Someone in the audience piped up: &ldquo;That&rsquo;s just as well, then.&rdquo;</p>

<p align=right>&#151;
John Scholes
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="array"></a>
In Scranton in 1999 during one of the sessions I was sitting next to Ken,
and he leaned over and said to me&mdash;in his impish way&mdash;John, 
what is an array? 
Now I knew better than to rush into an answer to Ken. 
I guess I&rsquo;m still working on my answers to that question.</p>

<p align=right>&#151;
John Scholes, 
<a target=APLQAx href="http://www.vector.org.uk/archive/v223/gitte222.htm"><i>Vector</i></a>, 2006-08
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="array_mapping"></a>
My attempt:  An <i>array</i> is a function from a set of indices 
to numbers, characters, &#133;<br>
A rank-<i>n</i> array is one whose function <i>f</i> applies 
to <i>n</i>-tuples of non-negative integers. <br>
A rank-<i>n</i> array is <i>rectangular</i> if
there exist non-negative integer maxima 
<nobr>(<b><i>s</i></b><sub>0</sub>, <b><i>s</i></b><sub>1</sub>, &#133;, <b><i>s</i></b><sub><i>n</i>-1</sub>)</nobr> 
such that 
<nobr><i>f</i>(<b><i>i</i></b><sub>0</sub>, <b><i>i</i></b><sub>1</sub>, &#133;, <b><i>i</i></b><sub><i>n</i>-1</sub>)</nobr> </i>
is defined (has a value) for all <b><i>i</i></b><sub><i>j</i></sub> 
such that (0&le;<b><i>i</i></b><sub><i>j</i></sub>)^(<b><i>i</i></b><sub><i>j</i></sub>&lt;<b><i>s</i></b><sub><i>j</i></sub>).
<nobr>(<b><i>s</i></b><sub>0</sub>, <b><i>s</i></b><sub>1</sub>, &#133;, <b><i>s</i></b><sub><i>n</i>-1</sub>)</nobr> 
is called the <i>shape</i> of the array.
etc. etc.</p>

This definition accommodates:
<table>
<tr><td valign=top>&nbsp; &#149;&nbsp;</td><td>APL/J rectangular arrays</td></tr>
<tr><td valign=top>&nbsp; &#149;&nbsp;</td><td><a target=APLQAx href="http://www.jsoftware.com/papers/sparse.htm">J sparse arrays</a></td></tr>
<tr><td valign=top>&nbsp; &#149;&nbsp;</td><td><a target=APLQAx href="http://www.jsoftware.com/papers/eem/infinity.htm">Infinite arrays</a></td></tr>
<tr><td valign=top>&nbsp; &#149;&nbsp;</td><td>Associative arrays (dictionaries)</td></tr>
</table>

<p>APL rectangular arrays up to now have been implemented
by enumerating the array elements in row major order
(for indices <nobr>(0, 0, &#133;, 0),</nobr> <nobr>(0, 0, &#133;, 1),</nobr> etc.).  
But we know that there are ways to represent a function other than
enumerating the domain and range of the function.</p>

<p align=right>&#151;
Roger Hui, e-mail to Jim Brown, John Scholes, and<br>Bob Smith, 2010-10-12;
<a target=APLQAx href="http://www.jsoftware.com/papers/array.htm"><i>What is an Array?</i></a>, 2010-12-29
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="first_thingy"></a>
<b>First-thingy</b> in <i>A</i>: An opration [sic] that for <i>A</i>, an <b>array</b>, returns an <b>array</b> <i>B</i>, defined as follows: &#133;
<p align=right>&#151;
International Standard ISO/IEC 13751:2001(E),<br>
<i>Programming Language Extended APL</i>,
2001-02-01, page 22
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="ano"></a>
Andrew North is an expert in statistics
(co-author with David Foot,
<i>The Use and Misuse of Econometrics</i>, 1975),
and a cruciverbalist.
I did help him one time when he was stuck
on a 10-letter word with the clue, 
&ldquo;designed to give a bishop a long career&rdquo;.
<acronym title="fianchetto">Answer.</acronym>
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="rhematic"></a>
As others have recounted, 
Ken was deeply interested in words, their use and their etymology.  
He indeed did read the dictionary, and kept a copy of the 
American Heritage Dictionary 
(along with other dictionaries)
by his easy chair for ready reference.  
He especially encouraged me to consult the section on Indo-European 
roots in the back of the AHD, 
which makes deep and uncommon connections between words.</p>

<p>Many of Ken&rsquo;s relatives and friends received
from him the AHD as a present.  I myself did not because 
I&rsquo;d already owned one years before I met Ken.  In fact,
<i>I</i> gave <i>him</i> the third edition of the AHD as a present.</p>

<p>I think nothing I had ever done impressed Ken quite as much as
when I found the word &ldquo;rhematic&rdquo; (meaning, pertaining to the
formation of words), a word he had been searching for for some time.  
Thus the phrase &ldquo;rhematic rules of J&rdquo; 
made its way into the 
<a target=APLQAx href="http://www.jsoftware.com/help/dictionary/dict.htm"><i>J dictionary</i></a>.</p>

<p align=right>&#151;
Roger Hui, 
<a target=APLQAx href="http://keiapl.org/rhui/remember.htm"><i>Remembering Ken Iverson</i></a>, 2004-11
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="KEIQA"></a>
Since September 2005 considerable time
and energy had been spent on compiling and editing
<a target=APLQAx href="http://www.jsoftware.com/papers/KEIQA.htm"><i>Ken Iverson Quotations and Anecdotes</i></a>.
The work received validation of sorts in 2007, when Richard Bookstaber
quoted and used material from it without attribution in his book
<i>A Demon of Our Own Design</i> (pages 44 and 45).
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="APLore"></a>
If an item in 
<a target=APLQAx href="http://www.jsoftware.com/papers/KEIQA.htm"><i>Ken Iverson Quotations and Anecdotes</i></a>
is a &ldquo;Kenecdote&rdquo; (per Eugene McDonnell), 
and an item in 
<a target=APLQAx href="http://www.jsoftware.com/papers/eem/anecdotes.htm"><i>Eugene McDonnell Quotations and Anecdotes</i></a>
is a &ldquo;Genecdote&rdquo;,
what is an item in <i>this</i> collection?
I propose that it be called an &ldquo;APLore&rdquo; 
(pronounced &ldquo;apple lore&rdquo;).</p>

<p>I learned just today that 
<a target=APLQAx href="http://www.jsoftware.com/papers/Mooreiana.htm">&ldquo;Mooreiana&rdquo;</a>
was what Eugene had been calling the collection
of Roger Moore stories since 1986 or earlier.  
The possibilities are endless!
<nobr>Tuttle-Tales,</nobr> 
<a target=APLQAx href="http://johnscholes.rip/scholisms/">Scholisms</a>, 
Krombergers, Hui-Stories, &#133;
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<a name="throwaway"></a>
<table>
<tr><td valign=top>BC</td><td>
You have this four-year itch to write a new programming
language, so you&rsquo;re coming due. Are the constraints
on the problem any different? What&rsquo;s the new language
going to look like?
 </td></tr>
<tr><td nowrap valign=top>AW &nbsp; &nbsp;</td><td>
It will probably be 95 percent the same. It&rsquo;s the same
semantics: noun, verb, adverb—same data types, same
functions. But I like to try different things under the covers.
For example, I like to try different memory allocation
schemes. It&rsquo;s all call by value but reference count[ed], which
is kind of amazing when you think about it, so there&rsquo;s no
garbage collect. Everything is reference counted; when it&rsquo;s
free, you know immediately so you get good reuse. Under
the covers, I play with different things. For example, if
you&rsquo;re doing a vector operation and the reference count is
one, well, then reuse the vector. I also always try to make
the code smaller.
 </td></tr>
<tr><td valign=top>BC</td><td>
Are you actually redoing the implementation, or are
there going to be semantic differences as well?
 </td></tr>
<tr><td valign=top>AW</td><td>
The implementation is 100 percent new. I write
everything from scratch, so the C code is entirely different
but the semantics are about 95 percent the same.
 </td></tr>
<tr><td valign=top>BC</td><td>
You start over in terms of your C code? You take all
that and throw it out?
 </td></tr>
<tr><td valign=top>AW</td><td>
Yes, completely.
 </td></tr>
<tr><td valign=top>BC</td><td>
What does it feel like to part with all that code that&rsquo;s
so lovingly created?
 </td></tr>
<tr><td valign=top>AW</td><td>
I love starting from scratch&mdash;and it&rsquo;s stupid because
doing the parser, tokenizer, and printer takes me months.
 </td></tr>
<tr><td valign=top>BC</td><td>
Do you find that you can come up with a better
solution?
 </td></tr>
<tr><td valign=top>AW</td><td>
I think they&rsquo;re getting a little bit better, but I think
I&rsquo;m converging.
 </td></tr>
<tr><td valign=top>BC</td><td>
Is that advice you would give to practitioners: to
throw out more?
 </td></tr>
<tr><td valign=top>AW</td><td>
Yes, but in business it&rsquo;s hard to do that.
 </td></tr>
<tr><td valign=top>BC</td><td>
Especially when it&rsquo;s working!
 </td></tr>
<tr><td valign=top>AW</td><td>
But I love throwing it all out.
 </td></tr>
</table>

<p align=right>&#151;
Bryan Cantrill, 
<a target=APLQAx href="http://delivery.acm.org/10.1145/1540000/1531242/p12-interview.pdf?key1=1531242&key2=1969525821&coll=GUIDE&dl=GUIDE&CFID=105694261&CFTOKEN=67981621"><i>A 
Conversation with Arthur Whitney</i></a>, ACM Queue,<br>Volume 7, Issue 2, 2009-02
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<a name="garage"></a>
<b>Where do you do most of your programming?</b> <br>
In the garage. I have to. I live in Palo Alto. <br>

&#133;<br>

<b>You like short programs and simple languages, some might say your languages are cryptic.</b><br>
Terse, yes. Cryptic, no. I like to simplify things: shorter programs, 
fewer primitives, smaller systems to run on, all of which makes for more productive, 
more cost-efficient programming.
</p>

<p align=right>&#151;
<a target=APLQAx href="http://kx.com/news/press-releases/arthur-interview.php"><i>An 
Interview with Arthur Whitney</i></a>, 2004-01-04
<br>&nbsp;</p></td></tr>




<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="correct"></a>
The only program which stands a chance of being correct is a short one.
</p>
<p align=right>&#151;
Arthur Whitney
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="genius"></a>
Ken told me of an &ldquo;indefensible&rdquo; attack:
&ldquo;APL/J is easy for you because you guys are geniuses.&rdquo;
I mean, what was he going to say?</p>

<p>I found out recently that Ken actually had a pretty good parry &#133;
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="advice"></a>
&#133; At one point I remember a vice president
trying to convince me to do something in a different
way and I kept trying to convince him that 
the reason we were successful was because
we used our own tool.  And the IBM vice president
said no, it was because I was smart.
I remember mentioning that to Ken,
and Ken said, &ldquo;You should have asked him,
&lsquo;If you think I am so smart, 
why don&rsquo;t you take my advice?&rsquo; &rdquo;</p>

<p align=right>&#151;
Dick Lathwell, 
<a target=APLQAx href="http://www.youtube.com/watch?v=ODOpijGKuok"><i>Dad &amp; My APL Box</i></a>
(8:28), 2009-04
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="ironing"></a>
Visiting Dyalog staff and consultants 
lodged at Dyalog House in Basingstoke.
On more than one occasion, 
a few minutes before we were to leave 
for the office in the morning, 
Morten Kromberg would come downstairs and 
iron a blouse for Gitte Christensen.
The first time I saw that, I thought to myself,
&ldquo;There is a limit to how bad a man can be
who does that for his wife.&rdquo;
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="surgeon"></a>
The surgeon operated on the son and yet is not the father.
How is that possible?</p>

<p>I asked Morten Kromberg this old chestnut and 
he got the answer immediately.  
Probably, he would have gotten it in any case,
but he has the added advantage that his mother is a surgeon
who actually operated on him.
Apparently his mother is doubly responsible for his good looks:
once by giving birth to him and again by sewing his face back together
after it was cut open in a bicycle accident.
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="cooking"></a>
Gitte Christensen is a good cook and whenever
she was in residence at Dyalog House
we would be treated to a delicious dinner.</p>

<p>On sitting down to dinner, Gitte would have a first taste
and say, &ldquo;Well, I got lucky again&rdquo;,
whereupon the others around the table would dutifully (and truthfully)
respond, &ldquo;How is it that you are lucky every time you cook?&rdquo;
<br>&nbsp;
</p>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="telekinesis"></a>The Dyalog office in Bramley
has an open sitting plan
conducive to good communications. 
Serious work is carried out in an atmosphere of camaraderie.
One afternoon, John Daintree stood up at his desk, raised one hand,
and announced,
&ldquo;Would anyone who believes in telekinesis please raise my other hand?&rdquo;
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Hilbert_matrix"></a>
On 2009-06-18 John Scholes told me by e-mail of a 
<a target=APLQAx href="http://www.cs.princeton.edu/introcs/95linear/Hilbert.java.html">comment</a> 
by Robert Sedgewick
that it is <i>infeasible</i> to compute the inverse of the 100-by-100 Hilbert matrix.
He proved Sedgewick wrong by inverting that matrix using a 
<a target=APLQAx href="http://dfns.dyalog.com/n_rats.htm">dfns model of rationals</a>, 
and thought that J 
can probably do it reasonably quickly.</p>

<p>On receiving John&rsquo;s e-mail, I fired up my J system, 
defined<nobr><tt> H=: %@>:@(+/~)@i.</tt></nobr>&nbsp;,<tt> </tt>
then executed<nobr><tt> timer '%. H 100x'</tt></nobr>&nbsp;.<tt> </tt>
When the expression completed successfully after 115.521 seconds, 
I shouted across the desks to John,
&ldquo;John! 2 minutes!&rdquo;
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="GPS"></a>
I recently purchased a Garmin GPS unit.  
One of its functions is to record a destination
with a label, and on arriving at a programmed destination
it would announce by voice, &ldquo;Arriving at XYZ, on left (or right).&rdquo;</p>

<p>In June 2010, we drove to the Bay area to visit friends and relatives.  
It was a long journey over unfamiliar roads,
so we took the GPS with us.
We visited Arthur and Rita Whitney 
and went out for dinner together at a local restaurant.
Afterwards, we drove back to Arthur&rsquo;s house
with Arthur sitting in the front passenger seat.
As we neared Arthur&rsquo;s house, the GPS announced,
&ldquo;Arriving at Arthur Whitney, on left.&rdquo;
On my right, Arthur retorted, &ldquo;Technically, that&rsquo;s incorrect.&rdquo;
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="APL_birthday"></a>
An e-mail exchange from 2010-08-17:</p>

<p><b>Catherine Lathwell:</b> 
I&rsquo;ve seen references to the fact that APL has a birthday, but
not the actual date.  If I had to pick, I would pick 1962 when 
<a target=APLQAx href="http://www.jsoftware.com/papers/APL.htm"><i>A Programming Language</i></a> 
was  published. 
What do you consider APL&rsquo;s birthday?</p>

<p><b>Roger Hui:</b>
In 1991 there was an issue of the IBM Systems Journal,
Volume 30, Number 4, labeled &ldquo;Twenty-fifth Anniversary APL&rdquo;.
So that&rsquo;d make 1966 the birth year.  The birth day and time are
also known, sometime in November, sometime during
the Thanksgiving weekend, so that&rsquo;d make it between November
24 and 27 in 1966.  I remember the Thanksgiving part because
I remember reading 
<a target=APLQAx href="http://ed-thelen.org/comp-hist/APL-hist.html">someone&rsquo;s article</a> 
saying that the APL
implementers were workaholics, working even during the holidays. 
(Don&rsquo;t you remember Dick being away that weekend? &#9786;)</p>

<p>The precise time is known because in the old days, instead
of doing<tt> )clear</tt>&nbsp;,<tt> </tt>
you do<nobr><tt> )load 1 cleanspace </tt></nobr>
(or maybe the system did that under the covers), and that<tt> cleanspace </tt>
had a saved
timestamp that was carefully preserved from one release to the next,
from one version to the next, from one APL to the next.
Actually, I fired up my APL2 just now and:</p>

<pre>
       )load 1 cleanspace
SAVED 1966-11-27 15.53.59 (GMT-7)
</pre>

<p><b>Dick Lathwell 
<a target=APLQAx href="http://lathwellproductions.ca/wordpress/2010/08/18/reach/#comments-1131">responded</a> on 2010-08-20:</b> 
Trivia trivia: The timestamp on<tt> 1&nbsp;cleanspace </tt>
is actually 1 second later than the original. 
Some time after the implementation of<tt> )clear</tt>&nbsp;,<tt> </tt>
Adin dropped<tt> 1&nbsp;cleanspace</tt>&nbsp;.<tt> </tt>
He then had second thoughts, so I set the time and date of the model 50 
to the original timestamp with the clock disabled and started APL 
and entered<nobr><tt> )save 1 cleanspace</tt>&nbsp;.</nobr><tt> </tt>
The implementation of our supervisor (I guess these days we would say kernel) 
was such that an interval timer interrupt was required to enter the scheduler, 
so I momentarily enabled the clock.
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="eemapl2010"></a>
The committee of the APL2010 conference in Berlin
invited me to give a 
<a target=APLQAx href="http://www.jsoftware.com/papers/eem/eemapl2010.htm">10-minute address</a>
on Eugene McDonnell after the chairman&rsquo;s opening welcoming remarks.
On the first day of the conference, 
I arrived early to get the equipment ready, 
then paced back and forth in the lecture hall, 
psyching myself up for the talk.  
A famous name also arrived early a few minutes later.  
He came up to me and said quietly,
&ldquo;I didn&rsquo;t even know that Eugene McDonnell had died.  
Are you going to do something about that?&rdquo;
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="trees_and_lists"></a>
At the 2005 Dyalog conference in Helsing&oslash;r, 
I gave a light-hearted talk about emulating lists in APL. 
Contrasting lists with trees, I said that I harbored an adolescent fantasy that, 
while waiting at the bus stop, I would be approached by a beautiful woman 
who would ask, &ldquo;Excuse me, 
do you know the difference between a list and a tree?&rdquo; 
I had a cute answer prepared.</p>

<p>Five years later, at the banquet of the APL2010 conference in Berlin, 
I was sitting with Flora, my wife, when two stunningly beautiful young women 
from APL Italiana came to our table. 
&ldquo;Excuse me Mr. Scholes, do you know the difference between a list and a tree?&rdquo;</p> 

<p>Amazing! What are the chances of that?</p>

<p>(For the record, a list can be viewed as a unary tree, 
but let&rsquo;s keep this to ourselves. 
There may be more beautiful women out there with a deep interest in data structures.)</p>

<p align=right>&#151;
John Scholes
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="suck_eggs"></a>
John Scholes was most apologetic while advising 
a young colleague about some care that should be taken,
and quoted from the prolific poet Anon y Mous:</p>

<table><tr><td>&nbsp; &nbsp;</td><td>
Teach not thy parent&rsquo;s mother to extract<br>
The embryo juices of the bird by suction.<br>
The good old lady can that feat enact,<br>
Quite irrespective of your kind instruction. 
</td></tr></table>

<p>The sentiment seemed very similar
to a Chinese phrase dating from the Ming Dynasty,
&#29677;&#38272;&#24324;&#26023; , something like
&ldquo;exercising your axe at Paul Bunyan&rsquo;s doorstep.&rdquo;
A search of the phrase on Google found a
<a target=APLQAx href="http://www.iciba.com/%E7%8F%AD%E9%97%A8%E5%BC%84%E6%96%A7/">definition</a>
in English and one of the meanings is,
&ldquo;teach one&rsquo;s grandmother (how) to suck eggs.&rdquo;
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="smart_casual"></a>
A week before the Dyalog Christmas party,
Karen Shaw sent an advisory:</p>

<table><tr><td width=18 nowrap>&nbsp;</td><td>
For those attending the dinner, 
the restaurant/hotel have advised that the
dress code is smart casual&#133; 
I suggest you Google it if you are unsure what that is!
</td><td width=18 nowrap>&nbsp;</td></tr></table>

<p>Various humorous messages were sent in response;
the most humorous (and shortest) was from 
John Daintree: http://en.wikipedia.org/wiki/Dinner
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="pints"></a>
John Daintree is a master joke teller, and throughout
the Christmas dinner regaled the table with jokes,
puns, rejoinders.  Towards the end of the dinner
Ronald Chan challenged
JD to tell a joke about &ldquo;drinks&rdquo;.</p>

<p>It <i>was</i> late in the evening and everyone
has had a few drinks, and JD was momentarily stuck
for a joke on &ldquo;drinks&rdquo;.  He stalled for a minute.
Still stuck.  Stalled for more time &#133; when
a joke that I&rsquo;d heard recently popped into
my head, and I came to the rescue:</p>

<p>A countably infinite number of mathematicians 
walked into a bar.  
The first one ordered a pint.  
The next one ordered <sup>1</sup>/<sub>2</sub> a pint.  
The next one ordered a <sup>1</sup>/<sub>4</sub> pint.
The next one ordered <sup>1</sup>/<sub>8</sub> of a pint. 
&#133;
The bartender poured two pints and said, 
&ldquo;You guys know your limit, right?&rdquo;
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="one_egg"></a>
Several days before this came one of the finest
moments in my &ldquo;joke-telling career&rdquo;.
Before returning to Dyalog House we stopped by
the local Tesco.  
Ronald Chan commented
that we needed to get some eggs 
as there was only one left.
I immediately said, &ldquo;If you were French
one egg would have been un oeuf.&rdquo;
I waited years to spring that one.
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="muse"></a>
A  number  of  the  notes in this workspace contain sections that are merely the
musings of the author. They may not be entirely factual and you should check the
content with say, Wikipedia, before repeating them to a discerning audience. For
example:</p>

(muse:
<table><tr><td nowrap>&nbsp; &nbsp; &nbsp;</td><td>
<p>A muse is a compound of &ldquo;musons&rdquo;; 
the elementary particles of consciousness;
the  atoms of our mental world.  More complex patterns, such as our views on
politics, religion, country music, and so forth, are constructed from clusters 
of these units.</p>

<p>An example of a muson might be  the fleeting intention to buy more trash-can
liners.  In isolation, the muson is typically temporary and inconsequential;
anything smaller does not register on EEG.</p>

<p>The human mind is characterized by its ability  to build large and  enduring
structures from such particles, while other animals get by with much simpler
combinations. For a dog, memory-of-rabbit is about as fancy as it gets.</p>

<p>Some meditation regimes may be seen as the attempt  to  dwell  for  extended
periods within a single muson.  The most successful exponent of  this  turns
out to be the common oyster (<i>Ostrea edulis</i>),  which spends its entire mental
life within the sole muson of which it is capable.</p>

<p>Although  there  is  no  direct  human equivalent of  the oyster&rsquo;s muson, an
approximation might be something midway between an appreciation of sea water
and a vague yearning for locomotion.
</td></tr></table>
)
<p align=right>&#151;
John Scholes,
<a target=APLQAx href="http://dfns.dyalog.com/n_muson.htm">
<i>Muse</i></a>
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="tower_of_2s"></a>
Notice in the examples below that<tt> */5/2 </tt>
is a number with 19,729 decimal digits.  
An amusing way to distinguish mathematicians from computer programmers
at  a social gathering (perhaps a cocktail party or wedding reception) is to
sing this little song 
(to the tune of &ldquo;The Grand Old Duke of York&rdquo;):</p>

<table>
<tr><td width=18 nowrap>&nbsp;</td><td>
        Two,<br>
        Two-to-the-two,<br>
        Two-to-the-two-to-the-two,<br>
        Two-to-the-two-to-the-two-to-the-two,<br>
        Two-to-the-two-to-the-two-to-the-two-to-the-two, &#133;<br>
</td></tr></table>

<p>You  will  find  that  after six or seven lines, 
the mathematicians begin to look bored, 
while the computer programmers turn pale and start to faint.
</p>

<p align=right>&#151;
John Scholes,
<a target=APLQAx href="http://dfns.dyalog.com/n_nats.htm">
<i>Natural Number Arithmetic</i></a>
<br>&nbsp;</p></td></tr>


<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="cat"></a>
An exchange
on the J Programming Forum on 2011-01-25 and -26.

<p><b>Henry Rich</b>:
In the old days, turning on debug made my big
apps crash.  I think it&rsquo;s been fixed now, but
I&rsquo;m still like Mark Twain&rsquo;s cat.</p>

<p><b>Dan Bron</b>:
&ldquo;[It&rsquo;s] said a person that started in to carry a cat
home by the tail was getting knowledge that was always
going to be useful to him, and wasn&rsquo;t ever going to
grow dim or doubtful.&rdquo; &mdash; <i>Tom Sawyer Abroad</i></p>

<p><b>Roger Hui</b>: I suspect Henry meant the following:
The cat, having sat upon a hot stove lid, will not sit
upon a hot stove lid again. 
But he won&rsquo;t sit upon a cold stove lid, either.
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="scan"></a>

It came time to implement<tt> \</tt> (&ldquo;scan&rdquo;). 
On that day (in the first half of 1990), 
during lunch at Josie&rsquo;s Cafe on Yonge Street, I asked Ken innocently, 
&ldquo;Have you ever wanted to scan something other than reduction?&rdquo;
The question was not even well-formed, 
because the APL paradigm is so powerful
that it usually pushes aside alternative thoughts.
Nevertheless, the discussion that then proceeded 
was productive,
and quickly led to the realization that 
<a target=APLQAx href="http://www.jsoftware.com/papers/j4apl.htm">[35]</a>:</p>

<p>Some APL expressions apply reduction implicitly.
For example, APL scan applies its left argument reduction
to successive prefixes of the right argument.
The use of reduction ensured that computations such as sum scan
can be effected by primitive function arguments to the operator,
and that the overall result could be assembled in <i>APL</i>\360.</p>

<p>With J&rsquo;s more permissive assembly rules 
(and the use of boxed arrays), 
reduction is no longer necessary, 
and in many cases, inappropriate.
Therefore in J, if a reduction is required, it must be
specified.  Thus<tt> +/\ </tt>in J computes <i>sum scan</i> 
and<tt> +/\. </tt>computes <i>suffix sum scan</i>.  
The following J example does not use reduction, 
and is therefore not readily expressed using APL scan:</p>

<pre>
   &lt;\ 'abcdef'
┌─┬──┬───┬────┬─────┬──────┐
│a│ab│abc│abcd│abcde│abcdef│
└─┴──┴───┴────┴─────┴──────┘
</pre>
<p align=right>&#151;
Roger Hui, 
<a target=APLQAx href="http://keiapl.org/rhui/remember.htm#scan"><i>Remembering Ken Iverson</i></a>, 2004-11
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="minors"></a>
One time, I visited Prof. Keith Smillie in Edmonton and had lunch with him.  
We took a bus returning from lunch.  
The conversation got to the <a target=APLQAx href="http://www.jsoftware.com/jwiki/User:David_Mitchell">J mug</a>.  
Just before Prof. Smillie&rsquo;s stop, I asked him if he knew what the J
expression<tt> 1&(|:\.)"2^:2 </tt>on the mug did.  
He paused as he was getting off the bus, 
turned right around to get back on the bus, 
and we talked some more about minors.</p>

<p>This story elicited a chuckle from Ken Iverson 
when I told him about it.  (He was the author of the expression.)</p>

<p align=center>
<img width=160 height=213 src="https://www.jsoftware.com/papers/APLimg/jmug0.jpg"> <img width=160 height=213 src="https://www.jsoftware.com/papers/APLimg/jmug1.jpg">
<br>&nbsp;</p>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="NARS2000"></a>
The <a target=APLQAx href="APLQA.htm#NARS">first NARS (Nested Arrays Research System)</a> was designed 
and implemented in the early 1980s as a testbed for new ideas in APL, 
principally with nested arrays. 
A quarter of a century later, it&rsquo;s time to try again.</p>

<p>The goal of this effort, as with the last one, 
is to foster new ideas about the language and its implementation.</p>

<p>Language ideas include new functions, operators, and datatypes. 
To aid in getting your ideas into an implementation, 
there will be a mechanism for telling NARS 
that a user-defined APL function represents 
a new primitive function, operator, or datatype. 
In order to experiment with your ideas for new extensions, 
all you need to know is how to write APL programs.</p>

<p>Implementation ideas include algorithms to enhance code space 
(smaller executable), time space (faster execution times), 
or expressibility (clearer and more understandable code). 
A goal of the existing implementation is to be open 
and easy for others to change so that new ideas may be inserted smoothly.</p>

<p>Moreover, this project is made available as 
<a target=APLQAx href="http://www.gnu.org/philosophy/free-sw.html">Free Software</a> so, 
among other things, any developer may pick it up and add new features, 
and any end user may use it free of charge.</p>

<p align=right>&#151;
Bob Smith, 
<a target=APLQAx href="http://www.nars2000.org/"><i>NARS2000</i></a>
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="smart"></a>In school and in textbooks it is proven that
sorting requires<tt> &#x1d4aa;(n×⍟n) </tt>comparisons.
I supposed that is why Bob Smith
was initially skeptical when I told him that in Dyalog APL 
you can sort
a real vector in<tt> &#x1d4aa;(n) </tt>time.<tt> </tt></p>

<p>I opined to Dyalog colleagues 
that Bob is a smart guy
and if you tell a smart guy that something is possible
(and he believed you)
then he would soon figure out how to do it.
He did.
<br>&nbsp;</p>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="key"></a>
The Dyalog APL and J implementations recognize particular useful operands
for <i>key</i>, for example<tt> {≢⍵} </tt>and<tt> {f⌿⍵}</tt>&nbsp;,<tt> </tt>
and implement those cases with special code for higher performance.
When<tt> ⌸ </tt>was introduced to Dyalog APL in 2013
it was discovered that<tt> {≢⍵}⌸x </tt>(tally of unique elements) ran
almost as fast as finding the maximum of<tt> x </tt>
(<acronym title="Hui, R.K.W., Primitive Performance, Dyalog User Conference, 2013-10-22.">Hui 2013b</acronym>).
Investigation into how that came about led to the following programming puzzle
(<acronym title="Hui, R.K.W., Index-Of, A 30-Year Quest, J Conference 2014, 2014-07-25.">Hui 2014 &sect;16</acronym>):
</p>

<blockquote><p>Find the maximum of a vector of 1-byte ints without using multicore, 
vector instructions, loop unrolling, etc. 
Can you do it faster in C than the following code snippet?</p>

<pre>max=*x++; for(i=1;i&lt;n;++i){if(max<*x)max=*x; ++x;}</pre>
</blockquote>

<p>The puzzle stumped some expert C programmers.  
It is possible to be faster by a factor of 1.5.
<br>&nbsp;</p>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Minnowbrook2011"></a>
Dear Colleagues:</p>

<p>Garth Foster and I are pleased to invite you to the 2011 Minnowbrook APL
Implementers Workshop, to be held Tuesday-Saturday, September 20-24, 2011
at Syracuse University&rsquo;s Minnowbrook Conference Center on Blue Mountain Lake
in the Adirondack Mountains of upstate New York.  Those of you who have been to
previous Minnowbrooks know that this lovely venue is specifically designed for
intimate conferences, and the setting is highly conducive to productive and convivial
interaction amongst the conferees.</p>

<p>While the focus of the workshop is the design and implementation of APL, we expect
other languages to be well-represented both because of APL&rsquo;s inspiration of or effect
on them, and because of their influence on APL.  Since our last workshops in 2007
and 2010, much has transpired in the computing milieu which stimulate and challenge
us all.  This year, we shall explore the strategic view of our parallel paradigm, as well as
discuss the various flavors, improvements, and interactions of our languages.  With
your suggestions, we hope to give our conference a bit more structure than in the past.</p>

<p>The topics we discuss are up to you.  At this point, we have no agenda, but we do have
a schedule to which we must adhere.  Because this is your conference, the agenda is
subject to your collective wishes.  If past years are any indication, we would expect to
have more material from you than our 24 hours of scheduled meeting time allow.  The
rest will have to be discussed at Evening Seminar.  Please keep your presentations
(prepared or <i>ad hoc</i>) brief and cogent to allow for plenty of discussion time.  Please offer
your suggestions in the attached registration form.</p>

<p>This is an invitation-only workshop.  Although Minnowbrook can accommodate
up to 64 people, we hope to keep the number of conferees to less than half that.  The
individuals on the distribution list 
(&ldquo;To&rdquo; sorted by first name, &ldquo;Cc&rdquo; by last name) are
designers, implementers, major users, and legacies of APL, J, K, and extended
versions of other languages such as C having array programming capabilities.  If we
have left someone significant off the list, we apologize and want to hear from you so
that we may extend them an invitation.</p>

<p>The Workshop will begin with dinner at 6:00 P.M. on Tuesday the 20th; plan to arrive
around 4:00.  It will end after lunch at 1:00 P.M. on Saturday the 24th.  The nearest
major airport is Albany, New York (ALB), about 110 miles away (2:30 by car); next
closest is Syracuse (SYR), about 140 miles (3:00).  Saranac Lake Regional Airport is
about 55 miles away (1:15); or you can simply hire a seaplane and land directly at
Minnowbrook&rsquo;s dock!</p>

<p>Dress is casual.  The weather is likely to be balmy during the day, but can get slightly
brisk at night (but less so than 2010&rsquo;s conference); bring a sweater or jacket.  There will
be plenty of time for recreation, so bring hiking boots, fishing rods, or if you&rsquo;re brave, a
swim suit.  See Minnowbrook&rsquo;s website http://www.minnowbrook.org for full information
about the facilities.</p>

<p>The all-inclusive (excepting travel) cost for the workshop is $990 per person for single
accommodations, $870 for double (only slightly inflated since 2007).  We provide all
refreshments, including evening cocktails, wine with dinner, and nightly libations.  As
this is a personal and non-profit endeavor, Garth and I will collect all funds, and
distribute any surplus to attendees after the conference.  Please complete and mail the
form below to reserve your place at Minnowbrook 2011.  If you cannot attend, please let
us know promptly by email.</p>

<p>Hereafter, we plan to hold Minnowbrook Workshops in the odd years starting 2013.</p>

<p>We look forward to meeting and renewing our friendships with all of you, and to the
congeniality, fellowship, and vigorous discussion which Minnowbrook has always
inspired.</p>

<p>Yours very truly,
Garth Foster and
Roy Sykes
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Mary_Ellen_Foster"></a>
During the first dinner at Minnowbrook in 2011,
I met Mary Ellen Foster for the first time
(and knew her name by her name tag).  
For a few minutes I couldn&rsquo;t decide 
whether she was 
Garth Foster&rsquo;s wife or his daughter.
Her identity was confirmed later that evening
through the introductions in the first session.</p>

<p>A couple of days later I saw Mrs. Foster reading
a book at the patio.  By that time I&rsquo;d finally
overcome my reserve and proceeded to describe to her
my dilemma on our initial encounter.  
She put her hand over her
heart and said, &ldquo;Oh, you&rsquo;ve made my week;
no, you&rsquo;ve made my year!&rdquo;</p>

<p>When I told the guys about this exchange, they said,
&ldquo;You smooth talker you.&rdquo;
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="OCD"></a>
I was at uni with this bloke, and can vouch for his OCD credentials.</p>

<p align=right>&#151;
Jay Foad, extolling the programmer of some software
<br>he was recommending
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="planet"></a>
I&rsquo;ve always said that APLers are nicest group of people on the planet &#133;
it&rsquo;s just a shame that they&rsquo;re not necessarily of this planet.</p>

<p align=right>&#151;
Andy Shiers
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="stupid_questions"></a>Stupid questions &#133;</p>

<p>During the time we were implementing the very  first  version  of  Dyalog, 
a friend, who was not a programmer, 
asked me how much of it was coded in APL.
I thought he was bonkers.</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; We now have exactly this internal 
&ldquo;magic function&rdquo; prototyping facility.</p>

<p>When &ldquo;Visual Display Units&rdquo; first appeared 
alongside scrolling paper terminals, 
a participant on a course I was giving asked me where the writing went
when it disappeared off the top of the screen. 
I explained it was just, well, gone; 
same place the ticking goes when the clock stops.</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; We now have scrolling sessions.</p>

<p>On another course, someone asked me what<tt> (A&nbsp;B) </tt>means, 
when<tt> A </tt>and<tt> B </tt>are variables. 
I explained that it didn&rsquo;t mean anything as there wasn&rsquo;t a function
between the<tt> A </tt>and the<tt> B</tt>&nbsp;.</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; We now have vector notation.</p>

<p>Sound bite: A stupid question is a portal into an alternative mindset.</p>

<p align=right>&#151;
John Scholes, 
<a target=APLQAx href="http://dfns.dyalog.com/n_declarative.htm"><i>Declarative Programming</i></a>
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="empty_array"></a>
This is the obligatory empty array entry.</p>

<p><b>Jay Foad</b>: JS pointed me at 
<a target=APLQAx href="http://dl.acm.org/citation.cfm?id=800136.804440">some papers</a> by Trenchard More. I liked this bit:</p>

<table><tr><td nowrap>&nbsp; &nbsp;</td><td>
<p>We know from experience that empty collections differ according to type. An empty box of eggs differs from an empty box of apples: one hold no eggs; the other, no apples.</p></td></tr></table>

<p>N.B. I disagree with him.</p>

<p><b>John Scholes</b>: This spawned a whole genre 
of &ldquo;empty-array jokes&rdquo;. The one I remember is:</p>

<table><tr><td nowrap>&nbsp; &nbsp;</td><td>
Diner:  I&rsquo;ll have the strawberries and cream please, but without the cream.<br>
Waiter: I&rsquo;m sorry sir, that dish is off the menu today, 
the cream wasn&rsquo;t delivered.<br>
Diner:  Then, could I have it without custard, instead?</td></tr></table>

<p><b>Roger Hui</b>: <a target=APLQAx href="http://www.jsoftware.com/papers/eem/Empty_Array_Jokes.htm">http://www.jsoftware.com/papers/eem/Empty_Array_Jokes.htm</a></p>

<p><b>John Daintree</b>: I was expecting an empty page &#133;</p>

<p><b>Andy Shiers</b>: An empty page, or an empty <i>HTML</i> page?
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Danish"></a>
An American, in a cafe with two friends, orders a cup of tea and an English Muffin. 
His friend from London points out: we just say <tt>'</tt>Muffin<tt>'</tt>. 
Later, when he orders a cup of coffee and a 
<a target=APLQAx href="http://cphpost.dk/news/the-patsies-whose-favourite-pastries-arent-really-danish.7855.html">Danish</a>, 
his friend from Copenhagen says: we just call them<tt> ''</tt>&nbsp;.</p>
<p align=right>&#151;
John Scholes
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Monty_Hall"></a>
I once introduced APL to a grade 9 math class in a one-hour talk, 
finishing with a simulation of the 
<a target=APLQAx href="http://code.jsoftware.com/wiki/Essays/The_Monty_Hall_Problem">Monty Hall problem</a>.
Well into the problem, a student opined, 
&ldquo;I&rsquo;ve always wanted to have a goat.&rdquo;
Since then, I have taken care to start the problem description with,
the object of the game is to win a car.</p>

<p>From <a target=50x href="http://xkcd.com/1282">http://xkcd.com/1282</a></p>

<p><acronym title="A few minutes later, the goat behind door C drives away in the car.">
<img src="https://www.jsoftware.com/papers/APLimg/xkcd1282.png" width=500 height=174></acronym>
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Iverson_College"></a>
Too productive for your own good?</p>
 
<p>The Iversonian array languages (APL, J, kdb, q) 
are so productive that we almost all work 
either alone or in very small teams. 
We rarely benefit from the professional cross-fertilisation 
that is routine in big-team languages.</p>

<p>Our work is mobile, so we are packing it 
on our laptops and taking it to Oxford University 25-31 August this summer. 
This is not a conference but a week living 
and working among array-language colleagues.</p>

<p>We shall be a party of twenty-five with student 
accommodation at St Edmund Hall: 
meals in college, wifi in our rooms and in our common work room. 
No schedule, but meals together, and talks after dinner.</p>

<p>We shall take one day as a play day, 
perhaps punting up the Cherwell. 
We will have a formal dinner in Hall on Thu 29.</p> 

<p>In 2011 and 2012 we were at Trinity Hall in Cambridge.</p>

<p align=right>&#151;
Stephen Taylor,
<a target=APLQAx href="http://sites.google.com/site/iversoncollege/"><i>Iverson College</i></a>,
2013
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="IC2011"></a>
The k interpreter occasionally gave wrong answers. 
It would have been easy to suppose we were looking at a graduate project, 
did we not remember how Kx makes millions of dollars 
selling its programming language to a world 
in which programming languages are largely free.</p>

<p>John Scholes ventured a question: 
&ldquo;How do you do garbage collection?&rdquo; 
&mdash; &ldquo;No need to do garbage collection. 
I know where everything is.&rdquo;</p>

<p>The k binary weighs in at about 50Kb. 
Someone asked about the interpreter source code. 
A frown flickered across the face of our visitor from Microsoft: 
what could be interesting about that? 
&ldquo;The source is currently 264 lines of C,&rdquo; 
said Arthur. 
I thought I heard a <i>sotto voce</i> 
&ldquo;that&rsquo;s not possible.&rdquo; 
Arthur showed us how he had arranged his source code 
in five files so that he could edit any 
one of them without scrolling. &ldquo;Hate scrolling,&rdquo; 
he mumbled.</p>

<p align=right>&#151;
Stephen Taylor,
<a target=APLQAx href="http://archive.vector.org.uk/art10500700">
<i>Iverson College, Cambridge, Aug 2011</i></a>
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="kos"></a>
My memory of this one is even more hazy because by this time I was feeling giddy. 
It went something like:</p>

<p>Arthur doesn&rsquo;t like Gmail&rsquo;s fonts;
(&#133; some more steps, which I forget &#133;)
therefore, it seems reasonable to write his own operating system in k.</p>

<p align=right>&#151;
John Scholes, 2012-09-07
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="kos1"></a>
Both Eric Iverson and I remember Arthur talking 20 years ago (1990s) about
writing his own operating system.
One of us then asked him, why stop there,
why not do your own chip?
He replied that the chips were good enough.
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="IC2013"></a>
A vignette from Iverson College 2013:</p>

<p>Arthur was quite taken with the fact that<tt> +.× </tt>
in Dyalog APL and J are 
<a target=APLQAx href="http://www.jsoftware.com/papers/innerproduct/">faster on sparse matrices</a>.  
On Friday morning he talked to me again about it, 
and asked to see benchmarks on 1000-by-1000 matrices
with densities of 1 and 0.1.</p>

<pre>
      x←0.5×¯500+?1000 1000⍴1000
      y←0.5×¯500+?1000 1000⍴1000
      timer 'x+.×y'
2.04966

      x←x×0=?1000 1000⍴10
      timer 'x+.×y'
0.344815
</pre>

<p>I suggested that he could 
also do this because as I recall k does<tt> +.× </tt>row at a time 
rather than the traditional row-by-column.</p>

<p>About a minute later, Arthur said, OK, I have it, 
and showed me the changed code &mdash; he&rsquo;d inserted<tt> if(a) </tt>
into the middle of a dense pack of characters.  
I quipped that that indicates he isn&rsquo;t 
following the TDD methodology, 
and that he&rsquo;s only proven it correct but not tested it.</p>

<p>The other people in the Emden room were amused by the exchange.
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="hoodies"></a>
During IC 2013 I took a walk one afternoon.  
As I approached the corner of The High and Longwall 
I saw a man grabbing an armload of hoodies from a table 
in front of the souvenir shop.  
The act was so brazen and nonchalant that it was possible 
that the man was a staff person.  
I look at him; he looked at me.  
I peeked into the shop through the doorway.  
The staff showed no concern.  
When I looked out on the street again, 
the man with the hoodies was nowhere in sight.
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Erdős_number"></a>
At the 2013 Dyalog Conference, Morten Kromberg told me that Valentina Settimi 
(who made the APL Italiana presentation) 
has a Ph.D. in math and worked on the Goldbach conjecture for years.
Morten then wondered whether she had solved the conjecture.
I told him that if she had she wouldn&rsquo;t be talking to <i>him</i>.</p>
  
<p>To &ldquo;impress&rdquo; Signorina Settimi, and being totally uncouth, 
I went to her table and told her that 
<a target=APLQAx href="http://www.dyalog.com/blog/2015/01/cholesky-decomposition/">my Erdős number is 2</a>.
Richard Smith opined that an alternative approach was to offer 
her the opportunity of reducing her Erdős number to 3.
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="impress"></a>
At the banquet of the 2014 Jsoftware Conference I sat
at the same table with Leslie Goldsmith and a young colleague
(and others).
Well into the evening the young colleague asked Leslie,
&ldquo;Do you program?&rdquo;
(I suppose there was some doubt because Leslie
was now a senior executive of a company.)
I quietly said that Leslie programmed in APL one of the world&rsquo;s
first e-mail systems. 
Leslie added that it was the world&rsquo;s 
<a target=APLQAx href="APLQA.htm#666box">first commercial e-mail system</a>,
and that he did it while a high school student.
The young colleague exclaimed, &ldquo;Now you are starting to impress me!&rdquo;
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Einstein"></a>
At the Dyalog &rsquo;14 banquet, Charles Brenner told me that
there is a legend in his family that his older sister once sat
on Albert Einstein&rsquo;s lap,
possibly at a lecture or gathering at the IAS 
attended by both Einstein and Charles&rsquo;s father, with daughter in tow.
I suggested to Charles that he should start a legend
that <i>he himself</i> also once sat on Einstein&rsquo;s lap.
It could have happened as his family lived in 
Princeton while Charles was a baby.
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="IPSA50"></a>
Excerpts from a presentation to the IPSA50 party, 2014-10-05.</p>

<table>
<td valign=top nowrap>&#149; &nbsp;</td><td>
Remember the 80s? When our line to Europe was 9600 baud?  
I have 2000 times that bandwidth to my house. 
The 80s. When Joey saved 9 years of email in 82 megabytes.
Now we get that in a day.
 <td></tr>
<td valign=top nowrap>&#149; &nbsp;</td><td>
I remember when Jane and I had a business meeting in Winnipeg. 
IPSA&rsquo;s famous frugality dictated we share a hotel room. 
Jane arrived after me, unlocked the door and called out,
&ldquo;I&rsquo;m coming to get you!&rdquo; 
It was the wrong room. 
A man wearing only a towel took one look at this willowy redhead 
and responded, &ldquo;I certainly hope so!&rdquo;
 <td></tr>
<td valign=top nowrap>&#149; &nbsp;</td><td>
I remember asking Arthur Whitney to wear clean, 
ironed pants and shirt for an important demo. 
Arthur blew them away. 
When I thanked him for dressing properly someone said, 
&ldquo;Didn&rsquo;t you notice he had NO SHOES?&rdquo; 
You have to be VERY explicit with programmers.
 <td></tr>
<td valign=top nowrap>&#149; &nbsp;</td><td>
I remember arguments with Eric that he <i>consistently</i> won &mdash; 
even though I was <i>consistently</i> RIGHT!
 <td></tr>
<td valign=top nowrap>&#149; &nbsp;</td><td>
And I remember Roger.
His office with six feet of printouts &mdash; 
totally redundant, because Roger with his photographic memory knew 
Every. Single. Line. Of code.  
There&rsquo;s the legend of Roger in a Regina bar realizing he&rsquo;d 
forgotten his house key, and drawing it for a locksmith to cut a replacement.
It worked.
 <td></tr>
<td valign=top nowrap>&#149; &nbsp;</td><td>
I remember Roger advising a customer to connect 
pins 4 and 7 on their 3705. 
The uneasy customer called the IBM development team.  
&ldquo;Who told you to do a stupid thing like that?&rdquo; 
&ldquo;Roger Moore&rdquo;. 
&ldquo;Oh well that&rsquo;s OK, 
Roger knows more about this device than we do.&rdquo;
 <td></tr>
<td valign=top nowrap>&#149; &nbsp;</td><td>
I remember one night a customer phoned the London office for APL help, 
was given a quick solution, and 
asked, &ldquo;Who is this? I want to mention you to the boss.&rdquo;<br>
&ldquo;My name is Ian Sharp.&rdquo;<br>
&ldquo;Wow, must be handy to have a name like that.&rdquo;<br>
&ldquo;It is,&rdquo; Ian replied without further elaboration.<br>
Fred Perkins got a laugh the next morning.
 <td></tr>
<td valign=top nowrap>&#149; &nbsp;</td><td>
I remember people urging Ian to dump a painful, 
overdue Morgan Stanley project. There was no contractual penalty. 
But we gave our word, said Ian. 
That was the end of that.
 <td></tr>
<td valign=top nowrap>&#149; &nbsp;</td><td>
Ian didn&rsquo;t stand on policy; he operated on trust.  
When I applied to Sharp, I asked about sick leave. Ian looked perplexed. 
&ldquo;When you&rsquo;re sick, you stay home.&rdquo; 
I persisted. &ldquo;How LONG can I stay home?&rdquo; 
Even more perplexed, Ian said, &ldquo;Until you&rsquo;re better.&rdquo; <td></tr>
</table>

<p align=right>&#151;
Lib Gibson,
<a target=APLQAx href="http://www.jsoftware.com/papers/IPSA50.htm"><i>IPSA50</i></a>,
2014-10-04
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="IPSA50_IPS"></a>
And then there&rsquo;s Ian. The heart of the company.</p>

<p>A 21st century company waaay back in the last century. 
Relatively flat and widely dispersed, 
I.P.Sharp was held together by electronics and camaraderie. And Ian.</p>

<p>The company was blind on race, creed, colour, nationality, sexual orientation, 
and eccentricity. And gender. 
I left IPSA with a suspicion that discrimination against women was a myth. 
Yeah. Right.</p>

<p align=right>&#151;
Lib Gibson,
<a target=APLQAx href="http://www.jsoftware.com/papers/IPSA50.htm"><i>IPSA50</i></a>,
2014-10-04
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="max_and_min"></a>
An <a target=APLQAx href="http://forums.dyalog.com/viewtopic.php?f=30&t=960&sid=1e69ba01f2fbaf86f89bc218a55fc876">exchange</a> on the Dyalog Forum,
re: Explanation of APL Execution Order.</p>

<table>
<tr><td valign=top><b>dziemann</b></td> <td nowrap>&nbsp; &nbsp;</td> <td>
<p>Can anyone help me? I&rsquo;m enjoying a little argument in one of the Facebook groups I&rsquo;m in. 
It&rsquo;s about arithmetic order of execution, not in the programming context, but purely arithmetical.</p>

<p>The audience is intelligent and erudite, with a linguistic bent, but they&rsquo;re not programmers. 
What I&rsquo;m looking for is an authoratitive (Iverson?) lay explanation of how &ldquo;right-to-left&rdquo; execution 
(if I may characterise it that way) works, 
and why it&rsquo;s better. I&rsquo;m dismayed that I can&rsquo;t easily find one. Do you know of such a thing?
<br>&nbsp;</p>
 </td></tr>

<tr><td valign=top><b>Roger|Dyalog</b></td> <td></td> <td>
<p>Hello Dave. Been a long time. How are<tt> ⌈ </tt>and<tt> ⌊</tt>&nbsp;? &#9786;</p>

<p>See Iverson, <i>Conventions Governing Order of Evaluation</i>, 1966 
(<a target=APLQAx href="http://www.jsoftware.com/papers/EvalOrder.htm">http://www.jsoftware.com/papers/EvalOrder.htm</a>). 
If you want a &ldquo;sound bite&rdquo;, ask the question, 
what&rsquo;s the order of evaluation for<nobr><tt> sin cos sqrt x</tt>&nbsp;?</nobr>
<br>&nbsp;</p>
 </td></tr>

<tr><td valign=top><b>kai</b></td> <td></td> <td>
<p>&ldquo;How are<tt> ⌈ </tt>and<tt> ⌊</tt>&nbsp;?&rdquo; Will you elaborate for me?
<br>&nbsp;</p>
 </td></tr>

<tr><td valign=top><b>Phil Last</b></td> <td></td> <td>
<p>My two guesses:</p>

<p>0. First of all I thought Roger was asking the pertinent question &mdash; 
<b>where in<tt> +, -, ×, ÷ </tt>would<tt> ⌈ </tt>and<tt> ⌊ </tt>fit?</b> 
But from the wording perhaps not.</p>

<p>1. Two mutual friends, one tall, one short.</p>

<p>Probably both wrong.
<br>&nbsp;</p>

<tr><td valign=top><b>Roger|Dyalog</b></td> <td></td> <td>
<p><b>dziemann</b>, unless I am totally wrong, is Dave Ziemann. 
He was such an APL devotee that he named two of his children Max and Min. 
I was going to put in<tt> </tt>&ldquo;<tt>⌈ </tt>and<tt> ⌊</tt>&nbsp;,<tt> </tt>dyadic cases&rdquo;, 
but it&rsquo;s kind of obvious, right? 
Who&rsquo;d choose Floor and Ceiling as names for people? &#9786;</p>

<p>It&rsquo;s amusing to go through the list of APL primitives 
to see what other names are plausible.
<br>&nbsp;</p>
 </td></tr>

<tr><td valign=top><b>dziemann</b></td> <td></td> <td>
<p>My goodness, I&rsquo;ve been away a while haven&rsquo;t I? Hello everyone. 
Thank you Roger for your reply, great to hear from you!</p>

<p>Regarding the Max and Min story. As Snopes might say:  Partially TRUE.</p>

<p>I was indeed such a devotee of APL that I named my first child Max. 
Therefore obviously we hoped that our next child would be a girl, 
and, yes, three years later my daughter was born!
However at that point we bottled out, determining that she would be forever 
resentful to have been considered the lesser child. 
(Knowing her character now, this was a good decision.)</p>

<p>So we chose the name Miranda instead; 
she&rsquo;ll have to be satisfied with having 
the name of an APL function embedded in her name.
</p>
 </td></tr>
</table>

<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="punch_lines"></a>
My daughter Rachel loves jokes and riddles, both hearing them and telling them.  
Over the years we&rsquo;ve told and retold each other many jokes.  
Lately we&rsquo;ve taken to reciting just the punch lines.  
The &ldquo;compression ratio&rdquo; is high.</p>

<p>Spot.  Stripes.  Next!  
Roosters don&rsquo;t lay eggs.  One egg is un oeuf.  
She had to stop to ask for directions.  Concentrate.  
We go at night.  
It&rsquo;s the first day I had me hook.  
Now if another person walks into the house it&rsquo;d be empty.  
Skiing, sir.  We are out of flies today.  
What friend?  Praise the Lord!  
I didn&rsquo;t know you could yodel.  
I&rsquo;ve always wanted to play the piano.  
Want to ride bikes? 
I&rsquo;d like to have a cheeseburger, a milk shake, and fries please.
It&rsquo;s the way you tell it. &#133;</p>

<table align=center>
<tr><td><img src="https://www.jsoftware.com/papers/APLimg/JohnRachel.jpg" width=200 height=232></img>
<p align=center><font size=-1>John Scholes and Rachel Hui, Somerset, 2011</font></p>
 </td>
 <td>&nbsp; &nbsp;</td>
<td><img src="https://www.jsoftware.com/papers/APLimg/KenRachel.jpg" width=183 height=232></img>
<p align=center><font size=-1>Ken Iverson and Rachel Hui, Toronto, 2004</font></p>
</td>
</tr></table>
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="osmosis"></a>
The other night Henry wasn&rsquo;t sleeping well so 
Tania propped up one end of his Moses basket with a book. 
This morning I noticed that he has been sleeping with his 
head resting on <i>The Art of Computer Programming, 
Volume 3 &mdash; Sorting and Searching</i>!</p>

<p align=right>&#151;
Jay Foad
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="obverse"></a>
The <i>under</i> operator (<tt>⍢</tt>) proposal 
includes an <i>obverse</i> operator<tt> ⍫</tt>&nbsp;,<tt> </tt>
where<tt> f⍫g </tt> <i>specifies</i> that<tt> g </tt>
is the &ldquo;inverse&rdquo; of<tt> f </tt>
(and <i>vice versa</i>).  
This should reduce the pressure to extend the 
interpreter to invert this, that, or the other.  
For example, if the system can not invert<tt> FFT </tt>
(it&rsquo;s extremely unlikely to be able to), 
you can say<tt> ×⍢(FFT⍫IFT) </tt>for the fast digital multiplication.</p>

<p><tt>f⍫g </tt>&harr;<tt> f </tt>except 
that<tt> f⍫g⍣¯1 </tt>&harr;<tt> g⍫f</tt>&nbsp;.<tt> </tt>
<i>Obverse</i> is pretty straightforward. 
There are no side effects, no special line labels, 
no special syntax in the header, etc.
One reason it&rsquo;s called &ldquo;obverse&rdquo; 
instead of &ldquo;inverse&rdquo; 
is that<tt> g </tt>doesn&rsquo;t have 
to be an inverse in the mathematical sense.  
You can, for example, say<nobr><tt> -⍫('funny'∘⊣) </tt></nobr>
even though<tt> 'funny'∘⊣ </tt> 
is not commonly considered an inverse of<tt> -</tt>&nbsp;.</p>

<p>A related idea: J also has <i>adverse</i>:<tt> f Adverse g </tt>&harr;<tt> f </tt>
except that if you get an error in applying<tt> f </tt>then you apply<tt> g</tt>&nbsp;.
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="perverse"></a>
> &nbsp; You can, for example, say<tt> -⍫('funny'∘⊣) </tt>even though<tt> 'funny'∘⊣ </tt><br>
> &nbsp; is not commonly considered an inverse of<tt> -</tt>&nbsp;.</p>

<p>I&rsquo;d call that &ldquo;perverse&rdquo;. &#x263a;</p>

<p align=right>&#151;
Nick Nickolov
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="worldmathsday"></a>
It&rsquo;s <a target=APLQAx href="http://twitter.com/search?q=%23worldmathsday%20%23apl">#worldmathsday</a>
and the call went out for suitable tweets.  The answer is obvious:</p>

<pre>
   0 = 1 + * ○ 0j1
</pre>

<p>is the <a target=APLQAx href="http://www.jsoftware.com/jwiki/Essays/Euler's_Identity">most 
beautiful equation</a> in all of mathematics, 
relating in one short phrase the fundamental quantities 0, 1, <i>e</i>, &pi;, 
and 0j1 and the basic operations plus, times, and exponentiation.</p>

<p>What is not so obvious is why and how the equation holds in Dyalog APL.  
With the vicissitudes of floating point representation, transcendental functions, 
and (non-tolerant) comparison with 0, one expects that<tt> 1+*○0j1 </tt>would give 
a tiny number close to 0 but not exactly 0 and the equation would be false.  
So in addition to everything else,<tt> 0=1+*○0j1 </tt>is a subtle show off.</p>

<pre>
   ⎕ ← a ← 3 4⍴⍳12
0 1  2  3
4 5  6  7
8 9 10 11

   * ○ 0j1 × a ÷ 2         ⍝ show off
1 0J1 ¯1 0J¯1
1 0J1 ¯1 0J¯1
1 0J1 ¯1 0J¯1

   * ○ 0j1 × 2e9 + a ÷ 2   ⍝ shameless show off
1 0J1 ¯1 0J¯1
1 0J1 ¯1 0J¯1
1 0J1 ¯1 0J¯1
</pre>

<p>[Guess who did the coding to make this happen?]
<br>&nbsp;</p></td></tr>


<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Star_Wars"></a>
<b>In Honour of a Certain Movie Series</b><br></p>

<table>
<tr><td valign=top><tt>may←+⌿÷≢ ⋄ may∘∪</tt>  </td> <td valign=top>may the fork be with you</td></tr>
<tr><td valign=top><tt>0 1 2 3 (⌊/⍬) 5 6</tt> </td> <td valign=top>the fourth is strong with this one</td></tr>
<tr><td valign=top><tt>4 4 4 4 (⌊/⍬) 4 4</tt> </td> <td valign=top>I feel a great disturbance in the fours</td></tr>
<tr><td valign=top><tt>1=?2e9</tt>            </td> <td valign=top>this is not the number you are looking for</td></tr>
<tr><td valign=top><tt>1=?2e9</tt>            </td> <td valign=top>in my experience, there&rsquo;s no such thing as luck</td></tr>
<tr><td valign=top><tt>Luke.##</tt>           </td> <td valign=top>I AM your father</td></tr>
<tr><td valign=top><tt>4 ⊃ 0 1 2 3 'dark side'</tt></td>
                                                    <td valign=top>vier ist the path to the dark side</td></tr>
<tr><td valign=top><tt>x{0.5×⍵+⍺÷⍵}⍣≡darkside</tt> </td> 
                                                    <td valign=top>do not underestimate the power of the dark side</td></tr>
<tr><td valign=top><tt>⎕ct←1</tt>             </td> <td valign=top>I find your lack of faith disturbing</td></tr>
<tr><td nowrap><tt>0.2 ∊ ÷3 1 4 1 9 2 6 3 8 9 7 9&nbsp;</tt></td> 
                                                    <td valign=top>I find your lack of a-fifth disturbing</td></tr>
<tr><td valign=top><tt>{0::⍺⍺~⍵ ⋄ ⍺⍺ ⍵}</tt>  </td> <td valign=top>do, or do not; there is no<tt> :Try</tt></td></tr>
</table>
<p align=right>&#151;
<a target=APLQAx href="http://www.dyalog.com/blog/2015/12/apl-puns/"><i>APL Puns</i></a>,
Dyalog Blog, 2015-12-16
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Charles_Brenner"></a>
I created a <a target=APLQAx href="http://en.wikipedia.org/wiki/Charles_Brenner_(mathematician)">Wikipedia page</a> for Charles Brenner.  
There are people in Wikipedia going around deleting newly created pages 
because the subjects are &ldquo;not notable enough&rdquo;.  
I did not have to wait long:</p>

<table>
<tr><td>2016-04-03T04:55:24 &nbsp;</td><td>page creation</td></tr>
<tr><td>2016-04-03T04:58:03‎</td><td>edit</td></tr>
<tr><td>2016-04-03T05:03:37</td><td>edit</td></tr>
<tr><td></td></tr>
<tr><td>2016-04-03T05:12:01‎</td><td>request for speedy deletion</td></tr>
<tr><td>2016-04-03T05:12:39</td><td>withdraw of request by same person</td></tr>
</table>

<p>I told Charles that he may be interested to know that Google <i>loves</i>
Wikipedia, and that I expect very soon his Wikipedia page will show up 
near the top of any Google search of &ldquo;Charles Brenner&rdquo;,
pushing the large number of other Charles Brenners 
further down the list.
Charles quipped that making a Wikipedia page is 
probably a better course of action than arranging to reduce that number.
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Srinivasa"></a>On 2016-10-15 I presented 
<i>A Tour (de Force) of APL in 16 Expressions</i> at 
<a target=APLQAx href="http://confengine.com/functional-conf-2016/schedule/rich#session-22789-info">Functional 
Conf 2016</a> at Bengalore, India.
I introduced section E of my talk by saying, 
&ldquo;After coming all this way to within 200 miles of Kumbakonam, 
of course I have to talk about Ramanujan.&rdquo;</p>

<p>On leaving Bangalore, the passport control officer 
I dealt with had &ldquo;S. Srinivasa&rdquo; on his name tag.  
I asked him if he knew of Ramanujan.  He smiled and said yes.  
It turned out he was a distant relative of Ramanujan.  
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="DanB"></a>The Dyalog APL interpreter has 
special code to improve the efficiency of certain useful computations. 
In version 15.0, the current version, there is a 
&ldquo;Dan Baronet special&rdquo;:<tt> b⊥b </tt>
is computed by special code 
motivated by Dan&rsquo;s observation that it computes 
the number of trailing 1s in boolean vector<tt> b</tt>&nbsp;.<tt> </tt> 
With the special code, it is &ldquo;infinitely faster&rdquo;.</p>

<p align=right>&#151;  
<a target=APLQAx href="http://danielbaronet.rip/"><i>Daniel Baronet, 1956-2016</i></a>
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="astrophysics"></a>An 
<a target=APLQAx href="http://jsoftware.com/pipermail/programming/2017-October/049125.html">exchange on the J Forum</a> on 2017-10-10:</p>

<p>User: I would be genuinely interested in reading 
about real world applications of J.</p>

<p>Patrick Harrington: Not &ldquo;real world&rdquo;, more &ldquo;out ot this world&rdquo;. 
I use J for most of my exploratory calculations in astrophysics. e.g.,
<a target=APLQAx href="http://www.astro.umd.edu/~jph/J_page.html">http://www.astro.umd.edu/~jph/J_page.html</a>.
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="quiet"></a>At
the Dyalog &rsquo;18 User Meeting I once sat across
from Will Robertson at breakfast.
After a while, to break the silence,
I told Will the following two stories:</p>

<p>Colleagues of the Swedish diplomat Gunnar Jarring
were skeptical of news reports that Jarring 
responded to questions about the progress of negotiations
by saying, &ldquo;No comment&rdquo;,
reasoning that he could not have said so much.</p>

<p>The physicist Paul Dirac was famous for his taciturnity.
His colleagues, being physcists, devised a unit for 
measuring this: the dirac, 
defined as one word per hour. 
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="idempotent"></a>
<p>An array to be sorted can be converted to an order-equivalent integer array 
by assigning to each item an ordinal (an integer) which has 
the same ordering relationship as the original item relative 
to other items in the array:</p>

<pre>
   sort    ← {(⊂⍋⍵)⌷⍵}
   ordinal ← {⎕ct←0 ⋄ ⍵⍳⍨sort,⍵}
</pre>

<p>That is, the ordinals obtain as the indices of the original array 
in the sorted list of the ravelled elements, using exact comparisons.
(Exact comparisons are used because sorting necessarily uses
exact comparisons.)</p>

<p>&#133;</p>

<pre>
   (ordinal x) ≡ ordinal ordinal x
1
</pre>

<p>That is,<tt> ordinal </tt>is idempotent.
Actually, this is kind of obvious, but I never miss an opportunity
to use the word &ldquo;idempotent&rdquo;.&#x263a;</p>

<p align=right>&#151;
Roger Hui, 
<a target=APLQAx href="http://www.dyalog.com/blog/2019/02/ascending-and-descending/"><i>Ascending and Descending</i></a>, 
Dyalog Blog, 2019
<br>&nbsp;</td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Jolly_Good_Fellow"></a>
Dear Guy Steele,</p>

<p>We were bemused and pleased to receive your 
&ldquo;strong encouragement&rdquo; 
to write a paper about successors to APL.  
Bemused to be talking about successors to APL because APL 
is still around, y&rsquo;know?  
Pleased because this past year 
(since <nobr>1966-11-27</nobr> <nobr>22.53.58 UTC</nobr>, to be exact) 
was the 50-th anniversary of APL, 
and it would be a fitting celebration to write about APL for HOPL4.  
In addition, one of us (Hui) is pleased to be renewing our acquaintance 
as he was in the audience when you presented 
your paper <i>Constraints</i> at the APL 79 conference in Rochester, 
wherein you were described as a Fannie and John Hertz Fellow 
and your co-author and professor Gerald Sussman as a Jolly Good Fellow.
&#133;</p>

<p align=right>&#151;
Roger Hui, 
responding to Call for Participation<br>
from HOPL4, <nobr>2017-09-22</nobr>
<br>&nbsp;</td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="APL_Since_1978"></a>
<b>Personalities</b></p>

<p>The design of APL since 1978 received significant input from a small number of people
with intertwined personal relationships.
</p>

<p>Ken Iverson led the way with his seminal paper 
<a target=APLQAx href="http://www.jsoftware.com/papers/opfns.htm"><i>Operators and Functions</i></a>
(<acronym title="Iverson, K.E., Operators and Functions, Research Report #RC7091, IBM, 1978-04-26.">Iverson 
1978a</acronym>).
The ideas were further developed in 
<a target=APLQAx href="http://www.jsoftware.com/papers/APLModel.htm"><i>Practical Uses of a Model of APL</i></a>
(<acronym title="verson, K.E., and A.T. Whitney, Practical Uses of a Model of APL, APL82 Conference Proceedings, APL Quote Quad, Volume 13, Number 1, 1982-09.">Iverson
&amp; Whitney 1982</acronym>),
<a target=APLQAx href="http://www.jsoftware.com/papers/RationalizedAPL.htm"><i>Rationalized APL</i></a>
(<acronym title="Iverson, K.E., Rationalized APL, I.P. Sharp Associates, 1983-01-06; revision 1, 1983-04-04.">Iverson 
1983a</acronym>),
<a target=APLQAx href="http://www.jsoftware.com/papers/APLDictionary.htm"><i>A Dictionary of APL</i></a>
(<acronym title="Iverson, K.E., A Dictionary of APL, APL Quote Quad, Volume 18, Number 1, 1987-09.">Iverson 
1987</acronym>),
and 
<a target=APLQAx href="http://www.jsoftware.com/help/dictionary/contents.htm"><i>J Introduction and Dictionary</i></a>
(<acronym title="Hui, R.K.W., and K.E. Iverson, J Introduction and Dictionary, Jsoftware Inc., 1989-2004.">Hui 
&amp; Iverson 1989-2004</acronym>).
</p>

<table><tr><td valign=top>
<p>Iverson and Eoin Whitney, father of Arthur Whitney, were both born in 1920 
in small towns in northern Alberta, Canada,
both served in the RCAF in WWII, 
and both won graduate scholarships to Harvard in the early 1950s,
where they first met and became friends
(<acronym title="Whitney, A.T., Memories of Ken, Vector, Volume 22, Number 3, 2006-08.">Whitney 
2006</acronym>).
In 1969, Iverson showed APL to 11-year-old Arthur Whitney 
(<acronym title="Cantrill, B.M., A Conversation with Arthur Whitney, ACM Queue, Volume 7, Number 2, 2009-02.">Cantrill 2005</acronym>), 
and in 1974 recommended him for a summer student
position at IPSA Calgary.
In the early 1980s, Iverson and Whitney were on staff at IPSA Toronto and
had a couple of years of fruitful collaboration
(<acronym title="Iverson, K.E., and A.T. Whitney, Practical Uses of a Model of APL, APL82 Conference Proceedings, APL Quote Quad, Volume 13, Number 1, 1982-09.">Iverson
&amp; Whitney 1982</acronym>).
They kept in touch in subsequent years.
Whitney&rsquo;s enduring and significant influence on APL 
(let alone on A and k and Kdb+)
can be gauged by the number of instances in the current text 
of &ldquo;invented by Arthur Whitney&rdquo;,
&ldquo;on a suggestion by Arthur Whitney&rdquo;, and the like.</p>
</td><td></td><td valign=top>
<p align=center><a target=APLQAx href="https://www.jsoftware.com/papers/APL_KEInATW.htm"><img src="https://www.jsoftware.com/papers/APLimg/KEInATW.jpg" width=180 align=right></img></a><br>
<font size=-1>Ken Iverson and Arthur Whitney, 1989</font></p>
</td></tr></table>

<table><tr><td valign=top>
<p>Roger Hui and Whitney were undergraduates at the University of Alberta in the 1970s
and became acquainted in Professor Muldowney&rsquo;s real analysis class.
Hui was a summer student at IPSA Calgary in 1975 where Whitney was the year before.  
In the mid 1980s, Iverson and Hui were employed at IPSA Toronto;
the seeds of their collaboration were planted by the paper 
<a target=APLQAx href="http://www.jsoftware.com/papers/from.htm"><i>Some Uses of</i> <tt>{</tt> <i>and</i> <tt>}</tt></a>
(<acronym title="Hui, R.K.W., Some Uses of { and } , APL87 Conference Proceedings, APL Quote Quad, Volume 17, Number 4, 1987-05.">Hui 
1987</acronym>).
When Iverson and Whitney met to discuss APL at the Kiln Farm one summer weekend in 1989,
Hui was present on the first day by Whitney&rsquo;s invitation.
The &ldquo;one page thing&rdquo; that Whitney wrote on the afternoon of the second day
provided the final impetus that got J started (&sect;8.4).
Between 1989 and 2004, Hui apprenticed with Iverson working on J.</p>
</td><td></td><td valign=top>
<p align=center><img src="https://www.jsoftware.com/papers/APLimg/RogerHui.jpg" width=180 align=right></img><br>
<font size=-1>Roger Hui, 2018</font></p>
</td></tr></table>

<p>Morten Kromberg started at IPSA in the spring or summer of 1979 at age 16,
when he was given a key to the IPSA Oslo office and a free APL account. 
In 2005, he became CTO and later CXO of Dyalog Limited
(in a sense the guerrilla (<a href="APLQA.htm#guerrilla"><i>q.v.</i></a>)
who took over command of the army), 
together with Gitte Christensen who assumed the role of CEO. 
Coming from a background in SHARP APL and taking charge 
of an APL2-based language implementation, 
Christensen and Kromberg have been 
instrumental in healing some of the wounds 
opened when second-generation APL systems were born.
Kromberg independently invented futures and isolates (&sect;4.4).</p>

<table align=center><tr>
<td><p align=center><img src="https://www.jsoftware.com/papers/APLimg/MortenKromberg.jpg" width=180></img><br>
<font size=-1>Morten Kromberg, 2016</font></p></td>
<td>&nbsp;</td>
<td><p align=center><img src="https://www.jsoftware.com/papers/APLimg/GitteChristensen.jpg" width=180></img><br>
<font size=-1>Gitte Christensen, 2018</font></p></td>
</tr></table>

<p>An important factor in these personal relationships
was the world-wide e-mail
system Mailbox (666&nbsp;<i>BOX</i>) extant at IPSA since the early 1970s
(<acronym title="Goldsmith, L.H., 666 BOX, in APL Quotations and Anecdotes, R.K.W. Hui, editor, 2010.">Goldsmith
2010</acronym>).
Mailbox provided for discussion groups on language design,
programming questions, newbie help, etc. 
as well as person-to-person exchanges. 
(Kromberg (in Norway) first &ldquo;met&rdquo; Christensen (in Denmark) 
through Mailbox. They are still together.)
IBM developed its own e-mail system 
after a key developer used Mailbox and consulted with its implementer
(<acronym title="McGrew, J. Forgotten APL Influences, APL-Journal, volume 35, numbers 1&2, pages 21-54, 2016.">McGrew-2016</acronym>).
</p>

<table><tr><td valign=top>
<p align=center><img src="https://www.jsoftware.com/papers/APLimg/JimBrown.jpg" width=180 align=left></img>
<font size=-1>Jim Brown, 1982</font></p>
</td><td>&nbsp;</td><td valign=top>
<p>Jim Brown first encountered APL in 1965 when he started work  
at IBM Federal Systems in Owego, New York.
In 1969, he got a summer position with the APL group at IBM Yorktown Research.
Due to an administrative error, the summer job was not terminated after the summer 
and lasted three years
(<acronym title="Brown, J.A., A Personal History of APL, 2016-11-27.">Brown 2016</acronym>). 
His Ph.D. thesis was entitled 
<a target=APLQAx href="http://www.softwarepreservation.org/projects/apl/Books/AGENERALIZATIONOFAPL"><i>A Generalization of APL</i></a>
(<acronym title="Brown, J.A., A Generalization of APL, Ph.D. Thesis, Syracuse University, 1971-09.">Brown 
1971</acronym>).
He shepherded APL2 through IBM from conception to product release,
in the 1970s and 80s.
The key innovations are nested arrays and strand notation,
respectively general arrays and generalized vector notation
(<acronym title="Brown, J.A., The Principles of APL2, TR 03.247, IBM Santa Teresa Laboratory, San Jose, California, 1984-03.">Brown 
1984</acronym>). 
Brown left IBM in 1996.
<br>&nbsp;</p>
</td></tr>

<tr><td valign=top>
<p align=center><img src="https://www.jsoftware.com/papers/APLimg/BobSmith.jpg" width=180></img>
<font size=-1>Bob Smith, 2016</font></p>
</td><td>&nbsp;</td><td valign=top>
<p>Bob Smith encountered APL at the National Security Agency in 1969/70
(<acronym title="Hui, R.K.W., editor, Ken Iverson Quotations and Anecdotes, 2005-09-30.">Hui 2005b</acronym>;
<acronym title="Smith, R.A., e-mail messages, 2018-11-18 to -22.">Smith 2018</acronym>).
He joined STSC in 1971.  In 1981, he designed and implemented NARS, 
officially to do nested arrays but included  
many of the ideas in 
<a target=APLQAx href="http://www.jsoftware.com/papers/opfns.htm"><i>Operators and Functions</i></a>
(<acronym title="Cheney, C.M., APL*Plus Nested Array System Reference Manual, 1981-03.">Cheney 1981</acronym>;
<acronym title="Iverson, K.E., Operators and Functions, Research Report #RC7091, IBM, 1978-04-26. (a)">Iverson 1978a</acronym>).
He left STSC in 1983 for other pursuits,
but returned to APL in 2006 to develop NARS2000
(<acronym title="Smith, R.A., NARS2000, 2006-2018.">Smith 2006</acronym>).
</p>
</td></tr></table>
<br>

<table><tr><td valign=top>
<p>John Scholes started with Atkins Computing and Xerox APL. 
At Dyalog, he and colleagues developed Dyalog APL intending to follow APL2 
but using NARS as the blueprint&mdash;information 
about APL2 did not become publicly available until after Dyalog APL version 1.0 in April 1983.
Scholes later designed and implemented direct functions (dfns, &sect;1.2)
(<acronym title="Scholes, J.M., Direct Functions in Dyalog APL, Vector, Volume 13, Number 2, 1996-10.">Scholes 
1996</acronym>;
<acronym title="Scholes, J.M., Dfns — Past, Present and Future, Dyalog User Meeting 2018, 2018-10-31.">Scholes 
2018</acronym>).</p></td>
<td></td>
<td valign=top><img src="https://www.jsoftware.com/papers/APLimg/JohnScholes.jpg" width=180 align=right></img>
<p align=center><font size=-1>John Scholes, 2018</font></p></td>
</tr></table>

<p>John Daintree joined Dyalog Ltd. in September 1991, and designed and implemented objects and namespaces
(<acronym title="Dyalog, Dyalog at 25, Vector, 2008-09.">Dyalog 2008</acronym>).
He became &ldquo;the GUI guy&rdquo; and later Chief Architect.</p>

<p align=center><img src="https://www.jsoftware.com/papers/APLimg/JohnDaintree.jpg" width=180></img><br>
<font size=-1>John Daintree, 2018</font></p>

<a name="guerrilla"></a>
<b>Guerrilla Projects</b></p>

<p>It is striking how many of the ideas
important to current APL were nurtured in &ldquo;guerrilla projects&rdquo;,
projects undertaken with the grudging approval, or tolerance,
or ignorance, or outright objection, of management.
These took place coeval with rapid changes 
in the &ldquo;APL biz&rdquo;
and in the ecology of computing.</p>

<p>APL2 developed over 15 years, 
with coding starting in 1971 and
release as an IBM program product in 1984.
Fourteen years were an unusually long gestation period.
In that time, the developers were kept busy
&ldquo;producing other results of value to the company&rdquo;,
and were transferred between three or four divisions
and made several moves between the US Atlantic and Pacific coasts
(<acronym title="Falkoff, A.D., The IBM Family of APL Systems, IBM Systems Journal, Volume 30, Number 4, 1991-12.">Falkoff 
1991</acronym>; 
<acronym title="Brown, J.A., A Personal History of APL, 2016-11-27.">Brown 2016</acronym>).
</p>

<p><a target=APLQAx href="http://www.jsoftware.com/papers/opfns.htm"><i>Operators and Functions</i></a>
(<acronym title="Iverson, K.E., Operators and Functions, Research Report #RC7091, IBM, 1978-04-26.">Iverson 
1978a</acronym>) was published while Iverson was at IBM.
Unable to gain traction for his views at IBM, Iverson accepted an offer to join IPSA in 1980.
Further development of the ideas gained impetus in the early 1980s when Iverson and Arthur Whitney
found themselves employed at IPSA Toronto at the same time.
Officially, Whitney was supposed to be working on the
OAG (Official Airline Guide) database, and he did, rewriting it from scratch
and turning a failed project for a critical customer into a resounding success;
unofficially, Whitney collaborated with Iverson and implemented
the new APL ideas in a model written in APL,
spending much more time on the APL model than on OAG 
(<acronym title="Iverson, E.B., e-mail message, 2016-04-12.">Iverson 2016</acronym>;
<acronym title="Whitney, A.T., e-mail message, 2016-04-13.">Whitney 2016</acronym>;
<acronym title="Hui, R.K.W., editor, Ken Iverson Quotations and Anecdotes, 2005-09-30.">Hui 
2005b</acronym>).
The work was reported in
<a target=APLQAx href="http://www.jsoftware.com/papers/APLModel.htm"><i>Practical Uses of a Model of APL</i></a>
(<acronym title="verson, K.E., and A.T. Whitney, Practical Uses of a Model of APL, APL82 Conference Proceedings, APL Quote Quad, Volume 13, Number 1, 1982-09.">Iverson
&amp; Whitney 1982</acronym>).
(While en route to the presentation of this paper at APL82 in Heidelberg, 
Whitney invented the rank operator.
See &sect;3.1.)
Iverson also participated in the OAG project. 
Eric Iverson, son of Ken Iverson and the IPSA manager
for both Iverson and Whitney, was unaware of this participation 
until 35 years later
(<acronym title="Iverson, E.B., e-mail message, 2016-04-12.">Iverson 2016</acronym>;
<acronym title="Hui, R.K.W., editor, Ken Iverson Quotations and Anecdotes, 2005-09-30.">Hui 
2005b</acronym>).</p>

<p>Iverson continued to work on APL after he &ldquo;retired from paid employment&rdquo; in 1987
(<acronym title="Iverson, K.E., A Personal View of APL, IBM Systems Journal, Volume 30, Number 4, 1991-12.">Iverson 
1991</acronym>).
The J project was launched when Whitney wrote a 1-page interpreter fragment
one Sunday afternoon in 1989 (&sect;8.4),
and began in earnest when Roger Hui also retired from paid employment
(or so he thought) to join forces with Iverson on <nobr>1990-04-01.</nobr>
The collaboration continued until Iverson&rsquo;s passing in October 2004.
</p>

<p>The original goal of NARS 
(<acronym title="Cheney, C.M., APL*Plus Nested Array System Reference Manual, 1981-03.">Cheney 
1981</acronym>) was to implement nested arrays
but many of the ideas in <i>Operators and Functions</i>
were also implemented.  
Management supported the extra stuff &ldquo;mostly by ignoring&rdquo; 
Bob Smith, the designer and implementer,
and &ldquo;letting [him] do whatever [he] wanted&rdquo;.
Smith left STSC in 1983
(<acronym title="Smith, R.A., e-mail messages, 2018-11-18 to -22.">Smith 2018</acronym>).
</p>

<p>John Scholes invented <i>direct functions</i> or dfns (pronounced &ldquo;dee funs&rdquo;),
a major distinguishing advance of current APL over previous versions (&sect;1.2).
The ideas originated when he read a special issue of <i>The Computer Journal</i> on functional programming
(<acronym title="Wadler, P.L., et al., Special Issue on Functional Programming, The Computer Journal, Volume 32, Issue 2, 1989-01-01.">Wadler 
<i>et al.</i> 1989</acronym>).
He proceeded to study other publications on functional programming
and became strongly motivated (&ldquo;sick with desire&rdquo;, like Yeats) to bring these ideas to APL
(<acronym title="Scholes, J.M., Dfns — Past, Present and Future, Dyalog User Meeting 2018, 2018-10-31.">Scholes 2018</acronym>).
He initially operated in stealth 
because he was concerned the changes might be judged too radical and an unnecessary complication of the language;
other observers say that he operated in stealth because the rest of Dyalog 
were not so enamored and thought he was wasting his time and causing 
trouble for people.
Dfns were first presented at APL96 in San Antonio and released in Dyalog APL in early 1997
(<acronym title="Scholes, J.M., Direct Functions in Dyalog APL, Vector, Volume 13, Number 2, 1996-10.">Scholes 1996</acronym>).
Acceptance and recognition were slow in coming. 
As late as 2008, in 
<a target=APLQAx href="http://archive.vector.org.uk/issues/d25.pdf"><i>Dyalog at 25</i></a>
(<acronym title="Dyalog, Dyalog at 25, Vector, 2008-09.">Dyalog 2008</acronym>),
a publication celebrating the 25th anniversary of Dyalog Ltd,
dfns were barely mentioned 
(mentioned twice as &ldquo;dynamic functions&rdquo; and without any elaboration).</p>

<p>Even <i>APL</i>\360, the original APL, never received the full-throated backing of IBM.
Fred Brooks was the discussant of the HOPL I paper 
<a target=APLQAx href="http://www.jsoftware.com/papers/APLEvol.htm"><i>The Evolution of APL</i></a>
(<acronym title="Falkoff, A.D., and K.E. Iverson, The Evolution of APL, ACM SIGPLAN Notices, Volume 13, Number 8, 1978-08.">Falkoff
&amp; Iverson 1978</acronym>).
In his remarks, he self-described as a mid-wife of APL and PL/I and spoke
of the effects of the &ldquo;one-language policy&rdquo; at IBM in the 1960s:</p>

<blockquote>An outgrowth of the development of PL/I was an enunciation of an attempt 
to take on FORTRAN, ALGOL, and COBOL and replace them all with PL/I &mdash;
what was known as the &ldquo;one-language policy&rdquo;. 
These languages each had sufficiently strong community groups. 
The one-language policy had no noticeable effect on them. 
The only one that it had any effect on that I could see 
was unfortunately the implementation of APL that was underway at the time. 
So it&rsquo;s rather like one draws his sword and goes out to slay the foe, 
and in the process of drawing it back, clobbers the friend in the head!</blockquote> 

<p align=right>&#151;
Hui and Kromberg, <i>APL Since 1978</i>, 2020
<br>&nbsp;</td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="looks_good_to_me"></a>
We sent <i>APL Since 1978</i> (60+ pages) to Arthur Whitney for review.  
His comments:</p>

<blockquote>
Lot of work!<br>
Looks good to me.
</blockquote>

<p>The only surprise was that he used more than one sentence.
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="pencil"></a>
I first heard of the concept of &ldquo;holding the pencil&rdquo; from Ken Iverson and Eugene McDonnell.  
Even though Ken (and Adin Falkoff) did the design of APL, 
the implementers, being executors of the last step from the design to the implementation, 
were in control of the fine details.  The battles must have been fierce; see for example
<a target=APLQAx href="http://www.jsoftware.com/papers/KEIQA.htm#implementers1">this anecdote</a> in KEI Q&amp;A.</p>

<p>So if you are &ldquo;holding the pencil&rdquo;, you have the final say 
even though you may just be an amanuensis.  
The highest compliment I ever received from Eugene McDonnell was 
that I &ldquo;held the pencil with a delicate touch&rdquo;.
(I realize that some people may not consider it a compliment.)
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="beyond"></a>
<b>The Beyond</b></p>

<p>Talking to this bloke in The Frogs a couple of nights back.  Turns out he&rsquo;d  had
a near-death experience during an otherwise routine hernia op. After being drawn
along  the  usual tunnel towards a White Light etc.,  finds himself in one of an
infinity of beds equispaced down one side of  a  corridor  stretching  into  the
distance.</p>

<p>Clean,  white  starched  sheets,  heavy  cotton  pyjamas, bright but unobtrusive
lighting, the small soothing sounds of care. Twenty-one degrees C.

<p>Every morning they bring you a new sheet of good white paper, a sharpened pencil
and a smudge-free Erasomatic&trade;.  You spend the day writing a single beautiful
function,  making  many refinements, until you are satisfied with it.  Then, and
only then, you hand in your program and the day draws to a close.</p>

<p>You may reference, contemplate and revise programs written on previous days.</p>

<p>Now and again,  someone  called  Vera  comes  along with one of those sturdy NHS
metal trolleys to bring me a cup of tea and a ginger biscuit.</p>

<p>People seldom talk; there are no phones.</p>

<p align=right>&mdash; John Scholes,
<a target=APLQAx href="http://dfns.dyalog.com/n_beyond.htm"><i>The Beyond</i></a>
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="last_word"></a>
They say never quarrel with a newspaper, 
because they will have the last word, 
and I suppose the same applies to chairmen.</p>

<p align=right>&#151;
Kenneth E. Iverson,
<a target=APLQAx href="http://www.jsoftware.com/papers/APLEvol.htm"><i>The Evolution of APL</i></a>,<br>
Transcript of Presentation, 1978-08
<br>&nbsp;</p></td></tr>



<tr><td colspan=3>
<br><hr>
</td></tr>
</table>


<a name="personae"></a>
<p align=center><b><i>Dramatis Person&aelig;</i></b></p>

<table align=center>
<tr><td valign=top nowrap>
Phil Abrams<br>
Howard Aiken<br>
Linda Alvord<br>
Gene Amdahl<br>
Anthony of Padua<br>
Fred Appleyard<br>
J.G. Arnold<br>
Frank Arthur<br>
Arlene Azzarello<br>
John Backus<br>
Dan Baronet<br>
Frank Bates III<br>
Batman<br>
Alexander G. Bell<br>
Joe Berg<br>
Bob Bernecky<br>
Michael Berry<br>
Paul Berry<br>
Sachiko Berry<br>
Sarita Berry<br>
Eddie Bleasdale<br>
David Bonyun<br>
Richard Bookstaber<br>
Beverly Breed<br>
Larry Breed<br>
Charles Brenner<br>
Joel Brenner<br>
Mary Brenner<br>
Leonid Brezhnev<br>
Dan Bron<br>
Tony Brooker<br>
Fred Brooks<br>
Jim Brown<br>
John Brown<br>
Karen Brown<br>
Nicholas Brown Jr.<br>
Paul Bunyan<br>
William Burroughs<br>
David Butler<br>
Anthony Camacho<br>
Bryan Cantrill<br>
Hal Carim<br>
Ronald Chan<br>
Paul Chapman<br>
Carl Cheney<br>
Ed Cherlin<br>
Gitte Christensen<br>
Bill Clinton<br>
David Crossley<br>
Haskell Curry<br>
John Daintree<br>

</td> <td>&nbsp;</td> <td valign=top nowrap>
Brian Daly<br>
Devil<br>
Lee Dickey<br>
Edsger Dijkstra<br>
Paul Dirac<br>
Peter Donnelly<br>
Flora Dowling<br>
Graham Driscoll<br>
H.A. Driscoll<br>
Dick Dunbar<br>
Tom Edelson<br>
St. Edmund<br>
Ted Edwards<br>
Albert Einstein<br>
Charles Elmer<br>
Alfred Emden<br>
Erdős Pál<br>
Herman Esser<br>
Leonhard Euler<br>
Adin Falkoff<br>
S.Z. de Ferranti<br>
Reteerts Ffoeg<br>
Robert Floyd<br>
Henry Foad<br>
Jay Foad<br>
Tania Foad<br>
David Foot<br>
George Forsythe<br>
Garth Foster<br>
Mary Ellen Foster<br>
Ron Frank<br>
Saint Francis<br>
Bill Gates<br>
Lib Gibson<br>
Valerie Gilbert<br>
John Gilmore<br>
God<br>
Jim Goff<br>
Christian Goldbach<br>
Leslie Goldsmith<br>
Martin Goodman<br>
Saul Gorn<br>
Ronald Graham<br>
J.C.L. Guest<br>
Monty Hall<br>
Patrick Harrington<br>
John Harvard<br>
Fannie Hertz<br>
John Hertz<br>
Bill Hewlett<br>
David Hilbert<br>

</td> <td>&nbsp;</td> <td valign=top nowrap>
Rob Hodgkinson<br>
Douglas Hofstadter<br>
Grace M. Hopper<br>
Maria Hotchkiss<br>
Henry Hudson<br>
Rachel Hui<br>
Roger Hui<br>
Thomas Hunter<br>
Bonnie Iverson<br>
Derrick Iverson<br>
Eric Iverson<br>
Jean Iverson<br>
Ken Iverson<br>
Matthew Iverson<br>
Paul Jackson<br>
Kai Jaeger<br>
Gunnar Jarring<br>
Mike Jenkins<br>
Steve Jobs<br>
Joel Kaplan<br>
William Keele<br>
David Keith<br>
John F. Kennedy<br>
Johannes Kepler<br>
William Keuffel<br>
Donald Knuth<br>
Bob Korsan<br>
Morten Kromberg<br>
S.E. Krueger<br>
Stefano Lanzavecchia<br>
P.S. Laplace<br>
Phil Last<br>
Agness Lathwell<br>
Catherine Lathwell<br>
Dick Lathwell<br>
Jacob Lawrence<br>
John Lawrence<br>
JAN Lee<br>
Princess Louise<br>
Lu Ban<br>
Janet Lustgarten<br>
Eugene McDonnell<br>
Jeanne McDonnell<br>
Ted McDorman<br>
Bob McGhee<br>
Jon McGrew<br>
Donald McIntyre<br>
James McSherry<br>
Gene Mannacio<br>
Marin Mersenne<br>
Raul Miller<br>

</td> <td>&nbsp;</td> <td valign=top nowrap>
Jane Minett<br>
Mike Montalbano<br>
Jeff Moore<br>
Roger Moore<br>
Trenchard More<br>
Henry Morgan<br>
Moses<br>
Allen Newell<br>
Nick Nickolov<br>
Andrew North<br>
David Oldacre<br>
Brian Oliver<br>
David Packard<br>
William Packard<br>
Blaise Pascal<br>
Oren Patashnik<br>
St. Patrick<br>
Jan Peeck<br>
Howard Peelle<br>
Richard Perkin<br>
Fred Perkins<br>
Alan Perlis<br>
Richard Potyok<br>
Julia Powers<br>
Graham Prindle<br>
S. Ramanujan<br>
Jack Ramsay<br>
J. Arthur Rank<br>
Paul Reichmann<br>
Cynthia Rhodes<br>
Henry Rich<br>
Will Robertson<br>
Robin<br>
Al Rose<br>
Laurie Russell<br>
Jim Ryan<br>
Harry Saal<br>
Kyosuke Saigusa<br>
Miyoko Saigusa<br>
Tom Sawyer<br>
Don Scheer<br>
Barbara Schick<br>
John Scholes<br>
George Scranton<br>
Robert Sedgewick<br>
G.K. Sedlmayer<br>
Tom Selleck<br>
Timo Seppälä<br>
Valentina Settimi<br>
Jeffrey Shallit<br>
Wm. Shakespeare<br>

</td> <td>&nbsp;</td> <td valign=top nowrap>
Ian Sharp<br>
Karen Shaw<br>
Andy Shiers<br>
Eugene Skinner<br>
Luke Skywalker<br>
Keith Smillie<br>
Bob Smith<br>
Don Smith<br>
Richard Smith<br>
Morgan Smyth<br>
Spock<br>
S. Srinivasa<br>
Zbigniew Stachniak<br>
Leland Stanford Jr.<br>
Harold Stanley<br>
Mary Stanley<br>
Guy Steele Jr.<br>
David Steinbrook<br>
Bill Strachan<br>
Geoff Streeter<br>
Edward Sussenguth<br>
Gerald Sussman<br>
Roy Sykes Jr.<br>
Stephen Taylor<br>
Santa Teresa<br>
Larry Tesler<br>
Karen Thompson<br>
Norman Thomson<br>
John Thorstensen<br>
Mark Twain<br>
Alan Turing<br>
Joey Tuttle<br>
Queen Victoria<br>
Marie Vilmansen<br>
St. Vitus<br>
Philip Wadler<br>
George Washington<br>
Arthur Watson<br>
Thomas J. Watson Jr.<br>
Thomas J. Watson Sr.<br>
Peter Wegner<br>
Arthur Whitney<br>
Rita Whitney<br>
John Wiley<br>
Maurice Wilkes<br>
Garry Wills<br>
Luther Woodrum<br>
Y.B. Yeats<br>
George Yonge<br>
David Ziemann<br>
Max Ziemann<br>
Miranda Ziemann<br>
</td></tr>
</table>

<table align=center width=550><tr><td>

<br><hr>

<p><font size=-1>Compiled and edited by Roger Hui
(who also contributed the items not explicitly attributed).</font></p>

<p><font size=-1>
<script src="apldisplay.js" type="text/javascript"></script>
</font></p>

<table>
<tr><td><font size=-1>created: &nbsp;</font></td><td><font size=-1>2010-09-18 12:00</font></td></tr>
<tr><td><font size=-1>updated:</font></td><td><font size=-1>2019-04-30 07:45</font></td></tr>
</table>
</tr></td></table>

<br><br>


</body>
</html>
