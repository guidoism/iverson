<html>
<head><meta http-equiv="content-type" content="text/html;charset=utf-8">
<title>Letter to the Editor</title>
<link href="https://www.jsoftware.com/papers/adoc.css" rel=stylesheet></head>
<body>

<table width=520 align=center><tr><td>

<br>
<p align=center><font size=+2>Letter to Editor</font><br><br>
<b>John Gaboury</b></p>
<table>
<br>


<p>Dear Editor:</p>

<p>The continuing controversy over the esoteric functions and difficult
readability of APL is caused by a failure to realize the unique combination of
(1) a concise notation, 
(2) an interpreter rather than a compiler, and
(3) restricted workspaces has resulted in advantages and disadvantages
that cannot be foreseen by considering each characteristic separately.</p>

<p>Using an interpreter means that each time a line is encountered it must 
be translated into machine language.
If algorithms are written in the standard looping fashion,
a lot of CPU time is generated just for interpretation.
Concise APL notation, however, often permits 
one to write expressions that eliminate
this looping for the interpreter.
But the result is an unorthodox expression which is not readily 
understood.</p>

<p>When this situation is combined with a workspace limitation
of 30K or 60K, and perhaps pressure to get results quickly,
it is not hard to realize why documenting a function that takes
less than 15 characters to express in APL is resisted by APL programmers.
This is especially true when the documentation may require over 10 lines
of comment within the function,
as well as auxiliary explanations.
The enclosed function<tt> acc </tt>is a perfect example.</p>

<p><tt>acc </tt>expresses in less than 15 characters what is required.
But even 16 comment lines and 25 lines of auxiliary explanation do  not
give a full appreciation of the power of<tt> acc</tt>&nbsp;.<tt> acc </tt>
can be used <i>anywhere</i> that you derive an expression of 
the form<tt> f[t]←(f[t-1]×i[t])+d[t] </tt>for<tt> t </tt>
taking the values 2, 3, 4, &#133;, 
and<tt> f[1] </tt>given.<tt> d </tt>and<tt> i </tt>
can be vectors derived in very complex ways.
Furthermore,<tt> acc </tt>will also give all
values<tt> f[t] </tt>of the 
form<tt> f[t]←(f[t-1]+d[t])×i[t] </tt>simply by
writing<nobr><tt> (d×i) acc i </tt></nobr>instead
of<nobr><tt> d acc i</tt>&nbsp;.</nobr></p>

<p><tt>acc </tt>was timed on an IBM 370/168 and
used less than 15% of the CPU that the standard 
looping method required for vectors 31 elements long.
This saving results from the fact that APL has a concise
notation and an interpreter.
The saving increases with the length of vectors used
and is enough to warrant use by APL programmers.</p>

<p>A programmer must be concerned about three things:
(1) base programming time,
(2) CPU time, and
(3) documentation time.
By base programming time I mean the time taken to write
and debug programs with no documentation.
Base programming in APL is at least 2&half; times
faster than in any other language and significantly
faster still when done by an expert in APL.
This is APL&rsquo;s great advantage and is widely publicized.</p>

<p>CPU time is a concern if you want to maximize resources,
have a lot of users,
or have a relatively slow computer,
and compact functions like<tt> acc </tt>
should be used.</p>

<p>Documentation is APL&rsquo;s biggest and most vexing problem.
There is a greater need for documentation in APL than in languages
such as Fortran, simply because functions like<tt> acc </tt>
do not occur in Fortran.
Since more documentation is required,
more time is required if programs are to be properly
understood.
However, the limited workspace size deters
most programmers from making adequate documentation.</p>

<p>I believe that this documentation problem can be greatly
lessened, if not eliminated,
by implementing three practices.
First, document functions in one workspace while
using an undocumented version to execute.
Second, have a public library of programming techniques,
standards, and gems like<tt> acc </tt>which are fully
documented and can therefore be referred to concisely.
This will save duplication of effort.
Third, when documenting functions like<tt> acc</tt>&nbsp;,<tt> </tt>
always show the looping version since this is what is easiest to grasp.</p>

<table>
<tr><td>John Gaboury</td></tr>
<tr><td>Systems Development Department</td></tr>
<tr><td>Sun Life Assurance Company of Canada</td></tr>
<tr><td>P.O. Box 6075, Montreal, Canada</td></tr>
<tr><td>29 December 1976</td></tr>
</table>

<pre>

      ∇acc[⎕]∇

    ∇ z←d acc i
[1]  ⍝accumulated∆values ← deposits accumulation 
                                one∆plus∆interest∆rates
[2]   i←×\i
[3]   z←i×+\d÷i
[4]  ⍝    does the same thing as
[5]  ⍝ n←⍴d
[6]  ⍝ z←,d[t←1]
[7]  ⍝over:t←t+1
[8]  ⍝ z←z,d[t]+i[t]×z[t-1]
[9]  ⍝ →(t&lt;n)/over
[10] ⍝
[11] ⍝     a general function which gives every value f[t] of 
                                f[t]←d[t]+f[t-1]×i[t]
[12] ⍝     where
[13] ⍝            d is a vector
[14] ⍝            i is a vector that cannot have any element 
                                equal to zero except the last
[15] ⍝              element since ×\i would make every following 
                                element equal to zero.
    ∇
</pre>

<p>
<tt> &nbsp; &nbsp; &nbsp; acc∆how</tt><br><br>
<tt> &nbsp; &nbsp; &nbsp;</tt>Let<tt> d[1] d[2] d[3] d[4] </tt>
be a vector of savings account deposits at various
times<tt> t[1] t[2] t[3] t[4] </tt>and 
let<tt> i[1] i[2] i[3] i[4] </tt>be one plus the interest
earned between deposit times.
For example, if interest is 3 percent between<tt> t[2] </tt>
and<tt> t[3]</tt>&nbsp;,<tt> </tt>
then<tt> i[3] </tt>is<tt> 1.03</tt>&nbsp;.<tt> </tt>
We also need a dummy value for<tt> i[1] </tt>in order
to make<tt> i </tt>and<tt> d </tt>of equal length.<tt> i[1] </tt>
can be any value except zero.
The following shows how<tt> acc </tt>calculates the answers.</p>

<table cellpadding=3>
<tr><td nowrap><tt>i←×\i</tt>&nbsp;</td><td nowrap>gives &nbsp;</td>
 <td><tt>i[1]</tt></td>
 <td><tt>i[1]×i[2]</tt></td>
 <td><tt>i[1]×i[2]×i[3]</tt></td>
 <td><tt>i[1]×i[2]×i[3]×i[4]</tt></td>
 </tr>
<tr><td>&nbsp;</td></tr>
<tr><td rowspan=2 valign=middle><tt>d÷i</tt>&nbsp;</td><td rowspan=2 valign=middle>gives</td>
 <td align=center><tt>d[1]</tt><br><hr></td> 
 <td align=center><tt>d[2]</tt><br><hr></td>
 <td align=center><tt>d[3]</tt><br><hr></td>
 <td align=center><tt>d[4]</tt><br><hr></td>
 </tr>
<tr>
 <td align=center nowrap><tt>i[1]</tt></td>
 <td align=center nowrap><tt>i[1]×i[2]</tt></td>
 <td align=center nowrap><tt>i[1]×i[2]×i[3]</tt></td>
 <td align=center nowrap><tt>i[1]×i[2]×i[3]×i[4]</tt></td>
 </tr>
<tr><td>&nbsp;</td></tr>
<tr><td valign=top><tt>i×+\</tt>&nbsp;</td><td valign=top>gives</td>
 <td colspan=4><tt>d[1]<br>
 d[2]+d[1]×i[2]<br>d[3]+(d[2]×i[3])+(d[1]×i[2]×i[3])<br>
 d[4]+(d[3]×i[4])+(d[2]×i[3]×i[4])+<br> &nbsp; &nbsp; &nbsp;(d[1]×i[2]×i[3]×i[4])</tt><br>
which is the accumulated amount just after each deposit.</td>
 </tr>
</table>

<p>If<tt> d </tt>is<nobr><tt> 2 1 3 4 </tt></nobr>
and<tt> i </tt>is<nobr><tt> 1.01 1.02 1.03 1.04 </tt></nobr>
then<nobr><tt> d acc i </tt></nobr>
gives<nobr><tt> 2 3.04 6.1312 10.376448 </tt></nobr></p>


<br><hr>
<font size=-1>
<p>Originally appeared in the APL Quote Quad, Volume 7, Number 4, Winter 1977.</p>

<p><script src="https://www.jsoftware.com/papers/apldisplay.js" type="text/javascript"></script></p>
</font>


<table>
<tr><td><font size=-1>created: &nbsp;</font></td><td><font size=-1>2015-01-20 17:10</font></td></tr>
<tr><td><font size=-1>updated:       </font></td><td><font size=-1>2015-01-20 20:40</font></td></tr>
</table>


</td></tr></table>

<br><br><br>

</body>
</html>
