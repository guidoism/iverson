<html>
<head>
<title>Sparse Arrays in J</title>
<link rel="stylesheet" href="https://www.jsoftware.com/papers/sparse.css" type="text/css">
</head>
<body>

<table align=center width=520><tr><td>

<table><tr><td><img src="https://www.jsoftware.com/papers/sierp256.jpg" width=256 height=256> <br></td>
<td nowrap>&nbsp; &nbsp;</td>
<td>
<p><font size="6"><b>Sparse Arrays in J</b></font></p>

<p><A href="sparse.htm#Introduction">Introduction</A><br>
<A href="sparse.htm#Representation">Representation</A><br>
<A href="sparse.htm#Assertions">Assertions</A><br>
<A href="sparse.htm#The Verb $.">The Verb $. </A><br>
<A href="sparse.htm#Further Examples">Further Examples</A><br>
<A href ="sparse.htm#Sparse Linear Algebra">Sparse Linear Algebra</A><br>
<A href="sparse.htm#Implementation Status">Implementation Status</A></p>

<p>Copyright &copy; 1998, 1999, Iverson Software Inc.</p>
</td></tr></table>

<hr>

<p><a name="Introduction"></a> <IMG height=32 src="https://www.jsoftware.com/papers/tri0.jpg"
 width=32 > <tt>&nbsp;</tt><font size="5"><b>Introduction</b></font></p>

<p>We describe a sparse array extension to J using a
representation that &ldquo;does not store zeros&rdquo;. One new
verb<tt> $. </tt>is defined to
create and manipulate sparse arrays, and existing primitives are
extended to operate on such arrays. These ideas are illustrated
in following examples:</p>

<table><tr><td width=200><pre>
   ] d=: (?. 3 4$2) * ?. 3 4$100
 0 75  0 53
 0  0 67 67
93  0 51 83
</pre></td></tr></table>
<br>

<table><tr><td width=200><pre>
   ] s=: $. d
0 1 | 75
0 3 | 53
1 2 | 67
1 3 | 67
2 0 | 93
2 2 | 51
2 3 | 83
</pre></td><td valign=top>
convert<tt> d </tt>to sparse and assign to<tt> s </tt><br>
<br>
the display of<tt> s </tt>gives the indices of the<br>
&ldquo;non-zero&rdquo; cells and the corresponding values
</td></tr></table>
<br>

<table><tr><td width=200><pre>
   d -: s
1
</pre></td><td valign=top>
<tt>d </tt>and<tt> s </tt>match
</td></tr></table>
<br>

<table><tr><td width=200><pre>
   o. s
0 1 | 235.619
0 3 | 166.504
1 2 | 210.487
1 3 | 210.487
2 0 | 292.168
2 2 | 160.221
2 3 | 260.752
</pre></td><td valign=top>
&pi; times<tt> s </tt>
</td></tr></table>
<br>

<table><tr><td width=200><pre>
   o. d
      0 235.619       0 166.504
      0       0 210.487 210.487
292.168       0 160.221 260.752
</pre></td><td valign=top>
&pi; times<tt> d </tt>
</td></tr></table>
<br>

<table><tr><td width=200><pre>
   (o. s) -: o. d
1
</pre></td><td valign=top>
function results independent of representation
</td></tr></table>
<br>

<table><tr><td><pre>
   0.5 + o. s
0 1 | 236.119
0 3 | 167.004
1 2 | 210.987
1 3 | 210.987
2 0 | 292.668
2 2 | 160.721
2 3 | 261.252

   <. 0.5 + o. s
0 1 | 236
0 3 | 167
1 2 | 210
1 3 | 210
2 0 | 292
2 2 | 160
2 3 | 261

   (<. 0.5 + o. s) -: <. 0.5 + o. d
1
</pre></td></tr></table>
<br>

<table><tr><td width=200><pre>
   d + s
0 1 | 150
0 3 | 106
1 2 | 134
1 3 | 134
2 0 | 186
2 2 | 102
2 3 | 166</pre></td><td valign=top>
function arguments can be dense or sparse
</td></tr></table>
<br>

<table><tr><td width=200><pre>
   (d + s) -: 2*s
1

   (d + s) -: 2*d
1

   +/ s
0 |  93
1 |  75
2 | 118
3 | 203

   +/"1 s
0 | 128
1 | 134
2 | 227
</pre></td><td valign=top>
familiar algebraic properties are preserved
</td></tr></table>
<br>

<table><tr><td width=200><pre>
   |. s
0 0 | 93
0 2 | 51
0 3 | 83
1 2 | 67
1 3 | 67
2 1 | 75
2 3 | 53

   |."1 s
0 0 | 53
0 2 | 75
1 0 | 67
1 1 | 67
2 0 | 83
2 1 | 51
2 3 | 93
</pre></td><td valign=top>
reverse
</td></tr></table>
<br>

<table><tr><td width=200><pre>
   |: s
0 2 | 93
1 0 | 75
2 1 | 67
2 2 | 51
3 0 | 53
3 1 | 67
3 2 | 83

   $ |: s
4 3

</pre></td><td valign=top>
transpose
</td></tr></table>

<table><tr><td width=200><pre>
   $.^:_1 |: s
 0  0 93
75  0  0
 0 67 51
53 67 83

   (|:s) -: |:d
1

</pre></td><td valign=top>
<tt>$.^:_1 </tt>converts a sparse array to dense
</td></tr></table>

<table><tr><td width=200><pre>
   , s
 1 | 75
 3 | 53
 6 | 67
 7 | 67
 8 | 93
10 | 51
11 | 83

   $ , s
12
</pre></td><td valign=top>
ravel; a sparse vector
</td></tr></table>

<p><A href="sparse.htm#top">To the top.</A></p>
<p>&nbsp;</p>



<p><a name="Representation"></a><IMG height=32 src="https://www.jsoftware.com/papers/tri1.jpg"
 width=32 ><tt>&nbsp;</tt> <font size="5"><b>Representation</b></font></p>

<p>A sparse array<tt> y </tt>may be boolean, integer, floating
point, complex, literal, or boxed, and has the (internal) 
parts<tt> sh;a;e;i;x;flag </tt>where:</p>

<table>
<tr><td valign=top><tt>sh</tt></td><td>
Shape,<tt> $y</tt>&nbsp;.<tt> </tt>Elements of
the shape must be less than<tt> 2^31</tt>&nbsp;,<tt> </tt>but the
product over the shape may be larger than<tt> 2^31</tt>&nbsp;.
 </td></tr>
<tr><td valign=top><tt>sh</tt></td><td>
Axe(s), a vector of the sorted sparse (indexed) axes.
 </td></tr>
<tr><td valign=top><tt>e</tt></td><td>
Sparse element (&ldquo;zero&rdquo;).<tt> e </tt>is also used as the fill in any
overtake of the array.
 </td></tr>
<tr><td valign=top><tt>i</tt></td><td>
Indices, an integer matrix of indices for the sparse axes.
 </td></tr>
<tr><td valign=top><tt>x</tt></td><td>
Values, a (dense) array of usually non-zero cells for the non-sparse axes corresponding to
the index matrix<tt> i</tt>&nbsp;.
 </td></tr>
<tr><td valign=top nowrap><tt>flag &nbsp;</tt></td><td>
Various bit flags.
 </td></tr>
</table>

<p>For the sparse matrix<font size="2" face="Courier New"> s </font>used
in the introduction,</p>

<pre>
   ] d=: (?. 3 4$2) * ?. 3 4$100
 0 75  0 53
 0  0 67 67
93  0 51 83

   ] s=: $. d
0 1 | 75
0 3 | 53
1 2 | 67
1 3 | 67
2 0 | 93
2 2 | 51
2 3 | 83
</pre>

<p>The shape is<tt> 3&nbsp;4</tt>&nbsp;;<tt> </tt>
the sparse axes are<tt> 0&nbsp;1</tt>&nbsp;;<tt> </tt>
the sparse element is<tt> 0</tt>&nbsp;;<tt> </tt>
the indices are the first two columns of numbers in the display of<tt> s</tt>&nbsp;;<tt> </tt>
and the values are the last column.</p>

<p>Scalars continue to be represented as before (densely). All
primitives accept sparse or dense arrays as arguments 
(e.g.<tt> sparse+dense </tt>
or<tt> sparse$sparse</tt>). The display of a
sparse array is a display of the index matrix (the<tt> i </tt>part), 
a blank column, a column of
vertical lines, another blank column, and the corresponding value
cells (the<tt> x </tt>part).</p>

<p>Letting the sparse element be variable rather than fixed at
zero makes many more functions closed on sparse arrays 
(e.g.<tt> ^y </tt>or<tt> 10+y </tt>or<tt> -.y</tt>), 
and familiar results can be
produced by familiar phrases (e.g.<tt> &lt;.0.5+y </tt>
for rounding to the nearest integer).</p>

<p><A href="sparse.htm#top">To the top.</A></p>
<p>&nbsp;</p>



<p><a name="Assertions"></a><IMG height=32 src="https://www.jsoftware.com/papers/tri2.jpg"
 width=32 ><tt>&nbsp;</tt><font size="5"><b>Assertions</b></font></p>

<p>The following assertions hold for a sparse array, and
displaying a sparse array invokes these consistency checks on it.</p>

<table>
<tr><td><tt>imax =: _1+2^31</tt></td><td>
the largest internal integer
 </td></tr>
<tr><td><tt>rank =: #@$</tt></td><td>
rank
 </td></tr>
<tr><td><tt>type =: 3!:0</tt></td><td>
internal type
 </td></tr>
<tr><td>&nbsp;</td></tr>

<tr><td><tt>1 = rank sh</tt></td><td>
vector
 </td></tr>
<tr><td><tt>sh -: <. sh</tt></td><td>
integral
 </td></tr>
<tr><td><tt>imax >: #sh</tt></td><td>
at most<tt> imax </tt>elements
 </td></tr>
<tr><td><tt>(0<:sh) *. (sh<:imax)</tt></td><td>
bounded by<tt> 0 </tt>and<tt> imax </tt>
 </td></tr>
<tr><td>&nbsp;</td></tr>

<tr><td><tt>1 = rank a</tt></td><td>
vector
 </td></tr>
<tr><td><tt>a e. i.#sh</tt></td><td>
bounded by<tt> 0 </tt>and rank-1
 </td></tr>
<tr><td><tt>a -: ~. a</tt></td><td>
elements are unique
 </td></tr>
<tr><td><tt>a -: /:~ a</tt></td><td>
sorted
 </td></tr>
<tr><td>&nbsp;</td></tr>

<tr><td><tt>0 = rank e</tt></td><td>
atomic
 </td></tr>
<tr><td><tt>(type e) = type x</tt></td><td>
has the same internal type as<tt> x </tt>
 </td></tr>
<tr><td>&nbsp;</td></tr>

<tr><td><tt>2 = rank i</tt></td><td>
matrix
 </td></tr>
<tr><td><tt>4 = type i</tt></td><td>
integral
 </td></tr>
<tr><td><tt>(#i) = #x</tt></td><td>
as many rows as the number of items in<tt> x </tt>
 </td></tr>
<tr><td><tt>({:$i) = #a</tt></td><td>
as many columns as there are sparse axes
 </td></tr>
<tr><td><tt>(#i) <: */a{sh</tt></td><td>
# rows bounded by product over sparse axes lengths
 </td></tr>
<tr><td><tt>imax >: */$i</tt></td><td>
# elements is bounded by<tt> imax </tt>
 </td></tr>
<tr><td><tt>(0<:i) *. (i <"1 a{sh)</tt></td><td>
bounded by<tt> 0 </tt>and the lengths of the sparse axes </td></tr>
<tr><td><tt>i -: ~.i</tt></td><td>
rows are unique
 </td></tr>
<tr><td><tt>i -: /:~ i</tt></td><td>
rows are sorted
 </td></tr>
<tr><td>&nbsp;</td></tr>

<tr><td><tt>(rank x) = 1+(#sh)-#a</tt></td><td>
rank equals 1 plus the number of dense axes
 </td></tr>
<tr><td><tt>imax >: */$x</tt></td><td>
# elements is bounded by<tt> imax</tt>
 </td></tr>
<tr><td><tt>(}.$x)-:((i.#sh)-.a){sh</tt></td><td>
item shape is the dimensions of the dense axes
 </td></tr>
<tr><td nowrap><tt>(type x) e. 1 2 4 8 16 32 &nbsp;</tt></td><td>
internal type is boolean, character, integer, real, complex, or boxed
 </td></tr>
</table>

<p><A href="sparse.htm#top">To the top.</A></p>
<p>&nbsp;</p>



<p><a name="The Verb $."></a> <IMG height=32 src="https://www.jsoftware.com/papers/tri3.jpg"
 width=32 > <tt>&nbsp;</tt><font size="5"><b>The Verb</b><b><tt><font size=+2> $. </font></tt></b></font></p>

<p>The ranks of<tt> $. </tt>are infinite. The inverse 
of<tt> n&amp;$. </tt>is<tt> (-n)&amp;$. </tt>.</p>

<p><b><tt>$.y </tt></b>converts a dense array to sparse, and
conversely<b><tt> $.^:_1 y </tt></b>converts a sparse array to
dense. The identities<tt> f -: f&amp;.$. </tt>and<tt> f -:
f&amp;.($.^:_1) </tt>hold for any function<tt> f</tt>,<tt> </tt>with
the possible exception of those (like overtake <tt>{.</tt>) which
use the sparse element as the fill.</p>

<p><b><tt>0$.y </tt></b>applies<tt> $. </tt>or<tt> $.^:_1 </tt>as
appropriate; that is, converts a dense array to sparse and a
sparse array to dense.</p>

<p><b><tt>1$.sh;a;e </tt></b>produces a sparse array.<tt> sh </tt>specifies
the shape.<tt> a </tt>specifies the sparse axes; negative
indexing may be used.<tt> e </tt>specifies the &ldquo;zero&rdquo;
element, and its type determines the type of the array. The
argument may also be<tt> sh;a </tt>(<tt>e </tt>is assumed to be a
floating point<tt> 0</tt>) or just<tt> sh </tt>(<tt>a </tt>is
assumed to be<tt> i.#sh </tt> &mdash; all axes are sparse &mdash; and<tt> e </tt>a
floating point<tt> 0</tt>).</p>

<p><b><tt>2$.y </tt></b>gives the sparse axes (the<tt> a </tt>part);
<br>
<b><tt>(2;a)$.y </tt></b>(re-)specifies the sparse axes; <b><tt><br>
(2 1;a)$.y </tt></b>gives the number of bytes required for <tt>(2;a)$.y</tt>&nbsp;;
<b><tt><br>
(2&nbsp;2;a)$.y </tt></b>gives the number of items in the<tt> i </tt>part
or the<tt> x </tt>part for the specified sparse axes<tt> a </tt>(that
is,<tt> #4$.(2;a)$.y</tt>).</p>

<p><b><tt>3$.y </tt></b>gives the sparse element (the<tt> e </tt>part);
<b><tt>(3;e)$.y</tt></b><tt> </tt>respecifies the sparse element.</p>

<p><b><tt>4$.y </tt></b>gives the index matrix (the<tt> i </tt>part).</p>

<p><b><tt>5$.y </tt></b>gives the value array (the<tt> x </tt>part).</p>

<p><b><tt>6$.y </tt></b>gives the flag (the<tt> flag </tt>part).</p>

<p><b><tt>7$.y </tt></b>gives the number of non-sparse entries in
array<tt> y</tt>&nbsp;;<tt> </tt>that is,<tt> #4$.y </tt>or<tt> #5$.y</tt>&nbsp;.</p>

<p><b><tt>8$.y </tt></b>removes any completely &ldquo;zero&rdquo; 
value cells and the corresponding rows in the index matrix.</p>

<p><A href="sparse.htm#top">To the top.</A> </p>
<p>&nbsp;</p>



<p><a name="Further Examples"></a><IMG height=32 src="https://www.jsoftware.com/papers/tri0.jpg"
 width=32 ><tt>&nbsp;</tt><font size="5"><b>Further Examples</b></font></p>

<table><tr><td width=200><pre>
   ] d=: (0=?. 2 3 4$3) * ?. 2 3 4$100
13 0 0 0
21 4 0 0
 0 0 0 0

 3 5 0 0
 0 0 6 0
 0 0 0 0
</pre></td></tr></table>
<br>

<table><tr><td width=200><pre>
   ] s=: $. d
0 0 0 | 13
0 1 0 | 21
0 1 1 |  4
1 0 0 |  3
1 0 1 |  5
1 1 2 |  6
</pre></td><td valign=top>
convert<tt> d </tt>to sparse and assign to<tt> s </tt>
</td></tr></table>
<br>

<table><tr><td width=200><pre>
   d -: s
1
</pre></td><td valign=top>
match is independent of representation
</td></tr></table>
<br>

<table><tr><td width=200><pre>
   2 $. s
0 1 2
</pre></td><td valign=top>
sparse axes
</td></tr></table>
<br>

<table><tr><td width=200><pre>
   3 $. s
0
</pre></td><td valign=top>
sparse element
</td></tr></table>
<br>

<table><tr><td width=200><pre>
   4 $. s
0 0 0
0 1 0
0 1 1
1 0 0
1 0 1
1 1 2
</pre></td><td valign=top>
index matrix; columns correspond to the sparse axes
</td></tr></table>
<br>

<table><tr><td width=200><pre>
   5 $. s
13 21 4 3 5 6
</pre></td><td valign=top>
corresponding values
</td></tr></table>
<br>

<table><tr><td width=200><pre>
   ] u=: (2;2)$.s
0 | 13 21 0
  |  3  0 0
  |
1 |  0  4 0
  |  5  0 0
  |
2 |  0  0 0
  |  0  6 0
</pre></td><td valign=top>
make<tt> 2 </tt>be the sparse axis
</td></tr></table>
<br>

<table><tr><td width=200><pre>
   4 $. u
0
1
2
</pre></td><td valign=top>
index matrix
</td></tr></table>
<br>

<table><tr><td width=200><pre>
   5 $. u
13 21 0
 3  0 0

 0  4 0
 5  0 0

 0  0 0
 0  6 0
</pre></td><td valign=top>
corresponding values
</td></tr></table>
<br>

<table><tr><td width=200><pre>
   ] t=: (2;0 1)$.s
0 0 | 13 0 0 0
0 1 | 21 4 0 0
1 0 |  3 5 0 0
1 1 |  0 0 6 0
</pre></td><td valign=top>
make<tt> 0 1 </tt>be the sparse axes
</td></tr></table>
<br>

<table><tr><td width=200><pre>
   7 {. t
0 0 | 13 0 0 0
0 1 | 21 4 0 0
1 0 |  3 5 0 0
1 1 |  0 0 6 0

   $ 7 {. t
7 3 4
</pre></td><td valign=top>
take
</td></tr></table>
<br>

<table><tr><td width=200><pre>
   7 {."1 t
0 0 | 13 0 0 0 0 0 0
0 1 | 21 4 0 0 0 0 0
1 0 |  3 5 0 0 0 0 0
1 1 |  0 0 6 0 0 0 0

   0 = t
0 0 | 0 1 1 1
0 1 | 0 0 1 1
1 0 | 0 0 1 1
1 1 | 1 1 0 1
</pre></td><td valign=top>
take with rank
</td></tr></table>
<br>

<table><tr><td width=200><pre>
   3 $. 0 = t                 
1

   +/ , 0 = t
18
</pre></td><td valign=top>
the sparse element of<tt> 0=t </tt>is<tt> 1 </tt>
</td></tr></table>
<br>

<table><tr><td width=200><pre>
   +/ , 0 = d
18
</pre></td><td valign=top>
answers are independent of representation
</td></tr></table>
<br>

<table><tr><td width=200><pre>
   0{t
0 | 13 0 0 0
1 | 21 4 0 0
</pre></td><td valign=top>
from
</td></tr></table>
<br>

<table><tr><td width=200><pre>
   _2 (<1 2 3)}t
0 0 | 13 0 0  0
0 1 | 21 4 0  0
1 0 |  3 5 0  0
1 1 |  0 0 6  0
1 2 |  0 0 0 _2
</pre></td><td valign=top>
amend
</td></tr></table>
<br>

<table><tr><td width=200><pre>
   ] p=: (i.!n) A. i.n=: 3
0 1 2
0 2 1
1 0 2
1 2 0
2 0 1
2 1 0
</pre></td><td valign=top>
all permutations of order 3
</td></tr></table>
<br>

<table><tr><td width=200><pre>
   C.!.2 p
0 1 1 0 0 1
</pre></td><td valign=top>
the parity of each permutation
</td></tr></table>
<br>

<table><tr><td width=200><pre>
   $.^:_1 (_1^C.!.2 p) (<"1 p)} 1 $. n$n
 0  0  0
 0  0  1
 0 _1  0

 0  0 _1
 0  0  0
 1  0  0

 0  1  0
_1  0  0
 0  0  0
</pre></td><td valign=top>
</td></tr></table>

<p>The last expression computes the complete skewed tensor of order 3.</p>

<table><tr><td width=200><pre>
   s=: 1 $. 20 50 1000 75 366
</pre></td><td valign=top>
</td></tr></table>
<br>

<table><tr><td width=200><pre>
   $s
20 50 1000 75 366
</pre></td><td valign=top>
20 countries, 50 regions, 1000 salespersons,<br>
75 products, 366 days in a year
</td></tr></table>
<br>

<table><tr><td width=200><pre>
   */ $s
2.745e10
</pre></td><td valign=top>
the product over the shape can be greater than<tt> 2^31 </tt>
</td></tr></table>
<br>

<table><tr><td width=200><pre>
   r=: ?. 1e5 $ 1e6
   i=: ?. 1e5 5 $ $ s
   s=: r (<"1 i)} s
</pre></td><td valign=top>
revenues<br>
corresponding locations<br>
assign revenues to corresponding locations
</td></tr></table>
<br>

<table><tr><td width=200><pre>
   7 {. ": s
0 0  5 30 267 | 128133
0 0 26 20 162 | 319804
0 0 31 37 211 | 349445
0 0 37 10 351 | 765935
0 0 56  6  67 | 457449
0 0 66 54 120 |  38186
0 0 71 74 246 | 515473
</pre></td><td valign=top>
the first 7 rows in the display of<tt> s</tt>&nbsp;;<br>
the first row says that for country 0, region 0,<br>
salesperson 5, product 30, day 267,<br>
the revenue was 128133
</td></tr></table>
<br>

<table><tr><td width=200><pre>
   +/ , s
|limit error
| +/    ,s
</pre></td><td valign=top>
total revenue<br>
the expression failed on<tt> ,s </tt>because it would
have required a vector of length<tt> 2.745e10 </tt>
</td></tr></table>
<br>

<table><tr><td width=200><pre>
   +/@, s                     
5.00289e10                    
</pre></td><td valign=top>
total revenue<br>
<tt>f/@, </tt>is supported by special code
</td></tr></table>
<br>

<table><tr><td width=200><pre>
   +/+/+/+/+/ s
5.00289e10

   +/^:5 s
5.00289e10

   +/^:_ s
5.00289e10

   +/ r
5.00289e10
</pre></td><td valign=top>
total revenue</td></tr></table>
<br>

<table><tr><td width=200><pre>
  +/"1^:4 s
 0 | 2.48411e9
 1 | 2.55592e9
 2 | 2.55103e9
 3 | 2.52089e9
 4 | 2.49225e9
 5 | 2.45682e9
 6 | 2.52786e9
 7 | 2.45425e9
 8 | 2.48729e9
 9 | 2.50094e9
10 | 2.51109e9
11 | 2.59601e9
12 | 2.49003e9
13 | 2.58199e9
14 | 2.44772e9
15 | 2.47863e9
16 | 2.46455e9
17 | 2.5568e9
18 | 2.43492e9
19 | 2.43582e9
</pre></td><td valign=top>
total revenue by country
</td></tr></table>
<br>

<table><tr><td width=200><pre>
   t=: +/^:2 +/"1^:2 s

   $t
1000

   7{.t
0 | 4.58962e7
1 | 4.81548e7
2 | 3.97248e7
3 | 4.89981e7
4 | 4.85948e7
5 | 4.69227e7
6 | 4.22094e7
</pre></td><td valign=top>
total revenue by salesperson
</td></tr></table>

<p><A href="sparse.htm#top">To the top.</A></p>
<p>&nbsp;</p>



<p><a name="Sparse Linear Algebra"></a><IMG height=32
 src="https://www.jsoftware.com/papers/tri1.jpg" width=32 ><tt>&nbsp;</tt><font size="5"><b>Sparse
Linear Algebra</b></font></p>

<p>Currently, only sparse matrix multiplication and the solutions
of tri-diagonal linear system are implemented. For example:</p>

<table><tr><td width=200><pre>
   f=: }. @ }: @ (,/) @ (,."_1 +/&amp;_1 0 1) @ i.
</pre></td><td valign=top>
</td></tr></table>
<br>

<table><tr><td width=200><pre>
   f 5
0 1
1 0
1 1
1 2
2 1
2 2
2 3
3 2
3 3
3 4
4 3
4 4
</pre></td><td valign=top>
indices for a 5 by 5 tri-diagonal matrix
</td></tr></table>
<br>

<table><tr><td width=200><pre>
   s=: (?. 13$100) (<"1 f 5)} 1 $. 5 5;0 1

   $s
5 5
</pre></td><td valign=top>
</td></tr></table>

<p>The phrase<nobr><tt> 1$.5 5;0 1 </tt></nobr>makes
a sparse array with shape<tt> 5&nbsp;5 </tt>and
sparse axes<tt> 0&nbsp;1 </tt>(sparse
in both dimensions);<nobr><tt> &lt;"1 f 5 </tt></nobr>
makes boxed indices; and<nobr><tt> x (&lt;"1 f 5)}y </tt></nobr>
amends by<tt> x </tt>the locations 
in<tt> y </tt>indicated by the indices
(scattered amendment).</p>

<table><tr><td width=200><pre>
   s
0 0 | 13
0 1 | 75
1 0 | 45
1 1 | 53
1 2 | 21
2 1 |  4
2 2 | 67
2 3 | 67
3 2 | 93
3 3 | 38
3 4 | 51
4 3 | 83
4 4 |  3
</pre></td><td valign=top>
</td></tr></table>
<br>

<table><tr><td width=200><pre>
   ] d=: $.^:_1 s
13 75  0  0  0
45 53 21  0  0
 0  4 67 67  0
 0  0 93 38 51
 0  0  0 83  3
</pre></td><td valign=top>
the dense representation of<tt> s </tt>
</td></tr></table>
<br>

<table><tr><td width=200><pre>
   ] y=: ?. 5$80
10 60 36 42 17 3 54 54 74 30 41 66 2

   y %. s
1.27885 _0.0883347 0.339681 0.202906 0.0529263
</pre></td><td valign=top>
</td></tr></table>
<br>

<table><tr><td width=200><pre>
   y %. d
</pre></td><td valign=top>
answers are independent of representation
</td></tr>
<tr><td colspan=2><tt>1.27885 _0.0883347 0.339681 0.202906 0.0529263</tt></td></tr>
</table>
<br>

<table><tr><td width=200><pre>
   s=: (?. (_2+3*1e5)$1000) (&lt;"1 f 1e5)} 1 $. 1e5 1e5;0 1
</pre></td><td valign=top>
</td></tr></table>
<br>

<table><tr><td width=200><pre>
   $s
100000 100000

   y=: ?. 1e5$1000
</pre></td><td valign=top>
<tt>s </tt>is a<tt> 1e5 </tt>by<tt> 1e5 </tt>matrix
</td></tr></table>
<br>

<table><tr><td width=200><pre>
   ts=: 6!:2 , 7!:2@]
</pre></td><td valign=top>
time and space for execution
</td></tr></table>
<br>

<table><tr><td width=200><pre>
   ts 'y %. s'
0.28 5.2439e6                 
</pre></td><td valign=top>
<br>
0.28 seconds; 5.2 megabytes (Pentium 266 Mhz)
</td></tr></table>

<p><A href="sparse.htm#top">To the top.</A></p>
<p>&nbsp;</p>



<p><a name="Implementation Status"></a> <IMG height=32
 src="https://www.jsoftware.com/papers/tri2.jpg" width=32 > <tt>&nbsp;</tt><font size="5"><b>Implementation
Status</b></font></p>

<p>As of<tt> 1999-09-03 12:00</tt>&nbsp;,<tt> </tt>the following
facilities support sparse arrays:</p>

<table>
<tr><td width=64><tt>= d</tt></td>  <td width=64><tt>=.</tt></td>    <td width=64><tt>=:</tt></td></tr>
<tr><td width=64><tt>&lt;</tt></td> <td width=64><tt>&lt;.</tt></td> <td width=64><tt>&lt;:</tt></td></tr>
<tr><td width=64><tt>></tt></td>    <td width=64><tt>>.</tt></td>    <td width=64><tt>>:</tt></td></tr>
<tr><td width=64><tt>_</tt></td>    <td width=64><tt>_.</tt></td>    <td width=64><tt>_:</tt></td></tr>
<tr><td>&nbsp;</td></tr>

<tr><td width=64><tt>+</tt></td>    <td width=64><tt>+.</tt></td>    <td width=64><tt>+:</tt></td></tr>
<tr><td width=64><tt>*</tt></td>    <td width=64><tt>*.</tt></td>    <td width=64><tt>*:</tt></td></tr>
<tr><td width=64><tt>-</tt></td>    <td width=64><tt>-. m</tt></td>  <td width=64><tt>-:</tt></td></tr>
<tr><td width=64><tt>%</tt></td>    <td width=64><tt>%. d</tt></td>  <td width=64><tt>%:</tt></td></tr>
<tr><td>&nbsp;</td></tr>

<tr><td width=64><tt>^</tt></td>    <td width=64><tt>^.</tt></td>    <td width=64><tt> </tt></td></tr>
<tr><td width=64><tt>$ m</tt></td>  <td width=64><tt>$.</tt></td>    <td width=64><tt>$:</tt></td></tr>
<tr><td width=64><tt>~</tt></td>    <td width=64><tt> </tt></td>     <td width=64><tt>~: d</tt></td></tr>
<tr><td width=64><tt>|</tt></td>    <td width=64><tt>|.</tt></td>    <td width=64><tt>|:</tt></td></tr>
<tr><td>&nbsp;</td></tr>

<tr><td width=64><tt> </tt></td>    <td width=64><tt>..</tt></td>    <td width=64><tt>.:</tt></td></tr>
<tr><td width=64><tt>:</tt></td>    <td width=64><tt>:.</tt></td>    <td width=64><tt>::</tt></td></tr>
<tr><td width=64><tt>,</tt></td>    <td width=64><tt>,.</tt></td>    <td width=64><tt>,:</tt></td></tr>
<tr><td>&nbsp;</td></tr>

<tr><td width=64><tt>#</tt></td>    <td width=64><tt> </tt></td>     <td width=64><tt> </tt></td></tr>
<tr><td width=64><tt>!</tt></td>    <td width=64><tt>!.</tt></td>    <td width=64><tt>!:</tt></td></tr>
<tr><td width=64><tt>/ m</tt></td>  <td width=64><tt> </tt></td>     <td width=64><tt> </tt></td></tr>
<tr><td width=64><tt>\ m</tt></td>  <td width=64><tt>\. m</tt></td>  <td width=64><tt> </tt></td></tr>
<tr><td>&nbsp;</td></tr>

<tr><td width=64><tt>[</tt></td>    <td width=64><tt>[.</tt></td>    <td width=64><tt>[:</tt></td></tr>
<tr><td width=64><tt>]</tt></td>    <td width=64><tt>].</tt></td>    <td width=64><tt> </tt></td></tr>
<tr><td width=64><tt>{ d</tt></td>  <td width=64><tt>{.</tt></td>    <td width=64><tt>{:</tt></td></tr>
<tr><td width=64><tt>} d</tt></td>  <td width=64><tt>}.</tt></td>    <td width=64><tt>}:</tt></td></tr>
<tr><td>&nbsp;</td></tr>

<tr><td width=64><tt>"</tt></td>    <td width=64><tt>".</tt></td>    <td width=64><tt>": m</tt></td></tr>
<tr><td width=64><tt>`</tt></td>    <td width=64><tt> </tt></td>     <td width=64><tt>`:</tt></td></tr>
<tr><td width=64><tt>@</tt></td>    <td width=64><tt>@.</tt></td>    <td width=64><tt>@:</tt></td></tr>
<tr><td width=64><tt>&</tt></td>    <td width=64><tt>&.</tt></td>    <td width=64><tt>&:</tt></td></tr>
<tr><td>&nbsp;</td></tr>

<tr><td colspan=3><tt>j. m      </tt></td></tr>
<tr><td colspan=3><tt>o.        </tt></td></tr>
<tr><td colspan=3><tt>r. m      </tt></td></tr>
<tr><td colspan=3><tt>_9: to 9: </tt></td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td colspan=3><tt>3!:0      </tt></td></tr>
<tr><td colspan=3><tt>3!:1      </tt></td></tr>
<tr><td colspan=3><tt>3!:2      </tt></td></tr>
<tr><td colspan=3><tt>3!:3      </tt></td></tr>
<tr><td colspan=3><tt>4!:55     </tt></td></tr>
</table>

<p><b>Notes:</b></p>

<table>
<tr><td valign=top nowrap>&#149;&nbsp;</td><td>
Sparse literal and boxed arrays not yet implemented.
 </td></tr>
<tr><td valign=top>&#149;</td><td>
The dyad<tt> %. </tt>only implements the case of triadiagonal matrices.
 </td></tr>
<tr><td valign=top>&#149;</td><td>
Boxed left arguments for <tt>|:</tt> (diagonal slices) not yet implemented.
 </td></tr>
<tr><td valign=top>&#149;</td><td>
The monads<tt> f/ </tt>and<tt> f/"r </tt>are only
implemented for<tt> + * &gt;. &lt;. +. *. = ~: , </tt>(and only
boolean arguments for<tt> = </tt>and<tt> ~:</tt>);<tt> </tt>on an axis of
length 2, the monads<tt> f/ </tt>and<tt> f/"r </tt>are
implemented for any function.
 </td></tr>
<tr><td valign=top>&#149;</td><td>
<tt>{ </tt>and<tt> } </tt>only accept the following index
arguments: integer arrays,<tt> &lt;"1</tt> on integer
arrays, and scalar boxed indices (respectively, item indexing,
scattered indexing, and index lists<tt> a0;a1;a2;&#133;</tt>).
 </td></tr>
</table>

<p><A href="sparse.htm#top">To the top.</A></p>

<br><hr>
<table>
<tr><td><font size=-1>created: &nbsp;</font></td><td><font size=-1>1998-11-13 07:10</font></td></tr>
<tr><td><font size=-1>updated:</font></td>       <td><font size=-1>2019-03-09 11:50</font></td></tr>
</table>


</td></tr></table>
<br><br><br><br><br> <br><br><br><br><br>
<br><br><br><br><br> <br><br><br><br><br>


</body>
</html>
