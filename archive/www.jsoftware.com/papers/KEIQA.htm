<html>
<head>
<title>Ken Iverson Quotations and Anecdotes</title>
<link href="jdoc.css" rel=stylesheet>
</head>

<body>

<p align=center><img src="https://www.jsoftware.com/papers/img/keilaugh.jpg"></p>

<table align=center>
<tr><td align=center><font size=+3>Ken Iverson<br>Quotations and Anecdotes</font></td></tr>
<tr><td align=center><font size=+1>compiled and edited by Roger Hui</td><td>&nbsp;</td></tr>
<tr><td align=center><table>
<tr><td><font size=-1>created:</font></td><td><font size=-1>2005-09-30 12:00</font></td></tr>
<tr><td><font size=-1>updated:</font></td><td><font size=-1>2018-11-10 14:05</font></td></tr>
</table></td>
<td>&nbsp;</td>
</tr>
<table>
<br><br>



<table align=center width=550>

<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Norwegians"></a>
Ken&rsquo;s ancestors came from Trondheim, Norway.  He observed
on the serious outlook of Norwegians by retelling a story he had
heard on Garrison Keillor&rsquo;s radio show about Lake Woebegone. </p>

<p>The couple had just returned from their honeymoon.</p>

<p>&ldquo;How was your honeymoon, Gullik?&rdquo;</p>

<p>&ldquo;Could have been worse,&rdquo; replied young Gullik.
On seeing the crestfallen expression of his bride,
he hastened to add, &ldquo;Could have been a lot worse.&rdquo;</p>

<p>Postscript.  I (Roger Hui) recently received indication of the validity
of Ken&rsquo;s observation.  I was in a car with Norwegian-born
Morten Kromberg when he, commenting on the general state of affairs, said, 
&ldquo;Could be worse.&rdquo;
<p align=right>&#151;
Roger Hui and Eugene McDonnell
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="education"></a>
Ken dropped out of school after Grade 9 because it was the height of the Depression
and there was work to do on the family farm, and because he thought further
schooling only led to becoming a schoolteacher and he had no desire to
become one. </p>

<p>During World War II, Ken first served in the Canadian army
and then in the R.C.A.F.
as a flight engineer in PBY <i>Catalina</i> flying patrol boats.
He finally learnt about universities from his Air Force mates, 
many of whom planned to return to university, thanks to 
government support for servicemen.
While in the service he completed high school courses 
by correspondence.
After the war he graduated <i>summa cum laude</i> with a B.A. 
from Queen&rsquo;s University and 
the M.A. and Ph.D. degrees from Harvard.
His doctoral dissertation,
<a href="http://www.jsoftware.com/papers/MSLDE.htm">&ldquo;Machine 
Solutions of Linear Differential Equations:
Applications to a Dynamic Economic Model&rdquo;</a>, was jointly
supervised by Professors Howard Aiken and Wassily Leontief.</p>

<p align=right>&#151;
Roger Hui
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="grad_school"></a>
Kenneth Iverson has recalled graduate study under Aiken as
&ldquo;like an apprenticeship&rdquo; in which the student
&ldquo;learned the tools of the scholarship trade&rdquo;.
Every topic was &ldquo;used more as a focus for the development
of skills such as clarity of thought and expression than as
an end in itself&rdquo;.
Once admitted to the program, a graduate student underwent
a rite of &ldquo;adoption into the fold&rdquo;.
He was given a desk (or a share of a desk) among a group
of other graduate students, the permanent staff, or visiting scholars,
&ldquo;most of whom were engaged in some aspect of the design and building
of computers&rdquo;.  
A student was thus &ldquo;made to feel part of a scholarly enterprise&rdquo;
and was provided, &ldquo;often for the first time, with easy and
intimate access to others more experienced in his chosen field&rdquo;.
</p>
<p align=right>&#151;
I. Bernard Cohen, 
<a href="http://books.google.ca/books?id=Ld7TgLeQXs4C&dq=%22Howard+Aiken:+Portrait+of+a+Computer+Pioneer%22&pg=PP1&ots=NGu-ArJuNk&sig=2Sr8oRkv4x4EtRr0vLqDAekOWxY&hl=en&sa=X&oi=book_result&resnum=1&ct=result#v=onepage&q&f=false"><i>Howard Aiken: 
Portrait of a Computer Pioneer</i></a>,<br>
MIT Press, 1999, page 215.
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Eoin_Whitney"></a>
Ken met my father as a fellow graduate student at Harvard.  
A professor introduced them saying,
&ldquo;There is another student here from Saskatchewan.&rdquo;</p>
<p align=right>&#151;
Arthur Whitney,
<a href="http://www.computerhistory.org/events/index.php?id=1099685637">
<i>A Celebration of Kenneth Iverson</i></a>, 2004-11-30
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Comp_Lab_coffee"></a>
But I also found myself welcome at the famous coffee hours
and talking to graduate students, other members of the staff
of the Comp Lab, people from everywhere at Harvard,
and people apparently from nowhere. &#133; 
And I met Professor Wassily Leontief, 
who was mulling over using Mark I to do,
with Ken Iverson&rsquo;s assistance,
the input-output calculations that helped
toward his eventual Nobel Prize in economics.</p>

<p align=right>&#151;
Anthony Oettinger, <i>Reminiscences of the Boss</i>, in<br>
I. Bernard Cohen and Gregory W. Welch, editors,
<a href="http://books.google.ca/books?id=lVfX5wMkI7oC&printsec=frontcover&dq=%22Makin%27+Numbers%22&hl=en&ei=7SWaTsbBGM_KiAKLvNXDDQ&sa=X&oi=book_result&ct=result&resnum=1&ved=0CDEQ6AEwAA#v=onepage&q&f=false"><i>Makin&rsquo; Numbers</i></a>,<br>
MIT Press, 1999, page 206.
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Aiken_notes"></a>
When interviewing Aiken, I had asked him whether
Tropp and I might see his lecture notes;
Aiken replied that he had always destroyed his lecture notes
at the end of each year,
so that he would not be tempted to repeat his lectures.</p>

<p align=right>&#151;
I. Bernard Cohen and Gregory W. Welch, editors,
<a href="http://books.google.ca/books?id=lVfX5wMkI7oC&printsec=frontcover&dq=%22Makin%27+Numbers%22&hl=en&ei=7SWaTsbBGM_KiAKLvNXDDQ&sa=X&oi=book_result&ct=result&resnum=1&ved=0CDEQ6AEwAA#v=onepage&q&f=false"><i>Makin&rsquo; Numbers</i></a>,<br>
MIT Press, 1999, page xvi.
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="programming_time"></a>
The speed of modern computers has reached a point where, for many applications, 
the time required to program a problem may be a more important factor than the actual computing time. 
Attempts are made, therefore, to simplify the work of programming in various ways. 
<p align=right>&#151;
<a href="http://www.jsoftware.com/papers/MSLDE.htm"><i>Machine 
Solutions of Linear Differential Equations</i></a>,<br> 
Section 2A4, Simplification of Programming, 1954
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Aiken_PhDs0"></a>
<b>Aiken&rsquo;s Doctoral Students and Their Dissertations</b></p>

<p><b>1948</b><br>
Herbert Francis Mitchell Jr., 
&ldquo;The Application of Large-Scale Digital Calculators
to the Solution of Simultaneous Linear Systems&rdquo;</p>

<p><b>1950</b><br>
Miles Van Valzah Hayes,
&ldquo;Numerical Solutions to Differential Equations,
Using Automatic Computers&rdquo;</p>

<p><b>1952</b><br>
Gerrit Anne Blaauw,
&ldquo;The Application of Selenium Rectifiers as 
Switching Devices in the Mark IV Calculator&rdquo;</p>

<p><b>1953</b><br>
Charles Allerton Coolidge Jr.,
&ldquo;Design of an Automatic Digital Calculator&rdquo;
<fontsize=-2><br><br></font>

Robert Charles Minnick, &ldquo;The Use of Magnetic Cores
as Switching Devices&rdquo;
</p>

<p><b>1954</b><br>
Kenneth Eugene Iverson,
<a href="http://www.jsoftware.com/papers/MSLDE.htm">&ldquo;Machine 
Solutions of Linear Differential Equations:
Applications to a Dynamic Economic Model&rdquo;</a>
<font size=-2><br><br></font>

Anthony Gervin Oettinger, &ldquo;A Study for the Design
of an Automatic Dictionary&rdquo;
<font size=-2><br><br></font>

Warren Lloyd Semon, &ldquo;The Application of Matrix Methods
in the Theory of Switching&rdquo;<font size=-2><br><br></font>
Theodore Singer, &ldquo;A Class of Time-Sequential Circuits&rdquo;
</p>

<p><b>1955</b><br>
Peter Calingaert,
&ldquo;Multiple-Output Relay Switching Circuits&rdquo;
</p>

<p><b>1956</b><br>
Robert Lovett Ashenhurst,
&ldquo;The Structure of Multiple-Coincidence Selection Systems&rdquo;
<font size=-2><br><br></font>

Frederick Phillips Brooks Jr.,
&ldquo;The Analytic Design of Automatic Data Processing Systems&rdquo;
<font size=-2><br><br></font>

LeRoy Brown Martin Jr.,
&ldquo;Approximation by Ratios of
Integers Chosen from a Limited Range &mdash; 
Applications to the Gear Train Problem&rdquo;
</p>

<p><b>1957</b><br>
Roderick Gould,
&ldquo;The Application of Graph Theory to the Synthesis
of Contact Networks&rdquo;
<font size=-2><br><br></font>

Albert Lafayette Hopkins Jr.,
&ldquo;An Investigation of Non-Ohmic Resistive
Switching Networks&rdquo;
</p>

<p><b>1958</b><br>
Gerard A. Salton,
&ldquo;An Automatic Data Processing System
for Public Utility Revenue Accounting&rdquo;
</p>

<p align=right>&#151;
I. Bernard Cohen and Gregory W. Welch, editors,
<a href="http://books.google.ca/books?id=lVfX5wMkI7oC&printsec=frontcover&dq=%22Makin%27+Numbers%22&hl=en&ei=7SWaTsbBGM_KiAKLvNXDDQ&sa=X&oi=book_result&ct=result&resnum=1&ved=0CDEQ6AEwAA#v=onepage&q&f=false"><i>Makin&rsquo; Numbers</i></a>,<br>
MIT Press, 1999, Appendix B.
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Aiken_PhDs1"></a>
In assessing Aiken&rsquo;s legacy, one must, of course,
examine the influence of his students.
The careers of his Ph.D. students illustrate 
the rippling waves of Aiken&rsquo;s influence.
Herb Mitchell went to work for Univac in software.
Gerrit Blaauw, after serving as one of the architects
of the IBM System/360 family,
became professor of digital technique
at the Technical University of Twente, in the Netherlands.
Charles Coolidge established his own computer company.
Bob Minnick became a professor at Rice and later
president of his own firm.
Ken Iverson, who received the Turing Award 
for his development of APL, went on to IBM.
Warren Semon became dean 
of the School of Computer and Information Science 
at Syracuse, having been head of applied mathematics
at Sperry and then at the Burroughs Research Center.
Tony Oettinger became Aiken&rsquo;s heir at Harvard.
Peter Calingaert had a fruitful career
at the University of North Carolina.
Leroy Martin became Assistant Provost for Computing
and a professor of computer science 
at North Carolina State.
Bob Ashenhurst had a productive career 
at the University of Chicago.
Albert Hopkins went to the MIT Instrumentation Lab,
which became the Charles Stark Draper Lab,
where he eventually became assistant director
and established a reputation 
for fault-tolerant computing,
and later moved on to ITP Computing.
Gerry Salton became a professor 
of computer science at Cornell
and a preeminent figure in the field of
document and information retrieval.</p>

<p>[Fred Brooks, after years at IBM,
where he headed the development 
of the operating system for System/360,
went on to found and head the Department
of Computer Science at the University of North Carolina
at Chapel Hill. &mdash; I.B.C.]</p>

<p>[<i>Editor note:</i> Brooks received the Turing Award in 1999 
&ldquo;for landmark contributions to 
computer architecture, operating systems, 
and software engineering&rdquo;.]</p>

<p align=right>&#151;
Frederick Brooks Jr., <i>Aiken and the Harvard &ldquo;Comp Lab&rdquo;</i>, in<br>
I. Bernard Cohen and Gregory W. Welch, editors,
<a href="http://books.google.ca/books?id=lVfX5wMkI7oC&printsec=frontcover&dq=%22Makin%27+Numbers%22&hl=en&ei=7SWaTsbBGM_KiAKLvNXDDQ&sa=X&oi=book_result&ct=result&resnum=1&ved=0CDEQ6AEwAA#v=onepage&q&f=false"><i>Makin&rsquo; Numbers</i></a>,<br>
MIT Press, 1999, page 141-142.
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="DP_course"></a>
Many people think that Aiken was interested only in
<i>scientific</i> computers.  This was simply not so.
During one coffee hour, Aiken turned to Ken Iverson,
who had just finished his Ph.D., and said:
&ldquo;These machines are going to be immensely important for business,
and I want you prepare and teach a course in business data processing
next fall.&rdquo;
There had never been such a course anywhere in the world.
Ken was qualified only because he was a mathematician.
I was so excited by the prospect that I immediately 
volunteered to be Ken&rsquo;s graduate teaching assistant.
</p>

<p align=right>&#151;
Frederick Brooks Jr., <i>Aiken and the Harvard &ldquo;Comp Lab&rdquo;</i>, in<br>
I. Bernard Cohen and Gregory W. Welch, editors,
<a href="http://books.google.ca/books?id=lVfX5wMkI7oC&printsec=frontcover&dq=%22Makin%27+Numbers%22&hl=en&ei=7SWaTsbBGM_KiAKLvNXDDQ&sa=X&oi=book_result&ct=result&resnum=1&ved=0CDEQ6AEwAA#v=onepage&q&f=false"><i>Makin&rsquo; Numbers</i></a>,<br>
MIT Press, 1999, page 141.
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="mckinsey"></a>
The first real encouragement of my work in notation came 
when I took a six-month mini-sabbatical after two years of 
teaching in Aiken&rsquo;s program, 
to work for the still-thriving consulting firm McKinsey &amp; Co. 
This was in the fall of my third year on the faculty.</p>

<p>This occurred because M&amp;C had undertaken work 
that required the use of a computer. 
Having no computer knowledge themselves, 
M&amp;C turned to the source of all knowledge 
(Harvard, and eventually Aiken), and Aiken recommended me.</p>

<p>When I arrived in San Francisco, Ted Strong (of M&amp;C) 
explained that his client, 
Hawaiian Sugar (in a dispute over shipping rates with Matson Lines), 
had embarked on a thorough analysis of their options &mdash; 
including, for example, the choice of locating refineries in Hawaii or in the US. 
This required a computer, and Ted had secured the services 
of Bob Oakford and Dan Fisher of Stanford University, 
to program the (then rather new) IBM 650.</p>

<p>Ted held weekly meetings with Oakford 
to communicate his remarkably-detailed knowledge of sugar and shipping. 
These meetings seemed to go well, but he was unable to get anything understandable 
about the progress of the programming. 
I asked Ted to do the same for me, but recorded the steps and decisions 
in the notation I had been developing for teaching, 
notation that was eventually implemented as APL.</p>

<p>The encouraging thing was that we were able to converse in accurate detail, 
Ted knowing nothing of computers, 
and I knowing nothing of sugar and shipping. 
Moreover, Oakford and Fisher were able to understand these same programs, 
just as I was able to understand their 650 programs. 
In a few months the 650 programs were nearly complete, 
and we four eagerly anticipated their use &mdash;
whereupon the project was abruptly terminated.</p>

<p>This was a great disappointment, 
even though the reason was victory &mdash; 
all this computer stuff had intimidated Matson 
to agree to a re-negotiation of rates.</p>

<p align=right>&#151;
<a href="http://keiapl.org/rhui/autobio.htm#test">
<i>Kenneth E. Iverson</i></a>, 2008
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="one_little_book"></a>
Ken didn&rsquo;t get tenure at Harvard.  He did his 5 years as an
assistant professor and the Faculty decided not to put him up
for promotion.  I asked him what went wrong and he said, 
well, the Dean called me in and said, the trouble is,
you haven&rsquo;t published anything but the one little book.</p>

<p>The one little book later got the Turing Award.</p>

<p>I think that is a comment on the conventional mindset
of promotion procedures rather than a comment on Ken; it&rsquo;s
a comment on academic procedure and on Harvard.</p>

<p align=right>&#151;
Fred Brooks, 
<a href="http://www.computerhistory.org/events/index.php?id=1099685637">
<i>A Celebration of Kenneth Iverson</i></a>, 2004-11-30
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="A_Programming_Language"></a>
Applied mathematics is largely concerned with the design
and analysis of explicit procedures for calculating the exact
or approximate values of various functions.  Such explicit
procedures are called algorithms or <i>programs</i>.
Because an effective notation for the description of programs
exhibits considerable syntactic structure, it is called a
<i>programming language</i>.</p>

<p>Much of applied mathematics, particularly the more recent
computer-related areas which cut across the older disciplines,
suffer from the lack of an adequate programming language.
It is the central thesis of this book that the descriptive
and analytic power of an adequate programming language amply
repays the considerable effort required for its mastery.
This thesis is developed by first presenting the entire language
and then applying it in later chapters to several major topics.</p>

<p align=right>&#151;
<a href="http://www.jsoftware.com/papers/APL.htm"><i>A Programming Language</i></a>, 1962
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Jean_Iverson"></a>
&ldquo;I am indebted to my wife for assistance
in preparing the final draft&rdquo;, so says the last sentence of the Preface to 
<a href="http://www.jsoftware.com/papers/APL.htm"><i>A Programming Language</i></a>.
The acknowledgment only hints at the heroic effort involved:
Jean typed the text and hand-drew the special characters and symbols using
a Keuffel&amp;Esser Leroy Lettering Set.
As well, she participated in the proofreading of
several &ldquo;final&rdquo; drafts,
reading out every comma, period, slash, dash, etc.
while Ken followed in the galley copy.</p>

<p>Jean also compiled the index of the book
with the aid of punched cards.</p>

<p align=right>&#151;
Roger Hui
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="classic"></a>
In 1962 I was in Ken&rsquo;s class on his notation at IBM Research in  
Yorktown Heights, NY.  At our second or third meeting Ken came in with  
a carton, which he opened, and handed one of the first copies of 
<a href="http://www.jsoftware.com/papers/APL.htm"><i>A Programming Language</i></a>
to each student. ...  
They had been printed in Ireland, and Wiley had had to pay penalty  
premiums because of all the special characters needed.</p>

<p>I became publisher of APL Press in 1980 when Ken and Jean moved back to  
Canada, and I promised Ian Sharp that I would lose at least as much  
money as the Iversons had. When I became aware that the book was no  
longer in print, I asked Wiley if they would allow APL Press to  
reprint it. Their answer was a dignified &ldquo;No&rdquo;, and their reason?  
&ldquo;Because it&rsquo;s a classic.&rdquo;</p>
<p align=right>&#151;
Eugene McDonnell
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Dijkstra"></a>
Dijkstra: How would you represent a more complex operation, 
for example, the sum of all elements of a matrix <img src="https://www.jsoftware.com/papers/img/matrixm.png"> 
which are equal to the sum of the corresponding row and column indices?</p>

<p>Iverson: <img align=middle src="https://www.jsoftware.com/papers/img/sum0.png"></p>

<p align=right>&#151;
presentation of 
<a href="http://www.jsoftware.com/papers/FPL.htm"><i>Formalism in Programming Languages</i></a>,
Working Conference on Mechanical Language Structures, 1963</p>

<p>[<i>Editor note</i>: 
According to the notation in 
<a href="http://www.jsoftware.com/papers/APL.htm"><i>A Programming Language</i></a>, 
a valid solution would be
<img align=middle src="https://www.jsoftware.com/papers/img/sum1.png">. (Two slashes instead of one 
in front of the final <img src="https://www.jsoftware.com/papers/img/matrixm.png"> would also work.) 
Dijkstra posed a simple problem, 
as any conversant APL or J user would attest.
The printed version probably contains clerical errors.]<br>&nbsp;<p>
</td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="PAT"></a>
Selection of the system language was a central decision.
Major advances in programming language are desirable to best
provide a personalized service for creative man-machine interaction.
A most promising direction for improvement is to better respond
to the fact that most problems presented for computer solution
deal with arrays of operands rather than isolated operands.
Although modern languages include the ability to access
array elements by indexing, the Iverson language recognizes,
in its basic structure, the ability to specify entire arrays
as operands.
This not only reduces the number of program characters
which must be specified to perform most program functions,
it also reduces the amount of loop control and other explicit
program logic required of the user.
The language includes selection operations,
generation of test and argument arrays,
and other macro-operations in a simple consistent manner.</p>

<p>The choice of an array-oriented language reduces the relative penalty
of the interpretive method of translation,
since each translated statement results in extensive execution
on many elements.
In the longer term, an array-oriented language holds great promise
as a natural way of specifying implicit parallel operations
to a system with multiple processing units.</p>
<p align=right>&#151;
Herb Hellerman, 
<a href="http://dl.acm.org/citation.cfm?id=364520.364573"><i>Experimental Personalized Array Translator System</i></a>,<br>
1964-07
<br>&nbsp;</p></td></tr>


<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Montalbano"></a>
My first acquaintance with the notation that has since become APL  
(for several years it was either &ldquo;Iverson Language&rdquo;, 
&ldquo;Iverson Notation&rdquo;, or just plain &ldquo;Iverson&rdquo;) 
started with an IBM Research  
Report by Kenneth Iverson called, 
<a href="http://www.jsoftware.com/papers/DFSP.htm"><i>The Description of Finite  
Sequential Processes</i></a>.</p>

<p>I don&rsquo;t have the paper handy at the moment so what I&rsquo;m 
about to tell  
you is all memory; it may be mistaken in details but not in essence.  
I seem to remember that the first page was mostly given over to  
heading material, possibly an abstract, so that there were only two  
short columns of reading matter on it. And, again memory, it took me  
several hours to understand what those two short columns were all about.</p>

<p>The author&rsquo;s approach was so different from anything I&rsquo;d ever  
encountered that I had a difficult time adjusting to his frame of  
reference. At the end of the first page, a fair assessment of my  
state of mind would be that I had glimmerings but no hope.</p>

<p>The second page took about as much reading time as the first but,  
since it had twice as much matter, I was clearly improving. The  
glimmerings were now fitful gleams. One thing had definitely changed,  
however. I had no doubts about the value of what I was reading. I was  
now virtually certain that the author had something to say and that  
I&rsquo;d better find out what it was. The 
<a href="http://keiapl.org/eemcd/keisimplexpages/keisimplex452.html">third page</a>
had an illustration that, 
in a few short lines, described George Dantzig&rsquo;s simplex  
algorithm simply and precisely.</p>

<p>That was the overwhelming, crucial experience.</p>

<p>In the previous thirteen years, I had participated in so many murky  
discussions of what was here presented with crystal clarity that I  
knew that what I was reading was of enormous significance to the  
future of computing.</p>
<p align=right>&#151;
Michael Montalbano, 
<a href="http://ed-thelen.org/comp-hist/APL-hist.html"><i>A Personal History of APL</i></a>,
1982
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="the_grass"></a>
Before APL was called APL, it was called
&ldquo;Iverson notation&rdquo;.  Ken mused that
it should be called simply &ldquo;the notation&rdquo;.  After all,
we don&rsquo;t say &ldquo;God&rsquo;s grass&rdquo;, 
just &ldquo;the grass&rdquo;.</p>

<p align=right>&#151;
Paul Berry 
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="APL"></a>
I remember quite well the day I first heard the name APL.
It was the summer of 1966 and I was working in the IBM Mohansic Laboratory,
a small building in Yorktown Heights, NY. 
The project I was working on was IBM&rsquo;s first effort at
developing a commercial time-sharing system, one which was called TSS.
The system was showing signs of becoming incomprehensible as more and more bells
and whistles were added to it.
As an experiment in documentation, I had hired three summer students
and given them the job of transforming &ldquo;development workbook&rdquo;
type of documentation we had for certain parts of the system into
something more formal, namely Iverson notation, which the three students
had learned while taking a course given by Ken Iverson at 
Fox Lane High School in Mount Kisco, NY.
One of the students was Eric Iverson, Ken&rsquo;s son.</p>

<p>As I walked by the office the three students shared, I could hear
sounds of an argument going on. I poked my head in the door,
and Eric asked me, &ldquo;Isn&rsquo;t it true that everyone knows
the notation we&rsquo;re using is called APL?&rdquo; 
I was sorry to have to disappoint him by confessing that I had never
heard it called that.  Where had he got the idea it was well known?
And who had decided to call it that?
In fact, why did it have to be called anything?
Quite a while later I heard how it was named.
When the implementation effort started in June of 1966,
the documentation effort started, too. I suppose when they
had to write about &ldquo;it&rdquo;, Falkoff and Iverson
realized that they would have to give &ldquo;it&rdquo; a name.
There were probably many suggestions made at the time,
but I have heard of only two.  A group in SRA in Chicago
which was developing instructional materials using 
the notation was in favor of the name &ldquo;Mathlab&rdquo;.
This did not catch on.  Another suggestion was to call it
&ldquo;Iverson&rsquo;s Better Math&rdquo; and then let people
coin the appropriate acronym.  This was deemed facetious.</p>

<p>Then one day Adin Falkoff walked into Ken&rsquo;s office
and wrote &ldquo;A Programming Language&rdquo; on the board,
and underneath it the acronym &ldquo;APL&rdquo;.
Thus it was born.
It was just a week or so after this that Eric Iverson
asked me his question, at a time when the name hadn&rsquo;t
yet found its way the thirteen miles up the Taconic Parkway
from IBM Research to IBM Mohansic.</p>

<p align=right>&#151;
Eugene McDonnell, 
<i><a href="http://www.jsoftware.com/jwiki/Doc/A_Source_Book_in_APL#origins">A Source Book in APL</i></a>, 1981
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Falkoff"></a>
Q: I have read some other discussions where you and other people
suggested that one of the interesting applications
was using APL to teach programming and mathematics
at the elementary and high school levels.</p>

<p>Adin: We did some of that, particularly at the beginning,
and we had a little fun with it.</p>

<p>At that time we only had typewriter terminals 
and we made some available to some local private schools.
There was one in particular 
where problem students were supposed to be taught,
and we gave them exercises to do 
on the typewriter and turned them loose.</p>

<p>The fun part was that we found 
that some of these students 
who were supposed to be resistant to learning
broke into the school after hours 
so they could do more work on it.
They were using typewriter terminals 
hooked to our time-sharing system.</p>

<p align=right>&#151;
Adin Falkoff, 
<i>Masterminds of Programming</i></a>, 2009
<br>&nbsp;</p></td></tr>


<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="rdm"></a>
My first exposure to Iverson Notation was 
a lecture by KEI at Stanford Research Institute in 1961 or 62. 
Several of us from the Stanford Comp Center attended. 
I did purchase a copy of 
<a href="http://www.jsoftware.com/papers/APL.htm">the book</a> 
shortly after it was published. 
Those arrows down the side for branching 
seemed a barrier to implementation.</p>

<p>Some features such as<tt> +/X </tt>seemed 
to present an opportunity for compiler code generation. 
An efficient looping form could be used 
which is not always the case with a <b>for</b> statement.
</p>

<p align=right>&#151;
Roger Moore, <a href="http://aprogramminglanguage.com/wordpress/2011/11/27/its-apls-birthday-or-is-it/#comments"><i>
It&rsquo;s APL&rsquo;s Birthday! Or is it?</i></a>, 2011-11-27
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="5100"></a>
Some of my children and nephews started APL on a 5100. Some started  
on the two-huge-suitcases version of &ldquo;portable&rdquo; APL. Some started on  
the 2741 time-sharing terminal. Luckily, none of them had to start on  
a 1050.</p>

<p>I started on the blackboard version.</p>
<p align=right>&#151;
Eugene McDonnell
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="15000"></a>
I started in 1966 on an APL machine that weighed 15,000 tons,
when I travelled from Hong Kong to San Francisco on the
<a href="http://www.apl.com/history/timeline/stat7.htm#pw2">S.S. President Wilson</a>
of the American President Lines.</p>

<p align=right>&#151;
Roger Hui
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="APL360ack"></a>
The APL language was first defined by K.E. Iverson
in <i><a href="http://www.jsoftware.com/papers/APL.htm">A Programming Language</a></i> 
(Wiley, 1962) and has since
been developed in collaboration with A.D. Falkoff.
The APL\360 Terminal System was designed with the
additional collaboration of L.M. Breed, who with
R.D. Moore<sup>*</sup>, also designed the S/360 implementation.
The system was programmed for S/360 by Breed, Moore,
and R.H. Lathwell, with continuing assistance from
L.J. Woodrum<sup>&dagger;</sup>, and contributions by C.H. Brenner,
H.A. Driscoll<sup>&nbsp;&plusmn;</sup>, and S.E. Krueger<sup>&nbsp;&plusmn;</sup>.  
The present implementation also benefitted from experience with
an earlier version, designed and programmed for the
IBM 7090 by Breed and P.S. Abrams<sup>**</sup>.</p>

<p>The development of the system also profited from ideas 
contributed by many users and colleagues, notably
E.E. McDonnell, who suggested the notation for the
signum and the circular functions.</p>

<p>In the preparation of the present manual, the authors
are indebted to L.M. Breed for many discussions and
suggestions; to R.H. Lathwell, E.E. McDonnell, and
J.G. Arnold<sup>&nbsp;&dagger;&dagger;</sup> for critical reading of successive
drafts; and to Mrs. G.K. Sedlmayer and Miss Valerie
Gilbert for superior clerical assistance.</p>

<p>A special acknowledgement is due to John L. Lawrence,
who provided important support and encouragement during
the early development of APL implementation, and who 
pioneered the application of APL in computer-related
instruction.</p>

<table>
<tr><td><sup>*</sup></td>                <td>I.P. Sharp Associates, Toronto, Canada.</td></tr>
<tr><td><sup>&dagger;</sup></td>         <td>General Systems Architecture, IBM Corporation, Poughkeepsie, N.Y.</td></tr>
<tr><td><sup>&plusmn;</sup></td>         <td>Science Research Associates, Chicago, Illinois.</td></tr>
<tr><td><sup>**</sup></td>               <td>Computer Science Department, Stanford University, Stanford, California.</td></tr>
<tr><td><sup>&dagger;&dagger;</sup>&nbsp;</td> <td>Industry Development, IBM Corporation, White Plains, NY.</td></tr>
</table>

<p align=right>&#151;
Falkoff and Iverson,
Acknowledgements in 
<i><a href="http://keiapl.org/archive/APL360_UsersMan_Aug1968.pdf">APL\360 User&rsquo;s Manual</a></i>, 1968-08
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="principles"></a>
Different people claiming to follow the same broad
principles may well arrive at radically different designs;
an appreciation of the actual role of the principles in
design can therefore be communicated only by
illustrating their application in a variety of specific
instances.  It must be remembered, of course,
that in the heat of battle principles are not applied
as consciously or systematically as may appear
in the telling.</p>

<p align=right>&#151;
<a href="http://www.jsoftware.com/papers/APLDesign.htm"><i>The Design of APL</i></a>, 1973
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="design"></a>
[D]esign really should be concerned largely, 
not so much with collecting a lot of ideas, but with shaping
them with a view of economy and balance.
I think a good designer should make more use of Occam&rsquo;s razor than
of the dustbag of a vacuum cleaner, and I thought this was important
enough that it would be worthwhile looking for some striking examples
of sorts of overelaborate design.  I was surprised that I didn&rsquo;t
find it all that easy, except perhaps for the [designs] of
programming languages and American automobiles.  I think that designers
seem to have this feeling, a gut feeling of a need for parsimony.</p>

<p align=right>&#151;
presentation of <a href="http://www.jsoftware.com/papers/APLEvol.htm"><i>The Evolution of APL</i></a>, HOPL Conference, 1978
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="touchstone"></a>
I asked Ken, I think it may have been at the HOPL Conference,
&ldquo;What is the touchstone to making an elegant programming language?&rdquo;
He said, &ldquo;The secret is, it has to do what you expect it to do.&rdquo;
</p>

<p>If you stop and think about APL and if you stop and think about J
and if you think about Ken&rsquo;s work generally, it is that
high degree of consistency which is the product of an exceptionally
clean mind, and a fierce determination not to invent any new
constructs, until you have to.</p>

<p align=right>&#151;
Fred Brooks, 
<a href="http://www.computerhistory.org/events/index.php?id=1099685637">
<i>A Celebration of Kenneth Iverson</i></a>, 2004-11-30
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="perlis78"></a>
I was at a meeting in Newcastle, England, where I&rsquo;d been invited
to give a talk, as had Don Knuth of Stanford, 
Ken Iverson from IBM, and a few others as well.
I was sitting in the audience sandwiched between
two very esteemed people in computer science and computing &mdash;
Fritz Bauer, who runs computing in Bavaria 
from his headquarters in Munich,
and Edsger Dijkstra, who runs computing all over the world
from his headquarters in Holland.</p>

<p>Ken was showing some slides &mdash; and one of his slides
had something on it that I was later to learn was an APL
one-liner.
And he tossed this off as an example of the expressiveness
of the APL notation.
I believe the one-liner was one of the standard ones
for indicating the nesting level of the parentheses
in an algebraic expression.
But the one-liner was very short &mdash; ten characters,
something like that &mdash; and having been involved
with programming things like that for a long time
and realizing that it took a reasonable amount 
of code to do,
I looked at and said,
&ldquo;My God, there must be something in this language.&rdquo;
Bauer, on my left, didn&rsquo;t see that.
What he saw or heard was Ken&rsquo;s remark that
APL is an extremely appropriate language for teaching algebra,
and he muttered under his breath to me,
in words I will never forget,
&ldquo;As long as I am alive,
APL will never be used in Munich.&rdquo;
And Dijkstra, who was sitting on my other side,
leaned toward Bauer and said,
&ldquo;Nor in Holland.&rdquo;
The three of us were listening to the same lecture,
but we obviously heard different things.
</p>

<p align=right>&#151;
Alan Perlis, 
<a href="http://www.jsoftware.com/papers/perlis78.htm"><i>Almost Perfect Artifacts
Improve only in Small Ways:<br>
APL is more French than English</i></a>, 1978-03-29
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="beautiful"></a>
Such were the vagaries of what may have been 
the most powerful computer language ever hatched by a Canadian. 
Yes, I know that James Gosling, an alumnus of the University of Calgary, 
was the &ldquo;father of Java.&rdquo; 
He and I have talked about it. 
And yes, there is a now a game called &ldquo;Perl Golf&rdquo; 
in which you try to do the most work 
in that scripting language with the fewest number of (key-) strokes. 
Java and Perl are good and useful and popular, 
but APL was &#133; beautiful.</p>

<p align=right>&#151;
Tom Keenan, 
<a href="http://keiapl.org/rhui/passage.htm#businessedge"><i>Business Edge</i></a>, 2004
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="algebra"></a>
Algebra is the language of mathematics.  It is therefore
an essential topic for anyone who wishes to continue the study
of mathematics.  
Moreover, enough of the language of algebra has crept into
the English language to make a knowledge of some algebra useful
to most non-mathematicians as well.  This is particularly true
for people who do advanced work in any trade or discipline,
such as insurance, engineering, accounting, or electrical wiring.
For example, instructions for laying out a playing field might
include the sentence, &ldquo;To verify that the corners
are square, note that the length of the diagonal must be
equal to the square root of the sum of the squares of the length
and the width of the field&rdquo;, or alternatively, 
&ldquo;The length of the diagonal must be <img src="https://www.jsoftware.com/papers/img/sqrt.png"> &rdquo;.
In either case (whether expressed in algebraic symbols or in
the corresponding English words), the comprehension of such a
sentence depends on a knowledge of some algebra.</p>

<p>Because algebra is a language, it has many analogies with English.
These analogies can be helpful in learning algebra, and they will
be noted and explained as they occur.  For instance,
the integers or counting numbers (1, 2, 3, 4, 5, 6, &#133;)
in algebra correspond to the concrete nouns in English, since
they are the basic things we discuss, and perform operations upon.
Furthermore, functions in algebra (such 
as<tt> + </tt>(plus),<tt> - </tt>(subtract), 
and<tt> * </tt>(times)) correspond to the verbs in English,
since they <i>do</i> something to the nouns.
Thus,<tt> 2+3 </tt>means &ldquo;add 2 to 3&rdquo;
and<tt> (2+3)*4 </tt>means &ldquo;add 2 to 3 and then multiply by 4&rdquo;.
In fact, the word &ldquo;function&rdquo; (as defined, for example,
in the <i>American Heritage Dictionary</i>), is descended from an
older word meaning, 
&ldquo;to execute&rdquo;, or &ldquo;to perform&rdquo;.</p>
<p align=right>&#151;
<a href="http://www.jsoftware.com/jwiki/Doc/Algebra_An_Algorithmic_Treatment"><i>Algebra: An Algorithmic Treatment</i></a>, 1972
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="exercise"></a>
The inclusion of too many simple exercises may bore the 
quick student, but their exclusion may leave unbridgeable gaps
in the experience of some.  The student should therefore learn
to use discretion in the doing of exercises, ranging ahead
and skipping detail, but being prepared to return to do 
earlier exercises whenever unintelligible difficulties arise
in later ones.
The most serious difficulty most students find with this
approach is psychological; one must learn to treat
exercises as a potential source of light and delight rather
than as a capriciously imposed drudgery.</p>
<p align=right>&#151;
<a href="http://www.jsoftware.com/jwiki/Doc/Elementary_Analysis"><i>Elementary Analysis</i></a>, 1976
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Turing_lecture0"></a>
The importance of nomenclature, notation, and language as tools of thought
has long been recognized.  In chemistry and in botany, for example,
the establishment of systems of nomenclature by Lavoisier and Linnaeus did much
to stimulate and to channel later investigation.
Concerning language, George Boole in his <i>Laws of Thought</i> [p.24]
asserted that &ldquo;That language is an instrument of human reason,
and not merely a medium for the expression of thought,
is a truth generally admitted.&rdquo;</p>

<p>Mathematical notation provides perhaps the best-known and best-developed
example of language used consciously as a tool of thought.
Recognition of the important role of notation in mathematics is clear
from the quotations from mathematicians given in Cajori&rsquo;s 
<i>A History of Mathematical Notations</i> [pp. 332, 331].
They are well worth reading in full, but the following excerpts
suggest the tone:</p>

<table>
<tr><td width=50>&nbsp;</td><td> 
By relieving the brain of all unnecessary work, a good notation
sets it free to concentrate on more advanced problems, and
in effect increases the mental power of the race.
<tt>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</tt>A.N. Whitehead</td></tr>

<tr><td>&nbsp;</td></tr>

<tr><td>&nbsp;</td><td> 
The quantity of meaning compressed into small space by 
algebraic signs, is another circumstance that facilitates the
reasonings we are accustomed to carry on by their aid.
<tt>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</tt>Charles Babbage</td></tr>
</table>

<p align=right>&#151;
overture of 
<a href="http://www.jsoftware.com/papers/tot.htm"><i>Notation as a Tool of Thought</i></a>,
Turing Award Lecture, 1979-10-29
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Turing_lecture1"></a>
The practice of first developing a clear and precise definition
of a process without regard to efficiency, and then using it as
a guide and a test in exploring equivalent processes possessing
other characteristics, such as greater efficency,
is very common in mathematics.  It is a very fruitful practice
which should not be blighted by premature emphasis on
efficiency in computer execution.</p>

<p>Measures of efficiency are often unrealistic because they 
concern counts of &ldquo;substantive&rdquo; functions such
as multiplication and addition, and ignore the housekeeping
(indexing and other selection processes) which is often
greatly increased by less straightforward algorithms.
Moroever, realistic measures depend strongly on the
current design of computers and of language embodiments.
For example, because functions on booleans 
(such as<tt> &and;/B </tt>and<tt> &or;/B</tt>)<tt> </tt>are found to be
heavily used in APL, implementers have provided efficient
execution of them.  Finally, overemphasis of efficiency
leads to an unfortunate circularity in design:
for reasons of efficiency early programming languages
reflected the characteristics of the early computers,
and each generation of computers reflects the needs
of the programming languages of the preceding generation.</p>

<p align=right>&#151;
finale of
<a href="http://www.jsoftware.com/papers/tot.htm"><i>Notation as a Tool of Thought</i></a>,
Turing Award Lecture, 1979-10-29
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="tenure"></a>
Name 3 Turing Award winners 
who were denied tenure at their universities.</p>

<p>Ken Iverson was denied tenure at Harvard in 1959,
went to IBM Research, and won the Turing award in 1979.<br>
<a href="KEIQA.htm#one_little_book">http://www.jsoftware.com/papers/KEIQA.htm</a></p>

<p>Edsger Dijkstra was denied tenure at Amsterdam in 1970,
went to UT Austin, and won the Turing award in 1972.<br>
<a href="http://www.cbi.umn.edu/oh/pdf.phtml?id=317">http://www.cbi.umn.edu/oh/pdf.phtml?id=317, page 12</a></p>

<p>Stephen Cook was denied tenure at UC Berkeley in 1970,
went to the University of Toronto, and won the Turing 
award in 1983.<br>
<a href="http://www.cbi.umn.edu/oh/pdf.phtml?id=317">http://www.cbi.umn.edu/oh/pdf.phtml?id=317, page 12</a></p>

<p align=right>&#151;
Roger Hui, 
<a href="http://www.jsoftware.com/pipermail/chat/2008-July/001144.html">
J Forum message</a>,
2008-07-12
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="thinking"></a>
In 1973 or 1974 Ken and I gave a talk at Kodak in Rochester to a group of
40 to 50 programmers who were required to work in PL/I.  In the question
period a senior staff member said,
&ldquo;If I understand what you people are saying, you are suggesting that
we should adopt a new way of thinking.&rdquo;</p>

<p>And Ken jumped up out of his chair and said, &ldquo;Yes! That&rsquo;s
exactly what I am saying!&rdquo;</p>

<p align=right>&#151;
Joey Tuttle, 
<a href="http://www.computerhistory.org/events/index.php?id=1099685637">
<i>A Celebration of Kenneth Iverson</i></a>, 2004-11-30
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="no_it_doesn't"></a>
There  is  a story that Ken Iverson, the inventor of APL, was passing a terminal
at which a Fortran programmer had just typed:</p>

<pre>
      I = I+1
</pre>

<p>Ken paused for a moment, 
muttered &ldquo;no it doesn&rsquo;t&rdquo;, and passed on.</p>

<p>A similar yarn relates to a computer scientist who, many years ago,  
before the concept of declarative programming was generally understood, 
was teaching  programming to a group of geography students.  
The students were having a hard time
understanding what<tt> I=I+1 </tt>means. 
To his immense credit, on reflection, the teacher realised that 
he didn&rsquo;t understand either. 
Thus came a significant advance in computer science.</p>

<p align=right>&#151;
John Scholes, 
<a href="http://dfns.dyalog.com/n_declarative.htm">
<i>Declarative Programming</i></a>
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Pisa"></a>
During the APL75 conference in Pisa Ken visited the
Leaning Tower.  He pronounced it the first software 
project &mdash; late and overbudget, and from early on
everyone could see that it was going to be a 
disaster, but by then the project was too far along 
and there was nothing to do but plow ahead.</p>

<p align=right>&#151;
Lib Gibson
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="stupid_energetic"></a>
At a conference I have forgotten, Ken and I had
attended the same talk. 
The speaker had been absolutely enthusiastic 
about a doubtful idea. 
Ken asked me what I thought about the talk. 
I struggled to find polite words. 
Ken cut me off and offered a
story about a classic expert on warfare who
classified adversaries in war by two qualities:
whether they were smart and whether they were energetic. 
If you were fighting a smart-energetic adversary, 
you had to be more so, smart-lazy and
stupid-lazy were likewise appropriately handled.
However, God help you if you faced an adversary
who was stupid but energetic. 
I am sure Ken&rsquo;s version was far more detailed, 
but when he was done, his point was perfectly clear 
and it had been made in a most memorable fashion.</p>

<p align=right>&#151;
Cliff Reiter, 
<a href="http://portalparts.acm.org/1290000/1286361/fm/frontmatter.pdf"><i>Memories
of the Mysterious Ken</i></a>, 2007-09
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="OAG"></a>Some e-mails from April 2016, when I was gathering information 
for revamping <a href="http://en.wikipedia.org/wiki/Kenneth_E._Iverson">Ken&rsquo;s Wikipedia page</a>.</p>

<table>
<tr><td>From: Roger Hui &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; To: Eric Iverson</td></tr>
<tr><td>I remembered that Ken and Arthur worked together on a database at IPSA.
Was it the OAG database?
</td></tr><tr><td>&nbsp;</td></tr>

<tr><td>From: Eric Iverson &nbsp; &nbsp; &nbsp;&nbsp; To: Roger Hui</td></tr>
<tr><td><p>Arthur did significant work on OAG (Official Airline Guide) database. 
He took over what was essentially a failed project for a critical customer, 
rewrote it from scratch, and turned it into a resounding success.</p>
<p>I am quite sure that Ken had no involvement at all. And moreover that Ken
never worked on any db application with or without Arthur.</p>
</td></tr><tr><td>&nbsp;</td></tr>

<tr><td>From: Roger Hui &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; To: Eric Iverson</td></tr>
<tr><td>My memory is quite clear that Ken had a role in it.  I remember being
astounded when Arthur told me, and one of us said Ken working on a database
is like God had came down and pair-programmed with you.  I&rsquo;ll e-mail Arthur.</p>
<p>Ken working with Arthur on OAG would fit the narrative I am
constructing.  There they were, &ldquo;officially&rdquo; working on the OAG, and at the
same time Arthur went and wrote the model of APL in APL that gave a great
big push to <a href="http://www.jsoftware.com/papers/RationalizedAPL.htm">Rationalized</a> / 
<a href="http://www.jsoftware.com/papers/APLDictionary.htm">Dictionary APL</a>.</p>
</td></tr><tr><td>&nbsp;</td></tr>

<tr><td>From: Arthur Whitney &nbsp; To: Roger Hui</td></tr>
<tr><td>yes ken and i worked on oag and aplmodel at the same time.
much more time on the aplmodel.
</td></tr><tr><td>&nbsp;</td></tr>

<tr><td>From: Roger Hui &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; To: Eric Iverson</td></tr>
<tr><td>The appended is what Arthur said a few minutes ago.  I am amused that the manager
of the both of them (you) did not know that they were doing this.
</td></tr>
</table>

<p align=right>&#151;
Roger Hui 
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="J0"></a>
When I retired from paid employment, I turned my attention back
to this matter and soon concluded that the essential tool required
was a dialect of APL that:</p>
<ul>
<li>Is available as &ldquo;shareware&rdquo;, 
and is inexpensive enough to be 
acquired by students as well as by schools</li>
<li>Can be printed on standard printers</li>
<li>Runs on a wide variety of computers</li>
<li>Provides the simplicity and generality of the latest thinking in APL</li>
</ul>

<p>The result has been J, first reported in 
<a href="http://portal.acm.org/citation.cfm?doid=97808.97845">Reference 5</a>.</p>

<p>Work began in the summer of 1989 when I first discussed my desires
with Arthur Whitney. He proposed the use of C for implementation,
and produced (on one page and in one afternoon) 
a working fragment that provided only one function (+), 
one operator (/), one-letter names, 
and arrays limited to ranks 0 and 1, but did provide
for boxed arrays and for the use of the copula for assigning names
to any entity.</p>

<p>I showed this fragment to others in the hope of interesting someone
competent in both C and APL to take up the work, and soon recruited
Roger Hui, who was attracted in part by the unusual style of C
programming used by Arthur, a style that made heavy use of preprocessing
facilities to permit writing further C in a distinctly APL style.</p>

<p align=right>&#151;
<a href="http://www.jsoftware.com/papers/APLPersonalView.htm"><i>A Personal View of APL</i></a>, 1991
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="J1"></a>
It&rsquo;s funny, but my recollection is that 
at the time I thought <i>I recruited Ken</i>. 
Whoever recruited whom, I won a great prize when Ken decided 
he and I should work together.</p>

<p>The final impetus that got J started was the one-page interpreter 
fragment that Arthur wrote, recorded in Appendix A of 
<a href="http://www.jsoftware.com/jwiki/Doc/An_Implementation_of_J"><i>An Implementation of J</i></a>
and also reproduced in 
<a href="http://keiapl.org/rhui/remember.htm#atw">Appendix A</a> below.  
My immediate reaction on seeing the page was recoil and puzzlement: 
it looked nothing like any C code I had ever seen. (&ldquo;Is it even C?&rdquo;) 
However, Ken counselled that I should reserve judgment. As recounted in 
<i>An Implementation of J</i>, it then happened that:</p>

<table><tr><td><tt>&nbsp; &nbsp;</tt></td><td>
I studied this interpreter for about a week for its organization and 
programming style; and on Sunday, August 27, 1989, at about four o&rsquo;clock in 
the afternoon, wrote the first line of code that became the implementation 
described in this document.
</td><td><tt>&nbsp; &nbsp;</tt></td></tr></table>

<p>The name &ldquo;J&rdquo; was chosen a few minutes later, when it became necessary 
to save the interpreter source file for the first time.</p>

<p align=right>&#151;
Roger Hui,
<a href="http://keiapl.org/rhui/remember.htm"><i>Remembering Ken Iverson</i></a>, 2004
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="APL90"></a>
When Reuters took over I.P. Sharp in 1987, Ken retired from I.P. Sharp. 
But did he rest?  Of course not!</p>

<p>In 1990 I was the Chairman of the annual APL conference in Copenhagen.</p>

<p>Not hampered by an installed user base and desiring to get rid 
of the character set problem, Ken had invented J, and 
submitted papers with the announcement to the APL90 conference.</p>

<p>Well&mdash;nothing Ken ever did left people cold&mdash;but 
the resulting discussion in the program committee was probably 
the hottest I have ever experienced. Finally I had to draw a line, 
seeing that the rest of the programme would not come into existence 
if this debate was not stopped.</p>

<p>&ldquo;We will not decline a paper from Ken Iverson, and it 
will go into the main conference stream.&rdquo;</p>

<p>Not that a refusal to accept Ken&rsquo;s paper at APL90 would have 
done anything to slow him down, of course ...</p>
<p align=right>&#151;
Gitte Christensen,
<a href="http://www.vector.org.uk/archive/v222/gitte222.htm"><i>Ken Iverson in Denmark</i></a>,
Vector, 2006
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Kaplan"></a>
My first name starts with J and my last name starts with K, 
followed by APL. So you know were I stand.</p>

<p align=right>&#151;
Joel Kaplan
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="syntax"></a>
In late 1965 or 1966, Larry Breed and I were working on the first 
Iverson Notation interpreter which ran on the IBM 7090 in batch mode 
(all there was in those days!).  This code was then ported to the internal 
time-sharing system at IBM to become &ldquo;IVSYS&rdquo;.</p>

<p>We had to build a parser for the language, which was never well-defined
syntactically in 
<a href="http://www.jsoftware.com/papers/APL.htm"><i>A Programming Language</i></a>. 
We decided to use a precedence grammar, as the parser would be simpler 
than something more general. 
We had difficulty getting Ken to appreciate the need for formality and 
precision in defining the grammar since that was not the way it was done 
in mathematics. 
So whenever we would ask him (or Adin Falkoff) how a particular 
syntactic construct was intended to work, he would say that 
&ldquo;the syntax must be satisfied&rdquo;.  
That got to be a running joke with Larry and me, and later 
with Roger and others.  I drew a cartoon of &ldquo;Satisfied Syntax&rdquo;, 
smiling and looking quite happy.</p>

<p align=right>&#151;
Phil Abrams
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="implementers1"></a>
Implementers I: Usually it was Adin who pulled down on the enthusiasm a little bit.
Very often it was the APL programmers, the APL implementers which at that
time were me and Dick Lathwell.  We had I think an unfair advantage,
because if we liked an idea, it would show up in the implementation overnight;
and if we didn&rsquo;t like the idea, it might take a <i>really</i> long
time to show up.</p>

<p>&#133;</p>

<p>At the &ldquo;March on Armonk&rdquo; conference Ken said this:
&ldquo;I would like to address a word to implementers: God bless them.
I say God bless them with the same sort of mixture of admiration, appreciation,
and exasperation as we say to the ladies, God bless them.&rdquo;</p>

<p>As I recall what he snarled once when I was around,
&ldquo;Programmers are like women: you can&rsquo;t live with them,
and you can&rsquo;t live without them.&rdquo;</p>

<p>If that sounds inappropriate today, all I can say is,
this was a long time ago.</p>

<p align=right>&#151;
Larry Breed, 
<a href="http://www.computerhistory.org/events/index.php?id=1099685637">
<i>A Celebration of Kenneth Iverson</i></a>, 2004-11-30
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="implementers2"></a>
Implementers II:  Stephen Wolfram gave a plenary presentation on 
Mathematica at the APL89 Conference in NYC, and sat at the same table
as Ken in the banquet that evening.  Ken asked Wolfram 
why it was that in Mathematica propositions don&rsquo;t have values 0 and 1
as in APL instead of <tt>True</tt> and <tt>False</tt>.  Wolfram replied
that he had no objections, but the Mathematica implementers
were against it.</p>

<p align=right>&#151;
Roger Hui
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="implementers3"></a>
Implementers III: The trouble with you, Ken complained
to me in jest, is that you have the attitude of &ldquo;just tell me where to pour 
the concrete&rdquo;.</p>

<p align=right>&#151;
Roger Hui,
<a href="http://keiapl.org/rhui/remember.htm"><i>Remembering Ken Iverson</i></a>, 2004
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Dickey"></a>
In the 1990&rsquo;s, Ken saw Professor Lee Dickey regularly
in the Toronto APLSIG monthly meetings.
Lee was a faculty member in the Department of Pure Mathematics
of the Faculty of Mathematics at the University of Waterloo. 
Ken liked to say in Lee&rsquo;s presence,
&ldquo;Don&rsquo;t call me a mathematician because it would offend a real
mathematician.&rdquo;  (Lee&rsquo;s response to that was a smile.)
And I, in Lee&rsquo;s presence, like to recount the following story:
I once took a course entitled &ldquo;Applied Discrete Mathematics&rdquo;.
In the introductory lecture, the professor explained that
it&rsquo;s called applied <i>discrete</i> mathematics because, if you
can not be pure, at least be &ldquo;discrete&rdquo;.</p>
</p>

<p align=right>&#151;
Roger Hui
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="emulator"></a>
Brothers Brian and Barry Silverman made a 360 hardware and
host OS emulator for the PC, running the original APL\360 source code.
They demonstrated their
<a href="http://groups.google.com/group/comp.lang.apl/browse_thread/thread/aaca55a1cb311d82/203aee0b880c4825">APL\360 emulator</a>
to the Toronto APLSIG on 1998-05-26.</p>

<p>Ken and Roger Moore (and I)
were in the audience.  After seeing that O backspace U backspace T
worked, Roger asked to see F overstruck with L, getting an E.  
The Silvermans were surprised by this last result.</p>

<p align=right>&#151;
Roger Hui
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Skyliner"></a>
John Lawrence and Al Rose were returning at JFK from a trip.  John 
was talking with the porter while waiting for Al to fetch the car. 
He tried explain that the two large suitcases held a 2741 computer 
terminal which the porter understood as a &ldquo;computer&rdquo;. 
Al arrived and the porter had some difficulty getting the 2741 
suitcases into the 
<a href="http://en.wikipedia.org/wiki/Ford_Skyliner">
Ford Skyliner</a>. Al asked the porter to wait while he put the roof 
down. As the Skyliner relays did their magic with the roof, the 
porter said: &ldquo;Your son, he is a genius!&rdquo;</p>

<p>Ken often told this story which perhaps only makes sense to those who 
have seen a Skyliner roof operate.</p>
<p align=right>&#151;
Roger Moore
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Roth"></a>
I was sitting next to Ken in the IBM Research Center auditorium,  
circa 1968, to listen to a talk given by Paul Roth.  
Before it started, Ken turned to me and asked, &ldquo;What hath Roth got?&rdquo;</p>

<p>He was, of course, using the text of the first telegraphic message,  
sent on May 24, 1844, by Samuel F.B. Morse, the inventor of the  
American telegraph: &ldquo;What hath God wrought?&rdquo; (KJV, Numbers 23:23)
<p align=right>&#151;
Eugene McDonnell
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="NSA0"></a>
I recall another story about Ken, witnessed firsthand, when he came to the 
National Security Agency, around 1970, to give a lecture on APL to an audience 
of several hundred people.</p>

<p>He was introduced by someone who gave quite a complete description 
of Ken&rsquo;s work 
and personal history.  Then Ken got up to speak.  He started by saying that 
normally when he gives a lecture the host approaches him a few minutes before 
the start of the lecture and furtively scribbles a few notes about where he went 
to school, etc.  Ken said he was quite surprised that no such discussion 
occurred this time, until he realized where he was!  
The audience had a great laugh.</p>

<p align=right>&#151;
Bob Smith
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="NSA1"></a>
At the AMS meetings in Washington DC in January, 2000,
Ken wandered over to the NSA booth.</p>

<p>Ken:  I don&rsquo;t suppose there&rsquo;s any point in asking
you any questions, since you can&rsquo;t answer anyway.</p>

<p>NSA guy:  Sure I can.  But then I&rsquo;ll have to kill you.</p>

<p align=right>&#151;
Roger Hui
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Maple"></a>
Later, Ken visited the Maple booth.  He asked 
the young people staffing the booth, &ldquo;How do you
find the number of elements of a vector that are greater than 
a hundred?&rdquo;  (That is,<tt> +/x&gt;100 </tt>in J or APL.)
He left them a few minutes later, still scratching their heads.</p>

<p align=right>&#151;
Roger Hui
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="argue"></a>
Ken interviewed a job applicant once and reported back, 
&ldquo;I don&rsquo;t think we want him.  I told him what we
were doing and he didn&rsquo;t argue.  He just listened.&rdquo;</p>

<p align=right>&#151;
Larry Breed, 
<a href="http://www.computerhistory.org/events/index.php?id=1099685637">
<i>A Celebration of Kenneth Iverson</i></a>, 2004-11-30
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="listen"></a>
One time I was complaining about an impertinent customer who was
making suggestions, and Ken said, 
&ldquo;You know, Arthur, when I was working at IBM, I learnt that
it&rsquo;s very important, very important to listen to your
customers.  It&rsquo;s even more important to disregard what
they say and do the right thing.&rdquo;</p>

<p align=right>&#151;
Arthur Whitney, 
<a href="http://www.computerhistory.org/events/index.php?id=1099685637">
<i>A Celebration of Kenneth Iverson</i></a>, 2004-11-30
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Knuth"></a>
In a social conversation with Ken, I said, 
&ldquo;You know, Ken, you are my favorite language designer
and Don Knuth is my favorite programmer.&rdquo;  And Ken said
immediately, &ldquo;What&rsquo;s wrong with my programming?&rdquo;</p>

<p align=right>&#151;
Joey Tuttle, 
<a href="http://www.computerhistory.org/events/index.php?id=1099685637">
<i>A Celebration of Kenneth Iverson</i></a>, 2004-11-30
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="ICFP"></a>
The Judge&rsquo;s Prize was awarded to the isi entry, submitted by a team of 
five from Iverson Software:<br>
<tt>&nbsp; &nbsp; </tt>Chris Burke<br>
<tt>&nbsp; &nbsp; </tt>Roger Hui<br>
<tt>&nbsp; &nbsp; </tt>Eric Iverson<br>
<tt>&nbsp; &nbsp; </tt>Ken Iverson<br>
<tt>&nbsp; &nbsp; </tt>Kirk Iverson<br>
The isi entry was written in a language called J, Ken Iverson&rsquo;s successor to APL. ...</p>

<p>Congratulations to the isi team! 
Without a doubt, &ldquo;a bunch of extremely cool hackers&rdquo; &mdash; 
and an extremely cool programming language.</p>

<p align=right>&#151;
The Judges, 
<a href="http://www.jsoftware.com/papers/pousse.htm"><i>ICFP Functional Programming Contest</i></a>, 
1998
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Burke"></a>
In developing J, Ken accepted that APL had 
shortcomings and it was time to move on. 
New features in J had to be supported on their own merits. 
&ldquo;Because it is in APL&rdquo; was not a good argument. 
This led to a rift between the J group and the traditional APL 
community, that Ken simply ignored.</p>

<p>His careful writing meant that, in turn, he was a good editor. Papers or 
labs submitted to Ken for review provoked immediate, thorough, 
and careful responses.</p>

<p>He was willing to discuss APL and J with anyone, treating them as an equal &mdash; 
and often mistakenly assuming that the person he was speaking to 
had thought about the matter as much as himself.</p>

<p>He could talk on almost any topic under the sun.</p>

<p align=right>&#151;
Chris Burke
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="style"></a>
When all the techniques of program management and programming practice
have been applied, there remain vast differences in quality of code
produced by different programmers.  These differences turn not so
much upon the use of specific tricks or techniques as upon a general
manner of expression, which, by analogy with natural language,
we will refer to as <b>style</b>. 
This paper addresses the question of developing good programming
style in APL.</p>

<p>Because it does not rest upon specific techniques, 
good style cannot be taught in a direct manner,
but it can be fostered by the acquisition of certain habits of thought.
The following sections should therefore be read more as examples
of general habits to be identified and fostered,
than as specific prescriptions of good technique.</p>

<p align=right>&#151;
<a href="http://www.jsoftware.com/jwiki/Doc/Programming_Style_in_APL"><i>Programming Style in APL</i></a>, 1978
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="brevity"></a>
Ken believed passionately that brevity is essential to clarity.
&ldquo;Be concise,&rdquo; he&rsquo;d say. 
For me, this made for endless tension in my role as popularizer
or explainer.  I never got over my belief that in English,
readability is mostly redundancy.  Ken would look at what I have
drafted and say, &ldquo;Long-winded.  You can cut out two-thirds.&rdquo;</p>

<p align=right>&#151;
Paul Berry</i>, 
<a href="http://www.computerhistory.org/events/index.php?id=1099685637">
<i>A Celebration of Kenneth Iverson</i></a>, 2004-11-30
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="writing"></a>
For me personally, the biggest contribution in my life was that Ken taught me
to write.  Ken wanted things very concise.  When in doubt, leave it out.
Do not put runways for your prose to take off or to land at the
end of a chapter; when you&rsquo;re finished, quit.</p>

<p>As a matter of fact, the first chapter of <i>Automatic Data Processing</i>
was far and away the very densest, because we edited it and we edited it and we
edited it.</p>

<p>Ken taught me some useful productions: If it&rsquo;s a clause, turn it into
a phrase.  If it&rsquo;s a phrase, turn it into an adjective or an adverb.
If it&rsquo;s an adjective or an adverb, omit it.
And you apply these recursively.</p>

<p align=right>&#151;
Fred Brooks</i>, 
<a href="http://www.computerhistory.org/events/index.php?id=1099685637">
<i>A Celebration of Kenneth Iverson</i></a>, 2004-11-30
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="500_papers"></a>
The secret to writing well?  
&ldquo;First, write 500 papers.&rdquo;</p>

<p align=right>&#151;
Roger Hui,
<a href="http://keiapl.org/rhui/remember.htm#500"><i>Remembering Ken Iverson</i></a>, 2004
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="spelling"></a>
I learned about Ken Iverson&rsquo;s penchant for looking for spelling 
errors when he travelled to Boston to make a presentation with me at 
our US office.</p>

<p>The evening before, I took him to dinner at a fancy restaurant where 
the menu was more than 20 pages and I was becoming concerned when he 
kept paging through it without deciding what to order.  
When I asked if he could find nothing he liked he laughed 
and explained that he was counting the spelling errors which was one of his hobbies.  
I was appalled because I am dyslexic and my 12-year-old daughter 
had already pointed out that there were myriad 
spelling errors in the overhead transparencies.  
After that presentation and learning about my difficulty, 
he offered to help me prepare the next presentation in Toronto.</p>

<p>I found it interesting that Ken was ambidextrous, 
switching from writing left to right with his right hand to right to left with his 
left hand as he put APL examples on the white board.  
I have right/left ambivalence but not so much dexterity.</p>

<p align=right>&#151;
Donna Ydreos
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="ambidextrous"></a>
On the first night of the course that Ken Iverson was giving in his notation 
at the IBM Watson Research Center, in 1962, I saw him writing on the 
chalkboard, first with one hand, later with the other, 
and thus back and forth throughout the evening.</p>

<p>Many years later Ken told me the tale of his ambidexterity. 
He was naturally left-handed, but when he went to the grade school in 
the small town of Camrose, in Alberta, his teacher made him learn to write right-handed, 
and, if I remember correctly, by tying his left arm behind him. 
He did this, and for many years wrote with nothing but his right hand. </p>

<p>While on the Harvard faculty, he saw that when a fellow teacher 
injured his writing arm, he was unable to teach until it healed. 
Ken thought about this, and, for insurance, recalling his natural left-handedness, 
set about developing writing skills with the left hand. 
Thereafter, he wrote with either hand, as he felt inclined, one way or the other. 
I don&rsquo;t recall which hand he favored, but it was probably his right.</p>

<p align=right>&#151;
Eugene McDonnell
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="poetry"></a>
I remember being surprised at finding the line &ldquo;I sing of Olaf glad  
and big&rdquo; in some examples that Ken wrote in Phrases1.A (1996-8) (and  
J Version 7 <i>Introduction &amp; Dictionary</i>, (1993), p. 32). 
I knew his source, since I was interested in its poet &mdash; 
e.e.&nbsp;cummings &mdash; 
and my surprise was how Ken had ever run across it. The poem tells of  
Olaf, a conscientious objector &mdash; presumably in WWI &mdash; 
and the foul way he is tortured by the military.</p>

<p>In <i>Programming in J</i> (1991) page 33 is: 
&ldquo;Do you love me/ or do  
you not/ you told me once/ but I forgot&rdquo; 
is anonymous &mdash; maybe by a  
greeting card poet.  Also on page 40 is &ldquo;With blackest moss&rdquo;, 
&ldquo;Mariana&rdquo;, Tennyson.</p>

<p>In <i>An Introduction to J</i> (1992), 17, &ldquo;Nobly, nobly, Cape St.  
Vincent&rdquo; is from Robert Browning&rsquo;s 
&ldquo;Home Thoughts from the Sea&rdquo;. 
This is also on p. 17 of <i>J Introduction &amp; Dictionary</i> (1993)<p>

<p>Another poem Ken liked was Clarence Day&rsquo;s: 
&rdquo;When eras die, their legacies / Are left to strange police. / 
Professors in New England guard / The glory that was Greece.&rdquo;
This is on the<tt> ;: </tt>page of the J dictionary.</p>

<p>He greatly admired Robert W. Service, the Canadian poet, who wrote 
&ldquo;A bunch of the boys were whooping it up in the Malemute saloon&rdquo; and  
many other Yukon poems.</p>
<p align=right>&#151;
Eugene McDonnell
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Adam"></a>
Ken loved poetry and had a really good memory for it.  
A poem that he recited from time to time,
with laughter in his voice, 
was <i>When Adam Day by Day</i> by A.E. Housman.</p>

<table><tr><td><tt>&nbsp; &nbsp;</tt></td><td>
When Adam day by day<br>
Woke up in paradise,<br>
He always used to say<br>
&ldquo;Oh, this is very nice.&rdquo;<br><br>

But Eve from scenes of bliss<br>
Transported him for life.<br>
The more I think of this<br>
The more I beat my wife.
</td></tr></table>

<p align=right>&#151;
Roger Hui
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="cow"></a>
I don&rsquo;t think of Ken as a person who told a lot of jokes but when he did, 
there was usually something more than just a funny story — 
there was something to learn or something to make you think. 
One story he told stands out in my memory and I&rsquo;ve repeated it 
many times because in addition to being a good story, 
it also describes the central fallacy of communism. 
What&rsquo;s wrong with &ldquo;From everyone according to their ability and 
to everyone according to their need&rdquo;? 
And the answer is that you&rsquo;re dealing with people! 
Here&rsquo;s the story, a conversation between an interviewer and a farmer:</p>

<table width=400>
<tr><td valign=top>I:</td><td>&nbsp;</td><td>If you had two acres of 
land and a friend had none, would you give him an acre of land?</td></tr>
<tr><td valign=top>F:</td><td>&nbsp;</td><td>If I had two acres of land 
and a friend had none, then for the greater good of the state, 
I would give him an acre.</td></tr>

<tr><td valign=top>I:</td><td>&nbsp;</td><td> If you had two horses and 
your friend had none, would you give him one of your horses?</td></tr>
<tr><td valign=top>F:</td><td>&nbsp;</td><td>If I had two horses 
and a friend had none, 
then for the greater good of the state, I would give him a horse.</td></tr>

<tr><td valign=top>I:</td><td>&nbsp;</td><td>If you had two cows and your 
friend had none, would you give him one of your cows?</td></tr>
<tr><td valign=top>F:</td><td>&nbsp;</td><td>No!</td></tr>

<tr><td valign=top>I:</td><td>&nbsp;</td><td>I don&rsquo;t understand, 
you would give him an acre and a horse, why not a cow?</td></tr>
<tr><td valign=top>F:</td><td>&nbsp;</td><td>Well, I <i>have</i> two cows.</td></tr>
</table>

<p align=right>&#151;
Jim Brown,
<a href="http://www.vector.org.uk/?area=kei&page=brown"><i>Remembering Ken Iverson</i></a>,
Vector, 2004
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<table><tr><td valign=top>
<p><a name="Utopia"></a>
There is an 8-word Chinese phrase describing a well-ordered society, 
where the citizens are so good that they don&rsquo;t pick 
up items on roads that were dropped by accident, or need
to lock their doors at night.</p>
<p>I once described this phrase to Ken.  
He immediately responded that he probably wouldn&rsquo;t like the degree of 
control and coercion necessary for that kind of result.
Human nature being what it is, I think Ken was right.</p>

</td><td>&nbsp;</td><td valign=top><img src="https://www.jsoftware.com/papers/img/utopia.jpg">
</td></tr>
</table>

<p align=right>&#151;
Roger Hui
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="luggage"></a>
Ken illustrated the importance of
treating people with respect by telling the following story: 
At an airport counter an irate traveller was berating the service agent 
over something or other, which the agent took with stoic forbearance. 
After the traveller went on his way, the next person in line told the agent, 
&ldquo;I am amazed at how well you took that abuse.&rdquo; 
The agent smiled thinly and replied, 
&ldquo;Oh, the gentleman is flying to Chicago, 
but his luggage is going to Moscow.&rdquo;</p>

<p align=right>&#151;
Roger Hui,
<a href="http://keiapl.org/rhui/remember.htm"><i>Remembering Ken Iverson</i></a>, 2004
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="heart"></a>
Another one of my favorite Ken sayings that 
I still quote extensively, is that
&ldquo;Having your heart in the right place
is no excuse for having your head up your a??.&rdquo;</p>

<p align=right>&#151;
Dick Lathwell, 
<a href="http://www.youtube.com/watch?v=ODOpijGKuok"><i>Dad &amp; My Box</i></a>
(9:04), 2009-04
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="knock_twice"></a>
During an &ldquo;evening seminar&rdquo; at
a Minnowbrook conference, Ken said to Roy Sykes,
&ldquo;I bet you can&rsquo;t keep your ear on the bar while
I knock on it twice.&rdquo;  Roy, being a good sport,
put his ear on the bar.  Ken knocked on the bar
once, then turned to talk to someone else.</p>
<p align=right>&#151;
John Scholes
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Pascals_wager"></a>
<a href="http://plato.stanford.edu/entries/pascal-wager">Pascal&rsquo;s Wager</a>
is an argument that one should believe in God:
If there is a God, then you better believe in Him in order to go to heaven; 
if there is no God, then believing in Him does no harm.</p>

<p>Ken argued that there should be a special place in Hell
for people who believe for this reason.</p>

<p align=right>&#151;
Roger Hui
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="favorite_expression"></a>What was Ken Iverson&rsquo;s favorite APL expression?
I don&rsquo;t know that he had one and if he had I don&rsquo;t know what is was,
but if I had to guess &#133</p>

<p>The expression<tt> (0,x)+(x,0) </tt>or its commute,
which generates the next set of binomial coefficients, is present 
in the document that introduced <i>APL</i>\360 in 1967
<acronym title="Falkoff, A.D., and K.E. Iverson, The APL\360 Terminal System, Research Report RC-1922, IBM, 1967-10-16.">[20,&nbsp;Fig.1]</acronym>
and the one that introduced J in 1990 
<acronym title="Hui, R.K.W., K.E. Iverson, E.E. McDonnell, and A.T. Whitney, APL\?, APL90, APL Quote Quad, Volume 20, Number 4, 1990-07.">[21,&nbsp;Gc&amp;Gd]</acronym>;
in <i>Elementary Functions: An Algorithmic Treatment</i> in 1966
<acronym title="Iverson, K.E., Elementary Functions: An Algorithmic Treatment, Science Research Associates, Inc., 1966.">[22,&nbsp;p.69]</acronym>,
in <i>APL\360 User&rsquo;s Manual</i> in 1968
<acronym title="Falkoff, A.D. and K.E. Iverson, APL\360 User’s Manual, IBM Corporation, 1968-08.">[23,&nbsp;A.5]</acronym>,
in <i>Algebra: An Algorithmic Treatment</i> in 1972
<acronym title="Iverson, K.E., Algebra: An Algorithmic Treatment, Addison-Wesley, 1972.">[24,&nbsp;p.141]</acronym>,
in <i>Introducing APL to Teachers</i> in 1972
<acronym title="Iverson, K.E., Introducing APL to Teachers, IBM Corporation, 1972-07.">[25,&nbsp;p.22]</acronym>,
in <i>An Introduction to APL for Scientists and Engineers</i> in 1973
<acronym title="Iverson, K.E., An Introduction to APL for Scientists and Engineers, IBM Corporation, 1973-03.">[26,&nbsp;p.19]</acronym>,
in <i>Elementary Analysis</i> in 1976
<acronym title="Iverson, K.E., Elementary Analysis, APL Press, 1976.">[27,&nbsp;ex.1.68]</acronym>,
in <i>Programming Style in APL</i> in 1978
<acronym title="Iverson, K.E., Programming Style in APL, 1978 APL Users Meeting Proceedings, 1978-09-18.">[28,&nbsp;&sect;6]</acronym>,
in <i>Notation as a Tool of Thought</i> in 1980
<acronym title="Iverson, K.E., Notation as a Tool of Thought, Communications of the ACM, Volume 23, Number 8, 1980-08.">[29,&nbsp;A.3]</acronym>, 
in <i>A Dictionary of APL</i> in 1987
<acronym title="Iverson, K.E., A Dictionary of APL, APL Quote Quad, Volume 18, Number 1, 1987-09.">[30,<tt>&nbsp;m∇n</tt>]</acronym>, 
and probably others.</p>

<p align=right>&#151;
Roger Hui,
<a href="http://www.jsoftware.com/papers/amuse-bouches.htm#8"><i>Sixteen APL Amuse-Bouches</i></a>, 2014-11-02
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="aphorisms"></a>
Ken aphorisms:</p>
<ul>
<li>[Beware of anyone who says,] let&rsquo;s you and him fight.</li>
<li>Good fences make good neighbors.</li>
<li>Who gets upset depends on whose ox is being gored.</li>
<li>Ask the question:  Who benefits?</li>
<li>Trying to ease the pain by carrying out an unpleasant
procedure a bit at a time, is like cutting off
a dog&rsquo;s tail an inch at a time.</li>
<li>You&rsquo;ll remember the quality long after you&rsquo;ve forgotten the price.</li>
<li>Never give more than one
reason for anything&mdash;the last one is always the real one.
(Recalled by Roland Pesch.)</li>
</ul>

<p align=right>&#151;
Roger Hui
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="counting"></a>
Ken used to count the cash dispensed by a banking machine.
One day, he realized that it was much more 
likely for him to make a mistake in his counting
than for the machine to make a mistake in its dispensing.
Then he stopped counting and didn&rsquo;t worry about it anymore.
</p>

<p align=right>&#151;
Roger Hui
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="money"></a>
I took Ken to Edinburgh airport, let him off, 
and parked the car, 
but when I rejoined him Ken broke the news 
that he had misread the ticket &mdash; 
the flight had left the previous day! 
We rushed to Glasgow airport for an alternative flight.  
Ken&rsquo;s credit card failed to register &mdash; 
fortunately mine worked. 
Although I was very distressed, 
Ken&rsquo;s philosophic response was characteristic: 
&ldquo;It&rsquo;s only money&rdquo; he remarked &mdash; 
a balanced attitude that more of us should espouse!</p>

<p align=right>&#151;
Donald McIntyre, <a href="http://www.vector.org.uk/archive/v223/don222.htm">
<i>A Tribute to Ken Iverson</i></a>, 2006
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="loose_change"></a>
Ken once forgot to close the windows of his car 
while parked in the garage of his condo.  
He lost the loose change in the car that night.  
In this case, he was glad that the windows were left open 
because the other cars in the garage had their windows smashed 
<i>and</i> the car contents stolen.</p>

<p align=right>&#151;
Roger Hui
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="taxi"></a>
One time I was with Ken in Manhattan and we needed
to get some place. Ken said, &ldquo;Shall we walk, 
or do we have time for a taxi?&rdquo;</p>

<p align=right>&#151;
Bob Bernecky
<br>&nbsp;</p></td></tr>


<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Erdos_number"></a>
Ken&rsquo;s 
<a href="http://www.oakland.edu/enp">Erd&#337;s number</a> is at most 3, 
achieved in at least two different ways:</p>

<ul>
<li>Paul Erd&#337;s and Jeffrey Shallit, 
<i>New bounds on the length of finite Pierce and Engel series</i>, 
S&eacute;minaire de Th&eacute;orie des Nombres de Bordeaux 3, 1991, 
pp. 43-53.</li>
<li>Eugene McDonnell and Jeffrey Shallit, 
<a href="http://www.jsoftware.com/papers/eem/infinity.htm"><i>Extending 
APL to Infinity</i></a>, 
Proc. APL 80 International Conf., North-Holland, 1980, pp. 123-132.</li>
<li>Kenneth E. Iverson and Eugene McDonnell, 
<a href="http://www.jsoftware.com/papers/fork.htm"><i>Phrasal Forms</i></a>,
APL89, 1989, pp. 197-199.</li>
</ul>

<ul>
<li>Paul Erd&#337;s, Nathan Linial, and Shlomo Moran, 
<i>Extremal Problems on Permutations under Cyclic Equivalence</i>, 
Discrete Mathematics 64, 1987, pp. 1-11.</li>
<li>Oscar Ibarra, Shlomo Moran, and Roger Hui, 
<i>A Generalization of the Fast LUP Matrix Decomposition Algorithm 
and Applications</i>, Journal of Algorithms 3, 1982, pp. 45-56.</li>
<li>Roger Hui, Kenneth E. Iverson, Eugene McDonnell, and Arthur Whitney,
<a href="http://www.jsoftware.com/papers/J1990.htm"><i>APL\?</i></a>, 
APL90, 1990, pp. 192-200.</li>
</ul>

<p align=right>&#151;
Roger Hui
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Clinton"></a>
The founder, Ken Iverson, inspired great loyalty the old-fashioned
way: he earned it.</p>

<p align=right>&#151;
Bill Clinton, <i>My Life</i>, 2004, p. 321
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="where"></a>
I remember fondly of the times when Ken would phone me up to ask where on his shelves a book was.
(In the condo at the Manulife Center?  At the Kiln Farm?  Which shelf?)</p>

<p align=right>&#151;
Roger Hui
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="rice"></a>
I was having dinner with Ken and Jean at their house, and
the story of grains of rice on a chessboard came up in the 
conversation.  As a reward for some outstanding
service to the Emperor, a magician was granted any wish.
He asked the Emperor
for one grain of rice on the first square of an 8 by 8 chessboard,
two grains on the next square, four grains on the next, and so on,
doubling on each square.
The Emperor, once he realized how much rice was involved,
got so upset that he chopped off the magician&rsquo;s head.

<p>The total was of 
course<tt> <a href="http://www.jsoftware.com/jwiki/Essays/2^64">(2^64)-1</a> </tt>
grains of rice.  
So how much rice was that?  I guess Ken didn&rsquo;t want
to think about it during dinner, because he quickly said that 
it would cover the earth to
a significant distance to the sun.</p>

<p>I estimated that a grain of rice was roughly one-eighth of an inch
on each side, remembered from grade school that the radius of
the earth was about 4000 miles, and so on, and while continuing
to eat dinner, did some mental calculations.  After a while
I was able to tell Ken and Jean, 
&ldquo;There are a lot of cubic inches
in a cubic mile; that amount of rice wouldn&rsquo;t even
cover the earth.&rdquo;
</p>

<p align=right>&#151;
Roger Hui
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="dinner"></a>
In January 1999, Ken and Jean Iverson visited
Eugene McDonnell in Palo Alto.  
Eugene held a dinner party in their honor on the thirteenth.
In attendance were Eugene and Jeanne McDonnell,
Ken and Jean Iverson, Arthur Whitney and Janet Lustgarten, 
Jim and Karen Brown, Paul and Sachiko Berry, 
Charles Brenner and Sarita Berry,
Larry and Beverly Breed, Harry Saal, 
Ken&rsquo;s nephew Derrick Iverson
and his wife and new baby, 
David Steinbrook, Joel Kaplan, Dick Dunbar, 
Joey Tuttle (who flew in from Boston), and one more.</p>

<p>One of the events of the party was to have
been a telephone call from Kyosuke Saigusa in Japan.
During the party, Eugene went to make the
phone call to Japan as prearranged.  He came back
a few minutes later, perplexed, saying that
he only managed to reach Mrs. Saigusa, who said that
Mr. Saigusa was not available.</p>

<p>At that point Saigusa-san walked in through the front door,
explaining that he was not available by phone from Japan
because he was there in Palo Alto!</p>

<p align=right>&#151;
Joey Tuttle
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="church"></a>
Ken went with me to my church one Sunday in the late 1990&rsquo;s.  
After the service I introduced him
as &ldquo;my friend Ken&rdquo; to a few members of the congregation.
On discovering that RS was a recent graduate of
the University of New Brunswick, Ken asked whether they
still taught APL there.  &ldquo;They did,&rdquo; she replied,
adding that she learned APL in a course.  
&ldquo;What did you think of APL?&rdquo; Ken asked.</p>

<p>RS then spent a couple of minutes telling us 
what she thought of APL.
When there was a gap in the conversation, I said quietly,
&ldquo;Ken is the inventor of APL.&rdquo;</p>

<p>The next Sunday, RS came over and admonished, 
&ldquo;Don&rsquo;t ever do that to me again!&rdquo;</p>

<p align=right>&#151;
Roger Hui
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="TM"></a>
Ken was in London soon after he had joined IPSA. 
He came along to a UK APL user group meeting, 
and chatted to some of us afterwards in the pub. 
I was running an APL software house and 
Ken asked how things were going at
Cocking and Drury.</p>

<p>I mentioned that Dave Saunders 
(another IPSAer, known for his evangelism of Transcendental Mediation) 
had taught several of us to meditate.</p>

<p>Ken commented:</p>

<p>
- We used to do that down on the farm.<br>
- Really?<br>
- We called it &ldquo;daydreaming&rdquo;.</p>

<p align=right>&#151;
Romilly Cocking
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Kenecdote"></a>
A &ldquo;Kenecdote&rdquo; is an item in this collection.</p>
<p align=right>&#151;
Eugene McDonnell
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="Genecdote"></a>
Therefore, an item in
<a href="http://www.jsoftware.com/papers/eem/anecdotes.htm"><i>Eugene McDonnell
Quotations and Anecdotes</i></a> is a &ldquo;Genecdote&rdquo;.</p>
<p align=right>&#151;
Roger Hui
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="good_and_bad_results"></a>
Physics labs required a lot of time, and taught me two things.
The first was that they were designed only to confirm things
we &ldquo;already knew&rdquo; from theory, and were not
&ldquo;experiments&rdquo; in the sense of discovering anything.
This was a lesson I made use of in later work (at IBM) in
designing &ldquo;computer experiments&rdquo;.
The second was the importance of recording results in pencil,
so that they could be fudged to show reasonable results
in the required lab reports.
A close friend among the younger students learned this the hard way
(in a lab designed to measure the difference in the heat capacity
of air at constant volume and at constant pressure).
Because of &ldquo;bad&rdquo; results he had to repeat the experiment.
His new bad results infuriated the professor in charge, 
who came in on a Saturday to watch the whole process.
The upshot was that he re-analyzed the experiment,
concluding that secondary effects (such as drafts from an open window)
would mask the intended effect &mdash; in spite of which,
students had been reporting &ldquo;good&rdquo; results for a full five years.</p>

<p align=right>&#151;
<a href="http://keiapl.org/rhui/autobio.htm#good_and_bad_results">
<i>Kenneth E. Iverson</i></a>, 2008
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="fuzz"></a>
In an early talk  Ken was explaining the advantages of tolerant comparison.  
A member of the audience asked incredulously, 
&ldquo;Surely you don&rsquo;t mean that 
when<tt> A=B </tt>and<tt> B=C</tt>,<tt> A </tt>may <i>not</i> equal<tt> C</tt>?&rdquo;
Without skipping a beat, Ken replied, &ldquo;Any carpenter knows that!&rdquo; 
and went on to the next question.</p>

<p align=right>&#151;
Paul Berry
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="fuzz1"></a>
The intransitivity of [tolerant] equality is well known 
in practical situations and can be easily
demonstrated by sawing several pieces of wood 
of equal length. 
In one case, use the
first piece to measure subsequent lengths; 
in the second case, use the last piece cut to
measure the next. 
Compare the lengths of the two final pieces.</p>

<p align=right>&#151;
Richard Lathwell, 
<a href="http://www.jsoftware.com/papers/satn23.htm"><i>APL Comparison Tolerance</i></a>, 
APL76, 1976
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="operators"></a>
If functions modify their data and operators modify their functions, 
then what modifies operators?  Answer: Ken Iverson.</p>

<p align=right>&#151;
Chirag Pathak
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="sort"></a>
One of Ken&rsquo;s masterstrokes in J 
was to redefine the dyad grade
so that<tt> x/:y </tt>is<tt> x </tt>
indexed by the grade of<tt> y</tt>&nbsp;,<tt> </tt>
which means that to sort<tt> y </tt>
you can say<tt> y/:y</tt>&nbsp;.<tt> </tt>
Sometime later in a presentation Chris Burke showed a list
of uses of the adverb<tt> ~ </tt>(reflexive/passive).  
Now the monad<tt> f~&nbsp;y </tt>
is defined to be<tt> y&nbsp;f&nbsp;y</tt>&nbsp;,<tt> </tt>
and in Chris&rsquo; list he had<tt> /:~y </tt>
to sort<tt> y</tt>&nbsp;.<tt> </tt>
Ken was startled when he saw this.</p>

<p>(He didn&rsquo;t know?!  
I would give Ken the benefit of every doubt
and assume that he probably did know.  
But suppose he really didn&rsquo;t know.
That would make the design of<tt> x/:y </tt>even more incredible.)</p>

<p>A subsequent extension imposed a 
<a href="http://www.jsoftware.com/jwiki/Essays/The_TAO_of_J">
total array ordering</a> in J, which means that the monadic
and right domain of<tt> /: </tt>are all the arrays,
whence<tt> /:~ </tt>sorts all arrays &mdash;
any rank, any type.</p>

<p align=right>&#151;
Roger Hui
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="under0"></a>
The conjunction <i>under</i><tt> f&amp;.g </tt>in J<tt> </tt>(<tt>f&uml;g </tt>in SHARP APL)
is defined as

<table>
<tr><td><tt>&nbsp; &nbsp;</tt></td><td><tt>f&amp;.g y&nbsp;</tt></td>
 <td><font size=+1>&harr;</font></td><td><tt>&nbsp;gi f g y</tt></td></tr>
<tr><td>&nbsp;</td><td><tt>x f&amp;.g y&nbsp;</tt></td> 
 <td><font size=+1>&harr;</font></td><td><tt>&nbsp;gi (g x) f (g y)</tt></td></tr>
</table>

where<tt> gi </tt>is the inverse of<tt> g</tt> . &ldquo;Under&rdquo; elucidates the
important but often mysterious concept of duality in mathematics.</p>

<p>Ken liked to use the &ldquo;under anasthetics&rdquo; example to introduce the idea.  
Several steps were composed:<br>
<tt>&nbsp; &nbsp; </tt>apply anasthetics<br>
<tt>&nbsp; &nbsp; &nbsp; &nbsp; </tt>cut open<br>
<tt>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </tt>do procedure<br>
<tt>&nbsp; &nbsp; &nbsp; &nbsp; </tt>sew up<br>
<tt>&nbsp; &nbsp; </tt>wake up from anasthetics<br>
The audience never failed to see that the inverse steps were pretty important!
Ken also used the &ldquo;pipe laying&rdquo; example:  
dig a trench, lay the pipe, cover the trench.</p>
<p align=right>&#151;
Roger Hui
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="under1"></a>
I recall in the late 1980&rsquo;s a discussion with Ken, Arthur, and me around
Ken&rsquo;s kitchen table, querying new aspects of the composition operator in
Sharp APL and new variations we were contemplating in Sharp APL/HP (the
composition operator is analogous to<tt> &. </tt>in J).</p>

<p>Ken resisted agreeing to new variations of composition, wanting to 
&ldquo;keep it simple&rdquo;.  As part of his explanation he asked me where 
I have used a function and its inverse in real life ... I hesitated, pausing ...</p>

<p>He enlightened me:</p>

<ul>
<li>Washing the dishes: Fill the sink / wash the dishes / empty the sink</li>
<li>Food from the fridge: Open the door / get the food / close the door</li>
<li>Have dinner: Set the table / eat dinner / clean up the table</li>
<li>Go to work: Drive to work / work in the office / drive home</li>
<li>Rubbish bins: Put out bins / council collects rubbish / bring in bins</li>
<li>Filing: Find appropriate file / update contents / restore file in order</li>
</ul>

<p>The aspects were endless, but underlined Ken&rsquo;s desire to keep the
mathematical implementations as simple as possible, pointing out that we
need to picture these in terms of our own real life experiences to better
understand them.</p>

<p>It was an interesting discussion and gave me some guidelines of where Ken
was coming from in so much of his language design.</p>
<p align=right>&#151;
Rob Hodgkinson
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="fork"></a>
Ken and I had in mind to implement 
<a href="http://www.jsoftware.com/papers/APLDictionary.htm"><i>A Dictionary of APL</i></a>
together with hooks and forks (phrasal forms).
For years, Ken had struggled to find a way
to write<tt> f+g </tt>as in calculus, 
from the &ldquo;scalar operators&rdquo; 
in <a href="http://www.jsoftware.com/papers/opfns.htm#4"><i>Operators and Functions</i></a>, 
through the &ldquo;til&rdquo; operator in 
<i>Practical Uses of a Model of APL</i> and
<a href="http://www.jsoftware.com/papers/ratapl.htm#k1"><i>Rationalized APL</i></a>, 
and finally forks.
Forks are defined as follows:
<table>
<tr><td>&nbsp;</td><td><tt>&nbsp; (f g h) y&nbsp;</tt></td> <td><font size=+1>&harr;</font></td><td><tt>&nbsp;(f y) g (h y)</tt></td></tr>
<tr><td>&nbsp;</td><td><tt>x (f g h) y</tt></td>            <td><font size=+1>&harr;</font></td><td><tt>&nbsp;(x f y) g (x h y)</tt></td></tr>
</table>
Moreover,<tt> (f g p q r) </tt><font size=+1>&harr;</font><tt> (f g (p q r))</tt> .<tt> </tt>
Thus to write<tt> f+g </tt>as in calculus, one writes<tt> f+g </tt>in J.
Ken and Eugene McDonnell worked out the details 
on the long plane ride back from APL88 in Sydney, Australia,
with Ken coming up with the initial idea on waking up from a nap.</p>
<p align=right>&#151;
Roger Hui,
<a href="http://keiapl.org/rhui/remember.htm"><i>Remembering Ken Iverson</i></a>, 2004
<br>&nbsp;</p></td></tr>


<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="nvv"></a>
In March 2005, I thought of an extension to fork
where the isolated sequence<tt> m g h </tt>with<tt> m </tt>
being a noun, previously an error, is defined to 
mean<tt> m"_ g h</tt> .<tt> </tt>
(<tt>m"_ </tt>is a constant verb producing<tt> m </tt> as its result.)  
Many verbs in J (and APL) were designed so that fixing 
the left argument of the dyad made a sensible monad,
and there is a <i>commute</i> adverb<tt> ~ </tt>
where<tt> x f~ y </tt><font size=+1>&harr;</font><tt> y f x </tt>.<tt> </tt>
Therefore, the new fork is very useful.  Two examples:</p>

<p>0. Lower case from upper case.</p>
<pre>
   U  =: a. {~ (i.26)+a.i.'A'
   L  =: a. {~ (i.26)+a.i.'a'
   lfu=: (L,a.) {~ (U,a.) i. ]

   lfu 'PROTASIS apodosis'
protasis apodosis
</pre>

<p>1. An identity from mathematics.</p>
<pre>
   sin=: 1 o. ]
   cos=: 2 o. ]
   (^@j. = cos + 0j1 * sin) 1 2 3 0.1j_0.2
1 1 1 1
</pre>

<p>The extension is &ldquo;obvious&rdquo;.
Ken or I (or anyone else) could have thought of it
any time between 1989 and 2004, but we didn&rsquo;t.
Of all the new work in J since his passing, 
I wish I could tell Ken about this one.  
I think it would have made his day.</p>

<p align=right>&#151;
Roger Hui
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="ack"></a>
Roger&rsquo;s acknowledgment in  
[<i>An Implementation of J</i>]
was the most extravagant I have ever received: 
<a href="http://www.jsoftware.com/papers/brachistochrone.htm"><i>Ex ungue leonem</i></a>.</p>

<p align=right>&#151;
<a href="http://keiapl.org/rhui/autobio.htm">
<i>Kenneth E. Iverson</i></a>, 2008
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="approve"></a>
My copy of I.B. Cohen&rsquo;s
<i>Howard Aiken: Portrait of a Computer Pioneer</i></a>
was a gift and has inscribed on the flyleaf:</p>

<table>
<tr><td>&nbsp; &nbsp;</td><td colspan=2>To Roger</td><tr>
<tr><td></td><td>&nbsp; &nbsp;</td><td>of whom the Commander</td></tr>
<tr><td></td><td></td><td>would have approved</td></tr>
<tr><td></td></tr>
<tr><td></td><td colspan=2>From Ken Iverson</td></tr>
</table>

<p align=right>&#151;
Roger Hui
<br>&nbsp;</p></td></tr>


<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="woodyallen"></a>
Woody Allen said, I don&rsquo;t want to achieve immortality through my work,
I want to achieve immortality through not dying.
Even Ken couldn&rsquo;t do it that way,
but he did achieve immortality through his work.</p>

<p align=right>&#151;
Jeff Shallit, <a href="http://vids.myspace.com/index.cfm?fuseaction=vids.individual&videoid=49489049">
<i>Kenneth E. Iverson Memorial</i></a>, Toronto, 2004-11-18
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="ram"></a>
... one of [Howard Aiken&rsquo;s] graduate students was becoming
a little paranoid that somebody might steal one of the fantastic
ideas from his thesis, and so he was stamping every copy
&ldquo;Confidential&rdquo;.  Aiken just shook his head and said,
&ldquo;Don&rsquo;t worry about people stealing your ideas.
If they&rsquo;re any good, 
you&rsquo;ll have to ram them down their throats!&rdquo;</p>

<p align=right>&#151;
presentation of <a href="http://www.jsoftware.com/papers/APLEvol.htm"><i>The Evolution of APL</i></a>, HOPL Conference, 1978
<br>&nbsp;</p></td></tr>



<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
<p><a name="short_memory"></a>
Once launched on a topic it&rsquo;s very easy to forget to mention the
contributions of others, and although I have a very good memory, it is,
in the words of one of my colleagues, very short, so I feel 
I must begin with acknowledgments, &#133;</p>

<p align=right>&#151;
presentation of <a href="http://www.jsoftware.com/papers/APLEvol.htm"><i>The Evolution of APL</i></a>, HOPL Conference, 1978
<br>&nbsp;</p></td></tr>



<tr><td colspan=3>
<br><hr>
</td></tr>



</table>


<a name="personae"></a>
<p align=center><b>Dramatis Personæ</b></p>

<table align=center><tr><td valign=top>
Phil Abrams<br>
Adam<br>
Howard Aiken<br>
Woody Allen<br>
J.G. Arnold<br>
Robert Ashenhurst<br>
Charles Babbage<br>
Fritz Bauer<br>
George Berkeley<br>
Bob Bernecky<br>
Paul Berry<br>
Sachiko Berry<br>
Sarita Berry<br>
Gerrit Blaauw<br>
George Boole<br>
Beverly Breed<br>
Larry Breed<br>
Charles Brenner<br>
Fred Brooks<br>
Jim Brown<br>
Karen Brown<br>
Robert Browning<br>
Chris Burke<br>
William Burroughs<br>
Florian Cajori<br>
Peter Calingaert<br>
Gitte Christensen<br>
Bill Clinton<br>
Romilly Cocking<br>
I. Bernard Cohen<br>
Stephen Cook<br>
Charles Coolidge Jr. &nbsp;<br>
Ezra Cornell<br>
e e cummings<br>
George Dantzig<br>

</td><td valign=top>
Clarence Day<br>
Lee Dickey<br>
Edsger Dijkstra<br>
Charles Draper<br>
Harold Driscoll<br>
Brian Drury<br>
Dick Dunbar<br>
Friedrich Engel<br>
Erdős Pál<br>
Herman Esser<br>
Eve<br>
Adin Falkoff<br>
Dan Fisher<br>
Henry Ford<br>
Saint Francis<br>
Lib Gibson<br>
Valerie Gilbert<br>
God<br>
James Gosling<br>
Roderick Gould<br>
John Harvard<br>
Miles Hayes<br>
Herb Hellerman<br>
Rob Hodgkinson<br>
Albert Hopkins Jr.<br>
A.E. Housman<br>
Roger Hui<br>
Oscar Ibarra<br>
Derrick Iverson<br>
Eric Iverson<br>
Jean Iverson<br>
F. Kenneth Iverson &nbsp;<br>
Ken Iverson<br>
Kirk Iverson<br>
James VI and I<br>
Joel Kaplan<br>

</td><td valign=top>
Tom Keenan<br>
Garrison Keillor<br>
John F. Kennedy<br>
William Keuffel<br>
Donald Knuth<br>
Morten Kromberg<br>
Scott Krueger<br>
Dick Lathwell<br>
Antoine Lavoisier<br>
John Lawrence<br>
Wassily Leontief<br>
Nathan Linial<br>
Carl Linnaeus<br>
Janet Lustgarten<br>
Eugene McDonnell<br>
Jeanne McDonnell<br>
Donald McIntyre<br>
James McKinsey<br>
LeRoy Martin Jr.<br>
William Matson<br>
Robert Minnick<br>
Herbert Mitchell Jr.<br>
Michael Montalbano</a> &nbsp;<br>
Roger Moore<br>
Shlomo Moran<br>
Samuel Morse<br>
Bob Oakford<br>
Anthony Oettinger<br>
Blaise Pascal<br>
Chirag Pathak<br>
T.A. Pierce<br>
Alan Perlis<br>
Roland Pesch<br>
Cliff Reiter<br>
Paul Reuter<br>

</td><td valign=top>
William Rice<br>
Al Rose<br>
Paul Roth<br>
Harry Saal<br>
Kyosuke Saigusa<br>
Miyoko Saigusa<br>
Gerard Salton<br>
Dave Saunders<br>
John Scholes<br>
G.K. Sedlmayer<br>
Warren Semon<br>
Robert Service<br>
Jeffrey Shallit<br>
Ian Sharp<br>
Barry Silverman<br>
Brian Silverman<br>
Theodore Singer<br>
Bob Smith<br>
Leland Stanford Jr.<br>
David Steinbrook<br>
Ted Strong<br>
Roy Sykes Jr.<br>
Alfred Tennyson<br>
Alan Turing<br>
Joey Tuttle<br>
Thomas J. Watson Jr.<br>
Thomas J. Watson Sr.<br>
Gregory Welch<br>
Alfred Whitehead<br>
Arthur Whitney<br>
John Wiley<br>
William of Occam<br>
Woodrow Wilson<br>
Stephen Wolfram<br>
Luther Woodrum<br>
Donna Ydreos<br>

</td></tr></table>
<br><br><br><br><br><br><br><br><br><br><br><br>


</body>
</html>
