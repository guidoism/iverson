<html>
<head><meta http-equiv="content-type" content="text/html;charset=utf-8">
<title>Hashing for Tolerant Index-Of</title>
<link href="adoc.css" rel=stylesheet>
</head>

<body>

<br>

<table width=520 align=center><tr><td>

<p align=center><font size=+2>Hashing for Tolerant Index-Of</font><br><br>
<b>Roger Hui</b>
<br>&nbsp;</p>



<a name="abs"></a>
<p><b>Abstract</b></p>

<p>We consider the problem of<tt> x⍳y </tt>
where<tt> x </tt>and<tt> y </tt>are real  
or complex,
with tolerant comparison.
We show how to use hashing to solve the problem.</p>

<p>Hashing algorithms for real and complex arguments
have been implemented in Dyalog v13.0.  
APL models and test cases are provided.
Benchmarks demonstrate the improvement
over the previous implementation.</p>



<a name="ack"></a>
<p><b>Acknowledgment</b></p>

<p>I am grateful to Jay Foad for several 
comments on the paper, in particular the elucidation 
of the region of tolerant equality. </p>


<br><hr>



<a name="0"></a>
<p><b>0. Introduction</b></p>

<p><tt>⎕io←0 </tt>is used throughout this text.</p>

<p>Two numbers<tt> x </tt>and<tt> y </tt>are tolerantly equal
relative to<tt> ⎕ct &lt; 1 </tt>if<br>
<tt>&nbsp; &nbsp;(|x-y) ≤ ⎕ct×(|x)⌈(|y)<sup>&nbsp;</sup></tt><br>
(the<tt> ≤ </tt>in the definition is not tolerant)
<sup><acronym title="ISO/IEC, Programming Language Extended APL, 
ISO/IEC 13751:2001(E), 2001-02-01; 
Section 5.2.5, Tolerantly-Equal, page 19.">[0]</acronym></sup>.
The examples presented here are constructed 
with<tt> ⎕ct←1e¯14 </tt>unless specified otherwise.<tt> </tt>
</p>

<p><tt>x⍳y </tt>is the index-of function,
the smallest index in<tt> x </tt>of each element of<tt> y</tt>&nbsp;,<tt> </tt>
modelled as follows:</p>

<pre>
   iota←{(0⌷⍴⍺)-+/∨\⍵∘.=⍺}
   3 1 4 1 5 9 iota 2 3⍴⍳6
6 1 6
0 2 4
   3 1 4 1 5 9 iota 1+1e¯15 1e¯13
1 6
</pre>

<p><tt>x⍳y </tt>is tolerant 
because the comparison used (the<tt> = </tt>in<tt> iota</tt>)<tt> </tt>
is tolerant.</p>

<p><tt>x⍳y </tt>is commonly not implemented 
as in<tt> iota </tt>
because it runs in time of order<tt> (⍴x)×(⍴y)</tt>&nbsp;.<tt> </tt>
SHARP APL and Dyalog APL v12.1 use a method which sorts<tt> x</tt>&nbsp;,<tt> </tt>
then for each element of<tt> y </tt>do a binary search to find a tolerant match, 
followed by a linear search on all the tolerant matches
<sup><acronym title="Bernecky, Robert, e-mail, 2010-05-11 05:04">[1]</acronym></sup>
<sup><acronym title="Streeter, Geoff, e-mail, 2010-05-13 00:25">[2]</acronym></sup>.
This has time of order<tt> (⍟⍴x)×(⍴x)+(⍴y) </tt>
on the average but<tt> (⍴x)×(⍴y) </tt>in the worst case.</p>

<pre>
   3 rand 0.5
430.609375 ¯191.5625 ¯30.82421875
   x←8e4 rand 0.5
   5 timer 'x⍳x'  ⍝ timing in Dyalog v12.1
0.0908

   monster←{1+(0.0001×⎕ct)×?⍵⍴100000}
   x←monster 8e4
   5 timer 'x⍳x'  ⍝ timing in Dyalog v12.1
54.0406
</pre>

<table>
<tr><td align=center><tt>n</tt></td><td>&nbsp; &nbsp;</td>
 <td align=right>Typical</td><td>&nbsp; &nbsp;</td>
 <td align=right>Monster</td></tr>
<tr><td><tt>1e4</tt></td><td>&nbsp;</td><td>0.0186</td><td>&nbsp;</td><td align=right> 0.6718</td></tr>
<tr><td><tt>2e4</tt></td><td>&nbsp;</td><td>0.0250</td><td>&nbsp;</td><td align=right> 2.5282</td></tr>
<tr><td><tt>4e4</tt></td><td>&nbsp;</td><td>0.0406</td><td>&nbsp;</td><td align=right>10.6000</td></tr>
<tr><td><tt>8e4</tt></td><td>&nbsp;</td><td>0.0908</td><td>&nbsp;</td><td align=right>54.0406</td></tr>
</table>

<p>(<tt><a href="Hashing1.htm#rand">rand</a></tt>&nbsp;,<tt> <a href="Hashing1.htm#timer">timer</a></tt>&nbsp;,<tt> </tt>
and other functions used in the text
are defined in the <a href="Hashing1.htm#ax1">Appendix</a>.)</p>

<p>Hashing algorithms also run in time of order<tt> (⍴x)×(⍴y) </tt>
in the worst case
but order<tt> (⍴x)+(⍴y) </tt>on the average.
We show how hashing can be used for tolerant<tt> x⍳y </tt>
on real and complex arguments.
<br>&nbsp;</p>



<a name="1"></a>
<p><b>1. Real Arguments</b></p>

<p>The definition of tolerant equality implies that 
the closed interval of numbers tolerantly equal to 
a real number<tt> t </tt>has endpoints<tt> t×1-⎕ct </tt>
and<tt> t÷1-⎕ct</tt>&nbsp;.<tt> </tt></p>

<img src="img/interval.bmp">

<p>As the diagram (exaggeratingly) illustrates, 
the interval is not symmetric around<tt> t</tt>&nbsp;.<tt> </tt>
The diagram is reflected about the origin if<tt> t </tt>
is negative.</p>

<p>Koss<sup><acronym title="Koss, Steven L., 
Tolerant Hash Functions, Minnowbrook, 1985-10.">[3]</acronym></sup>
made an observation in 1985 that enabled hashing for tolerant index-of:
The sign, exponent, and leading digits of one or both of<tt> t×1-⎕ct </tt>
and<tt> t÷1-⎕ct </tt>are the same as those of any number in the interval,
and the number of such digits is a function of<tt> ⎕ct</tt>&nbsp;. 
The following examples illustrate the point in base 10:</p>

<pre>
   intv←{⍺←⎕ct ⋄ ⍪⍵×(1-⍺),1,÷1-⍺}

   0.0001 intv ○1
3.141278494
3.141592654
3.141906844
</pre>

<p>The digits of an endpoint 
(but not both endpoints) 
can be completely
different from those of<tt> t </tt>if<tt> t </tt>is
near a power of the base.</p>

<pre>
   0.0001 intv 1e20
9.99900000E19
1.00000000E20
1.00010001E20

   0.0001 intv ¯1e¯20+1e¯27
¯9.99899900E¯21
¯9.99999900E¯21
¯1.00009991E¯20
</pre>

<p>An IEEE-754 64-bit floating point number
has a sign bit, 
followed by an exponent, followed by a mantissa.
(IEEE-754 is used by most current machines.)
For such numbers the observation simplifies
to saying that the leading bits of one or both of<tt> t×1-⎕ct </tt>
and<tt> t÷1-⎕ct </tt>are the same as those of any number in the interval.
</p>

<pre>
   hexf intv ○1   ⍝ hexf is from the dfns workspace
400921FB54442CD1
400921FB54442D18
400921FB54442D5F
</pre>

<p>Again, if<tt> t </tt>is near a power of the base,
the bits of<tt> t×1-⎕ct </tt>or<tt> t÷1-⎕ct </tt>
can be substantially different from those of<tt> t</tt>&nbsp;.</p>

<pre>
   hexf intv 4
400FFFFFFFFFFFA6
4010000000000000
401000000000002D
   hexf intv 4 - 1.2e¯14
400FFFFFFFFFFF8B
400FFFFFFFFFFFE5
401000000000001F
</pre>

<p>A hashing algorithm for<tt> x⍳y </tt>
for real<tt> x </tt>and<tt> y</tt>&nbsp;:</p>

<table>
<tr><td valign=top>0.</td><td>&nbsp;</td>
 <td>Compute a mask based on<tt> ⎕ct </tt>
(function <tt> <a href="Hashing1.htm#hashmask">hashmask</a></tt>).
</td></tr>
<tr><td valign=top>1.</td><td>&nbsp;</td>
 <td>Initialize a hash table<tt> h </tt>of size prime<tt> q </tt>
larger than<tt> 2×⍴x</tt>&nbsp;.
</td></tr>
<tr><td valign=top>2.</td><td>&nbsp;</td>
 <td>For each element<tt> i⌷x</tt>&nbsp;,<tt> </tt>
mask out the trailing bits, 
then compute a hash index, 
then insert into the hash table at that index.  
Collisions of elements that are not exactly equal
are resolved by inserting into the next hash table entry,
wrapping back to the front as necessary.
Exactly equal elements are inserted just once.
</td></tr>
<tr><td valign=top>3.</td><td>&nbsp;</td>
 <td>For each element<tt> i⌷y</tt>&nbsp;,<tt> </tt>
for each of<tt> (i⌷y)×1-⎕ct </tt>
and<tt> (i⌷y)÷1-⎕ct</tt>&nbsp;,<tt> </tt>
mask out the trailing bits, 
then compute a hash index, 
then look in the hash table starting at that index,
using tolerant equality.
</td></tr>
</table>

<p>The hash index for a 64-bit masked floating point 
number<tt> t </tt>is<tt> <nobr>q|(p0×t0)+(p1×t1)</nobr></tt>&nbsp;,<tt> </tt> 
where<tt> t0 </tt>and<tt> t1 </tt>are the parts 
of<tt> t </tt>cast as 32-bit integers,<tt> p0 </tt>
and<tt> p1 </tt>are 32-bit primes,
and<tt> q </tt>is the size of the hash table.
(See function<tt> <a href="Hashing1.htm#dhashfn">dhashfn</a></tt>.)<tt> </tt>
In the C implementation, the expression ignores 
(indeed exploits) integer overflow.</p>

<p>Other than the parts involving<tt> ⎕ct </tt>
and the masking of the trailing bits,
this is Algorithm L of Knuth
<sup><acronym title="Knuth, Donald E., 
The Art of Computer Programming, Volume 3, 
Searching and Sorting, Addison-Wesley, 1973; 
Section 6.4.">[4]</acronym></sup>
with a load factor of 0.5.
The algorithm is modelled in APL 
as<tt> <a href="Hashing1.htm#diota">diota</a></tt>&nbsp;,<tt> </tt>
written as a &ldquo;tradfn&rdquo; to facilitate translation into C.</p>

<pre>
   x←1+(0.25×⎕ct)×?200⍴851
   y←1+(0.25×⎕ct)×?300⍴951
   (x iota y) ≡ x diota y
1

</pre>



<a name="2"></a>
<p><b>2. Complex Arguments</b></p>

<p><p>The region of numbers tolerantly equal to
a complex number<tt> t </tt>is a near-circle with
radius<tt> r←⎕ct×|t</tt>&nbsp;.</p>

<img src="img/oval.bmp">
<br>

<p>More precisely, it is the union of two circular regions: 
The smaller is centered
on<tt> t </tt>with radius<tt> r</tt>&nbsp;.<tt> </tt>
The larger derives as follows.
A point<tt> u </tt>on the boundary 
with magnitude<tt> ≥ |t </tt>
satisfies<tt> (|u-t)=⎕ct×|u</tt>&nbsp;.<tt> </tt>  
That is, the ratio between<tt> |u-t </tt>
and<tt> |u </tt>is<tt> ⎕ct</tt>&nbsp;,<tt> </tt> 
a constant; therefore, 
that boundary is a circle of Apollonius 
with foci<tt> t </tt>and the origin.
The larger circle circumscribes 
the two points
on the smaller circle with magnitude<tt> |t </tt>
and the point
with magnitude<tt> (|t)÷1-⎕ct </tt>
collinear with<tt> t </tt>and the origin.
(A more precise diagram than the one above can be found
in <a href="Hashing1.htm#ax0">Appendix A0</a>.)</p>

<p>The union of two circles (or even a circle) 
is inconvenient to deal with computationally.  
For present purposes it is good enough to
work with a square that contains the region,
&ldquo;good enough&rdquo; in the sense
that even though numbers 
outside the region will be hashed 
to the same index, 
such numbers will be rejected when they are
tested for tolerant equality.
We choose as the delta 
(half the length of a side of the square)<tt> ⎕ct × </tt>&radic;2<tt> × </tt>
the larger of the magnitudes of the real and imaginary parts of<tt> t</tt>&nbsp;.
This choice avoids the problem and expense 
of computing the magnitude of<tt> t</tt>&nbsp;,<tt> </tt>
requisite for a tighter fitting square.
</p>

<img src="img/square.bmp">
<br><br>

<pre>
   delta←{⍺←⎕ct ⋄ ⍺×(2*0.5)×⌈/|9 11○⍵}

   delta 3j4
5.656854249E¯14
   delta 3e6j4
4.242640687E¯8
   delta 3j4e6
5.656854249E¯8
</pre>

<p>Like the real case, the leading bits
of the four corners are representative 
of those of points in the square.
However, unlike the real case,
the number of leading bits will depend
on<tt> ⎕ct </tt><i>and</i><tt> t </tt>
and (in general) are different for the
real and imaginary parts.</p>

<pre>
   hexf 3 4
4008000000000000 4010000000000000
   hexf 3 4+○1e¯14
4008000000000047 4010000000000023

   hexf 3 1e¯20
4008000000000000 3BC79CA10C924223
   hexf 3, ○¯1e¯21
4008000000000000 BBADABE7AA9FDCC0
</pre>

<p>The first example shows that if the limbs
(the real and imaginary parts) are similar in length,
then the numbers in the region 
can have many common leading bits in both limbs.
The second example shows that if one limb
is much longer than the other, then
two tolerantly equal numbers can have completely
different bits in their shorter limbs.</p>

<p>For a complex number<tt> t</tt>&nbsp;,<tt> </tt>
the number of leading bits for the longer limb
is computed as before, a function of<tt> ⎕ct </tt>alone
(function<tt> <a href="Hashing1.htm#hashmask">hashmask</a></tt>).
The number of leading bits for the shorter limb<tt> s </tt>
with a delta of<tt> d </tt>is
the length of the common prefix for<tt> s </tt>and<tt> s+d </tt>
or for<tt> s </tt>and<tt> s-d</tt>&nbsp;,<tt> </tt>
whichever is longer 
(function<tt> <a href="Hashing1.htm#hashmask2">hashmask2</a></tt>).</p>

<p>A hashing algorithm for<tt> x⍳y </tt>
for complex<tt> x </tt>and<tt> y</tt>&nbsp;:</p>

<table>
<tr><td valign=top>0.</td><td>&nbsp;</td>
 <td>Compute a mask based on<tt> ⎕ct </tt>
(function <tt> <a href="Hashing1.htm#hashmask">hashmask</a></tt>).
</td></tr>
<tr><td valign=top>1.</td><td>&nbsp;</td>
 <td>Initialize a hash table<tt> h </tt>of size prime<tt> q </tt>
larger than<tt> 2×⍴x</tt>&nbsp;.
</td></tr>
<tr><td valign=top>2.</td><td>&nbsp;</td>
 <td>For each element<tt> i⌷x</tt>&nbsp;,<tt> </tt>
compute<tt> d←delta&nbsp;i⌷x </tt>
and<tt> m2←s&nbsp;hashmask2&nbsp;d </tt>where<tt> s </tt>
is the length of the shorter limb,
then mask out the trailing bits separately for 
the real and imaginary parts, 
then compute a hash index, 
then insert into the hash table at that index.  
Collisions of elements that are not exactly equal
are resolved by inserting into the next hash table entry,
wrapping back to the front as necessary.
Exactly equal elements are inserted just once.
</td></tr>
<tr><td valign=top>3.</td><td>&nbsp;</td>
 <td>For each element<tt> i⌷y</tt>&nbsp;,<tt> </tt>
compute<tt> d←delta&nbsp;i⌷y </tt>
and<tt> m2←s&nbsp;hashmask2&nbsp;d </tt>where<tt> s </tt>
is the length of the shorter limb,
then for each of the &ldquo;four corners&rdquo;
<table>
<tr><td><tt>&nbsp; (i⌷y) + d × &nbsp;1j1 </tt></td></tr>
<tr><td><tt>&nbsp; (i⌷y) + d × &nbsp;1j¯1</tt></td></tr>
<tr><td><tt>&nbsp; (i⌷y) + d × ¯1j1 </tt></td></tr>
<tr><td><tt>&nbsp; (i⌷y) + d × ¯1j¯1</tt></td></tr>
</table>
mask out the trailing bits separately for the real
and imaginary parts, 
then compute a hash index, 
then look in the hash table starting at that index,
using tolerant equality.
</td></tr>
</table>

<p>The hash index for a 128-bit masked complex 
number<tt> t </tt>is<tt> <nobr>q|(p0×t0)+(p1×t1)+(p2×t2)+(p3×t3)</nobr></tt>&nbsp;,<tt> </tt> 
where<tt> t0 t1 t2 t3 </tt>are the parts 
of<tt> t </tt>cast as 32-bit integers,<tt> p0 p1 p2 p3 </tt>
are 32-bit primes,
and<tt> q </tt>is the size of the hash table.
(See function<tt> <a href="Hashing1.htm#zhashfn">zhashfn</a></tt>.)<tt> </tt>
In the C implementation, the expression ignores 
(indeed exploits) integer overflow.</p>

<p>The algorithm is modelled in APL 
as<tt> <a href="Hashing1.htm#ziota">ziota</a></tt>&nbsp;,<tt> </tt> 
written as a
&ldquo;tradfn&rdquo; to facilitate translation into C.</p>

<pre>
   x←*0j1×1+(0.25×⎕ct)×?199⍴223
   y←*0j1×1+(0.25×⎕ct)×?307⍴239
   (x iota y)≡x ziota y
1

</pre>



<a name="3"></a>
<p><b>3. Implementation</b></p>

<p>The algorithms modelled by<tt> diota </tt>and<tt> ziota </tt>
have been implemented in C in Dyalog v. 13.0.  
The same algorithms underlie the implementation
of<tt> x∊y x~y x∩y x∪y ∪x</tt>&nbsp;.<tt> </tt>
The implementation has additional optimizations
for<tt> ⎕ct←0 </tt>and
for<tt> x⍳x </tt>and<tt> ∪x </tt>
where the initial hashing of<tt> x </tt>(step 2)
is merged into the main loop (step 3). 
The hash table is retained for reuse in<tt> f←x∘⍳</tt>
and in<tt> x∘⍳¨ </tt>(also<tt> ∊∘y</tt>&nbsp;, etc.).
<br>&nbsp;</p>



<a name="4"></a>
<p><b>4. Tests</b></p>

<p><tt>assert p </tt>is a monad which does nothing 
if<tt> ~0∊p </tt>and signals<tt> assertion failure </tt>
if<tt> 0∊p</tt>&nbsp;.<tt> </tt>For example:

<pre>
   x←1000 rand 0.5
   assert (x⍳x)≡x iota x

   assert 3 = 3×1+2×⎕ct
assertion failure
   assert 3=3×1+2×⎕ct
  ∧
</pre>

<p>The test suites use<tt> assert </tt>extensively.
A test function returns a<tt> 1 </tt>if it runs successfully,
or suspends with an assertion failure 
at the first point of failure.
Four main functions are included 
(see <a href="Hashing1.htm#ax2">Appendix A2</a>):</p>

<pre>
   test_iotaD           ⍝ x⍳y for real x and y
1
   test_iotaD_retained  ⍝ f←x∘⍳ and x∘⍳¨ for real x
1
   test_iotaZ           ⍝ x⍳y for complex x and y
1
   test_iotaZ_retained  ⍝ f←x∘⍳ and x∘⍳¨ for complex x
1

</pre>



<a name="5"></a>
<p><b>5. Timings</b></p>


<p>The following table compares the timings in Dyalog v13.0 
vs. v12.1.</p>

<pre>
{x y←⍵ ⍵ rand¨0.5 ⋄ 5 timer'x⍳y'}¨1e6×1 2 4 8
{x  ←⍵   rand 0.5 ⋄ 5 timer'x⍳x'}¨1e6×1 2 4 8
</pre>

<table>
<tr><td>&nbsp;</td><td>&nbsp; &nbsp; &nbsp;</td>
 <td colspan=5 align=center>Real<tt> x⍳y </tt></td><td>&nbsp; &nbsp; &nbsp;</td>
 <td colspan=5 align=center>Real<tt> x⍳x </tt></td><td>&nbsp; &nbsp; &nbsp;</td>
 </tr>
<tr><td align=center><tt>n</tt></td><td>&nbsp;</td>
 <td align=right>v13.0&nbsp;</td><td>&nbsp;</td>
 <td align=right>v12.1&nbsp;</td><td>&nbsp;</td>
 <td>Ratio</td><td>&nbsp;</td>
 <td align=right>v13.0&nbsp;</td><td>&nbsp;</td>
 <td align=right>v12.1&nbsp;</td><td>&nbsp;</td>
 <td>Ratio</td><td>&nbsp;</td></tr>
<tr><td><tt>1e6</tt></td><td>&nbsp;</td>
 <td align=right>0.5812</td><td>&nbsp;</td>
 <td align=right>2.3438</td><td>&nbsp;</td><td align=right>4.03</td><td>&nbsp;</td>
 <td align=right>0.3282</td><td>&nbsp;</td>
 <td align=right>2.1282</td><td>&nbsp;</td><td align=right>6.48</td><td>&nbsp;</td></tr>
<tr><td><tt>2e6</tt></td><td>&nbsp;</td>
 <td align=right>1.2438</td><td>&nbsp;</td>
 <td align=right>5.2124</td><td>&nbsp;</td><td align=right>4.19</td><td>&nbsp;</td>
 <td align=right>0.6906</td><td>&nbsp;</td>
 <td align=right>5.0874</td><td>&nbsp;</td><td align=right>7.37</td><td>&nbsp;</td></tr>
<tr><td><tt>4e6</tt></td><td>&nbsp;</td>
 <td align=right>2.2938</td><td>&nbsp;</td>
 <td align=right>11.1250</td><td>&nbsp;</td><td align=right>4.85</td><td>&nbsp;</td>
 <td align=right>1.3438</td><td>&nbsp;</td>
 <td align=right>11.1844</td><td>&nbsp;</td><td align=right>8.32</td><td>&nbsp;</td></tr>
<tr><td><tt>8e6</tt></td><td>&nbsp;</td>
 <td align=right>4.9750</td><td>&nbsp;</td>
 <td align=right>25.9906</td><td>&nbsp;</td><td align=right>5.22</td><td>&nbsp;</td>
 <td align=right>2.9562</td><td>&nbsp;</td>
 <td align=right>24.8844</td><td>&nbsp;</td><td align=right>8.42</td><td>&nbsp;</td></tr>
</table>

<p>The following table presents timings done only in Dyalog v13.0
as they are impossible or impractical in v12.1.</p>

<pre>
{x y←⍵ ⍵ rand¨0j1 ⋄ 5 timer'x⍳y'}¨1e6×1 2 4 8
{x  ←⍵   rand 0j1 ⋄ 5 timer'x⍳x'}¨1e6×1 2 4 8
{x y←monster¨⍵ ⍵  ⋄ 5 timer'x⍳y'}¨1e6×1 2 4 8
{x  ←monster ⍵    ⋄ 5 timer'x⍳x'}¨1e6×1 2 4 8
</pre>

<table>
<tr><td>&nbsp;</td><td>&nbsp; &nbsp; &nbsp;</td>
 <td colspan=3 align=center>Complex</td><td>&nbsp; &nbsp; &nbsp;</td>
 <td colspan=3 align=center>Monster</td>
 </tr>
<tr><td align=center><tt>n</tt></td><td>&nbsp;</td>
 <td align=right><tt>x⍳y</tt>&nbsp;</td><td>&nbsp;</td>
 <td align=right><tt>x⍳x</tt>&nbsp;</td><td>&nbsp;</td>
 <td align=right><tt>x⍳y</tt>&nbsp;</td><td>&nbsp;</td>
 <td align=right><tt>x⍳x</tt>&nbsp;</td></tr>
<tr><td><tt>1e6</tt></td><td>&nbsp;</td>
 <td align=right>1.6500</td><td>&nbsp;</td>
 <td align=right>0.9532</td><td>&nbsp;</td>
 <td align=right>1.8032</td><td>&nbsp;</td>
 <td align=right>1.6750</td></tr>
<tr><td><tt>2e6</tt></td><td>&nbsp;</td>
 <td align=right>3.2750</td><td>&nbsp;</td>
 <td align=right>2.1436</td><td>&nbsp;</td>
 <td align=right>3.5032</td><td>&nbsp;</td>
 <td align=right>3.2314</td></tr>
<tr><td><tt>4e6</tt></td><td>&nbsp;</td>
 <td align=right>5.1468</td><td>&nbsp;</td>
 <td align=right>3.6906</td><td>&nbsp;</td>
 <td align=right>6.8906</td><td>&nbsp;</td>
 <td align=right>6.8562</td></tr>
<tr><td><tt>8e6</tt></td><td>&nbsp;</td>
 <td align=right>9.7032</td><td>&nbsp;</td>
 <td align=right>7.2250</td><td>&nbsp;</td>
 <td align=right>13.3812</td><td>&nbsp;</td>
 <td align=right>13.3436</td></tr>
</table>
<br>



<a name="ref"></a>
<p><b>References</b></p>

<table>
<tr><td valign=top>0.</td><td>&nbsp;<td>
ISO/IEC, <i>Programming Language Extended APL</i>, 
ISO/IEC 13751:2001(E), 2001-02-01; 
Section 5.2.5, Tolerantly-Equal, page 19.
</td></tr>
<tr><td valign=top>1.</td><td>&nbsp;<td>
Bernecky, Robert, e-mail, 2010-05-11 05:04.
</td></tr>
<tr><td valign=top>2.</td><td>&nbsp;<td>
Streeter, Geoff, e-mail, 2010-05-13 00:25.
</td></tr>
<tr><td valign=top>3.</td><td>&nbsp;<td>
Koss, Steven L., <i>Tolerant Hash Functions</i>, 
Minnowbrook, 1985-10.
</td></tr>
<tr><td valign=top>4.</td><td>&nbsp;<td>
Knuth, Donald E., <i>The Art of Computer Programming, Volume 3</i>,
Searching and Sorting, Addison-Wesley, 1973; Section 6.4.
</td></tr>
</table>
<br>



<a name="ax"></a>
<p><b>Appendices</b></p>

<a name="ax0"></a>
<p><b>A0. Region of Tolerant Equality</b></p>

<p><p>The region of numbers tolerantly equal to
a complex number<tt> t </tt>is a near-circle with
radius<tt> r←⎕ct×|t</tt>&nbsp;.</p>

<img src="img/oval.bmp">
<br>

<p>More precisely, it is the union of two circular regions: 
The smaller (in black) is centered
on<tt> t </tt>with radius<tt> r</tt>&nbsp;.<tt> </tt>
The larger derives as follows.
A point<tt> u </tt>on the boundary 
with magnitude<tt> ≥ |t </tt>
satisfies<tt> (|u-t)=⎕ct×|u</tt>&nbsp;.<tt> </tt>  
That is, the ratio between<tt> |u-t </tt>
and<tt> |u </tt>is<tt> ⎕ct</tt>&nbsp;,<tt> </tt> 
a constant; therefore, 
that boundary is a circle of Apollonius 
with foci<tt> t </tt>and the origin.
The larger circle (in red) circumscribes 
the two points<tt> p </tt>and<tt> q </tt>
on the smaller circle with magnitude<tt> |t </tt>(in green)
and the point<tt> s </tt>
with magnitude<tt> (|t)÷1-⎕ct </tt>
collinear with<tt> t </tt>and the origin.</p>

<table>
<tr><td><img src="img/circle2.bmp"></td>
<td>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</td>
<td><pre>
r←⎕ct×|t

(|u-t) = ⎕ct×|u
(|p)   = |t
(|q)   = |t
(|s)   = (|t)÷1-⎕ct
</pre></td></tr></table>

<p>If<tt> t </tt>is real,
the region simplifies to the closed interval 
with endpoints<tt> t×1-⎕ct </tt>
and<tt> t÷1-⎕ct</tt>&nbsp;.<tt> </tt></p>

<img src="img/interval.bmp">
<br>&nbsp;
</td></tr></table>



<table align=center><tr><td>

<a name="ax1"></a>
<p><b>A1. Models</b></p>

<pre>
bfh       ← {((¯1↓⍴⍵),4×¯1↑⍴⍵)⍴(¯1⌽⍳1+⍴⍴⍵)⍉(4⍴2)⊤'0123456789ABCDEF'⍳⍵}

binary    ← {((⍴⍵),64)⍴⍉(4⍴2)⊤'0123456789ABCDEF'⍳,0 1↓((×/⍴⍵),17)⍴' ',hexf ⍵}
<a name="dhashfn"></a>
dhashfn   ← {⍺|2294967341 17 hfn ⍵}

decf        ⍝ from dfns workspace

delta     ← {⍺←⎕ct ⋄ ⍺×(2*0.5)×⌈/|9 11○⍵}

∇ z←{qct}fourcorners xy;b;bx;by;d;m;px;py;t
 ⍝ the 4 corners of a square that contains the circle of equality
 ⍝ e.g.   fourcorners 10 4   or   1e¯10 fourcorners (*1),1e¯12
 ⍝ xy:  2-element vector of the real and imaginary parts
 ⍝ qct: comparison tolerance (default: ⎕ct)
  ⍎(0=⎕nc 'qct')/'qct←⎕ct'
  m←⌈/|xy                      ⍝ the larger magnitude
  d←qct×m×2*0.5                ⍝ displacement to corner
  t←(4 2⍴xy)+d×1-2×⍉2 2⊤⍳4     ⍝ the 4 corners
  b←bfh 0 1↓8 17⍴' ',hexf t    ⍝ t in binary
  bx←(8⍴1 0)⌿b                 ⍝ real      parts in binary
  by←(8⍴0 1)⌿b                 ⍝ imaginary parts in binary
  b←bfh 0 1↓2 17⍴' ',hexf xy   ⍝ original numbers in binary
  px←hfb∨⌿∧\bx=b[4⍴0;]         ⍝ mask for real      parts
  py←hfb∨⌿∧\by=b[4⍴1;]         ⍝ mask for imaginary parts
  z←(6 5⍴'orig mask c0   c1   c2   c3   '),(hexf xy)⍪(px,' ',py)⍪hexf t
∇
<a name="hashmask"></a>
hashmask  ← {∧\∧⌿t[0 0;]=1 0↓t←binary ⍺×1,m,÷m←1-⍵}
<a name="hashmask2"></a>
hashmask2 ← {64↑1⍴⍨(16≤n)×8×⌊8÷⍨n←+/∨⌿∧\t[0 0;]=1 0↓t←binary ⍺,(⍺-⍵),⍺+⍵}

hexf        ⍝ from dfns workspace 

hfb       ← {'0123456789ABCDEF'[2⊥(1⌽⍳1+⍴⍴⍵)⍉((¯1↓⍴⍵),((¯1↑⍴⍵)÷4),4)⍴⍵]}

hfn       ← {
 ⍝ subfunction of dhashfn and zhashfn
 ⍝ ⍺: two 32-bit primes
 ⍝ ⍵: 64-bit integer as a 64-element boolean vector
    p0←(2⍴65536)⊤⍺[0]                        ⍝ p0 as two 16-bit numbers
    p1←(2⍴65536)⊤⍺[1]                        ⍝ p1 as two 16-bit numbers
    h←2⊥⍉4 16⍴⍵                              ⍝ ⍵ as 4 16-bit numbers
    t←+⌿0 ¯1⌽2 3↑p0∘.×2↑h                    ⍝ now implement (p0×y0)+(p1×y1)
    t←¯2↑t++⌿0 ¯1⌽2 3↑p1∘.×2↓h
    65536⊥{1↓(0,65536|⍵)+(⌊⍵÷65536),0}⍣≡t    ⍝ propagate carries
}

iota      ← {(0⌷⍴⍺)-+/∨\⍵∘.=⍺}

intv      ← {⍺←⎕ct ⋄ ⍪⍵×(1-⍺),1,÷1-⍺}

j         ← {⍺←0 ⋄ ⍺+0j1×⍵}

monster   ← {1+(0.0001×⎕ct)×?⍵⍴100000}

permute   ← {⍵[?⍨⍴⍵]}

Primes    ← 1031 2053 4099 8209 16411 32771 65537 131101 262147 524309 
                1048583 2097169 4194319 8388617 16777259 33554467 67108879 
                134217757 268435459 536870923
            ⍝ next prime >2*k, k≥10
<a name="rand"></a>
rand      ← {
 ⍝ generate random data with shape ⍺ and range ⍵
     ⍵=0.5   : 256÷⍨¯200000+?⍺⍴500000
     ⍵=0j1   : 1 0j1+.×8÷⍨¯500+?(2,⍺)⍴1000
     ⍵=⌊/⍳0  : ⍺⍴permute,(1 ¯1×⍵)∘.×1-⎕ct×16÷⍨?⍺⍴113
     1e¯99>⍵ : ⍺⍴permute,(1 ¯1×⍵)∘.×1+⎕ct×16÷⍨?⍺⍴113  ⍝ ⍵ = decf 15 1/'01'
     t←⎕DR y←((2≠⍵)×⌊⍵÷¯2)+?⍺⍴⍵ ⋄ y
}

<a name="timer"></a>
∇ z9←{x9}timer y9;c9;i9
 ⍝ the average seconds required to execute expression y9 x9 times
  ⍎(0=⎕nc 'x9')/'x9←1'
  c9←⎕ai
  :For i9 :In ⍳x9
      ⍎''
  :EndFor
  c9←⎕ai-c9
  z9←⎕ai
  :For i9 :In ⍳x9
      {}⍎y9
  :EndFor
  z9←⎕ai-z9
  z9←(z9-c9)[1+⎕io]÷1000×x9
∇
<a name="zhashfn"></a>
∇ z←q zhashfn x;b;m;p0;p1;p2;p3;q;s;t
 ⍝ hash function on complex number x, using modulus q
 ⍝ x: 2 64 boolean matrix of the real and imaginary parts of a complex number
  s←2294967341 17 hfn x[0;]  ⍝ hash real part
  t←2394967363 43 hfn x[1;]  ⍝ hash imaginary part
  z←q|(2*32)|s+t
∇
<a name="diota"></a>
∇ z←x diota y;h;hj;i;j;k;m0;m1;mask;ne0;q;yi;yy
 ⍝ model of x⍳y where x and y are 64-bit floating point numbers and ⎕ct>0

  q←Primes[(Primes>2×⍴x)⍳1]                 ⍝ size of hash table, a prime >2×⍴x
  h←q⍴¯1                                    ⍝ hash table; ¯1 means "free"
  m1←÷m0←1-⎕ct                              ⍝ upper & lower multipliers
  mask←(○1)hashmask ⎕ct                     ⍝ bits in a 64-bit number to hash
  ne0←{⎕ct←0 ⋄ ⍺≠⍵}                         ⍝ exact not-equal

  :For i :In ⍳⍴x                            ⍝ hash x
      j←q dhashfn mask∧binary x[i]          ⍝ index into hash table
      :While (0≤h[j])∧x[i] ne0 x[0⌈h[j]]    ⍝ don't table exact duplicates
          j←q|1+j                           ⍝ the next hash table entry
      :EndWhile
      ⍎(0>h[j])/'h[j]←i'                    ⍝ new hash continuation
  :EndFor

  z←(⍴y)⍴¯1
  :For i :In ⍳⍴y                            ⍝ main loop
      k←⍴x                                  ⍝ index of y[i] as far as we now know
      yi←{mask∧binary ⍵}¨y[i]×m0,m1         ⍝ masked variants
      :For yy :In ∪yi                       ⍝ do for each unique variant
          j←q dhashfn yy                    ⍝ where to start looking in hash table
          :While 0≤hj←h[j]                  ⍝ loop until no more hash continuations
              ⍎((k>hj)∧y[i]=x[hj])/'k←hj'   ⍝ look for tolerant match with smaller index
              j←q|1+j                       ⍝ do next hash continuation
          :EndWhile
      :EndFor
      z[i]←k
  :EndFor
∇
<a name="ziota"></a>
∇ z←x ziota y;c;d;diag;h;hj;i;j;k;mask;msk;ne0;p;q;t;yi;yy
 ⍝ model of x⍳y where x and y are complex numbers and ⎕ct>0

  q←Primes[(Primes>2×⍴x)⍳1]                 ⍝ size of hash table, a prime >2×⍴x
  h←q⍴¯1                                    ⍝ hash table; ¯1 means "free"
  diag←⎕ct×2*0.5                            ⍝ relative displacement to a corner
  mask←(○1)hashmask ⎕ct                     ⍝ bits in a 64-bit number to hash
  ne0←{⎕ct←0 ⋄ ⍺≠⍵}                         ⍝ exact not-equal

  :For i :In ⍳⍴x                            ⍝ hash x
      t←9 11○x[i]                           ⍝ real and imaginary parts
      msk←(⌊/|t)hashmask2 diag×⌈/|t         ⍝ mask for shorter limb
      c←(binary t)∧(&lt;/|t)⊖mask,[¯0.5]msk
      j←q zhashfn c                         ⍝ index into hash table
      :While (0≤h[j])∧x[i] ne0 x[0⌈h[j]]    ⍝ don't table exact duplicates
          j←q|1+j                           ⍝ the next hash table entry
      :EndWhile
      ⍎(0>h[j])/'h[j]←i'                    ⍝ new hash continuation
  :EndFor

  z←(⍴y)⍴¯1
  :For i :In ⍳⍴y                            ⍝ main loop
      k←⍴x                                  ⍝ index of y[i] as far as we now know
      t←9 11○y[i]                           ⍝ real and imaginary parts
      d←diag×⌈/|t                           ⍝ absolute displacement to a corner
      msk←(⌊/|t)hashmask2 d                 ⍝ mask for shorter limb
      yi←{binary t+d×⍵}¨,∘.,⍨1 ¯1           ⍝ 4 corners of square containing the region of equality
      yi←yi∧¨⊂(&lt;/|t)⊖mask,[¯0.5]msk         ⍝ masked variants; see also function "fourcorners"
      :For yy :In ∪yi                       ⍝ do for each unique variant
          j←q zhashfn yy                    ⍝ where to start looking in hash table
          :While 0≤hj←h[j]                  ⍝ loop until no more hash continuations
              ⍎((k>hj)∧y[i]=x[hj])/'k←hj'   ⍝ look for tolerant match with smaller index
              j←q|1+j                       ⍝ do next hash continuation 
          :EndWhile
      :EndFor
      z[i]←k
  :EndFor
∇

</pre>



<a name="ax2"></a>
<p><b>A2. Tests</b></p>

<pre>
∇ assert x
  'assertion failure' ⎕signal (0∊x)⍴11
∇

Domains ← 2 256 65536 2000000000 0.5 0j1

∇ z←test_iotaD;b;e;i;j;m;x;y
 ⍝ tests on dyadic iota with 64-bit float left argument

  x←256÷⍨i←¯4500+?10000⍴9000
  y←256÷⍨j←¯4500+?10000⍴10000
  assert(x⍳x)≡i⍳i
  assert(x⍳y)≡i⍳j

  x←1+⎕ct×?200⍴150
  y←1+⎕ct×?300⍴250
  assert(x⍳x)≡x iota x
  assert(x⍳y)≡x iota y

  x←1+(0.25×⎕ct)×?200⍴851
  y←1+(0.25×⎕ct)×?300⍴951
  assert(x⍳x)≡x iota x
  assert(x⍳y)≡x iota y

  assert b←((⍳20),1000+⍳8)∘.{(1+x⍳y)≡((○1),x←⍺ rand ⍵)⍳y←⍺ rand ⍵}Domains
  assert b←((⍳20),1000+⍳8)∘.{x←⍺ rand ⍵ ⋄ (⍺,x⍳y)≡x⍳(○1),y←⍺ rand ⍵}Domains

  m←⌊/⍳0  ⍝ m: largest positive number
  x←89 rand m
  y←97 rand m
  assert(x⍳x)≡x iota x
  assert(y⍳y)≡y iota y
  assert(x⍳y)≡x iota y

  e←decf 15 1/'01'  ⍝ e: smallest positive number
  x←89 rand e
  y←97 rand e
  assert(x⍳x)≡x iota x
  assert(y⍳y)≡y iota y
  assert(x⍳y)≡x iota y

  z←1
∇

∇ z←test_iotaD_retained;b;g;i;j;n;qct;t;x;y
 ⍝ tests on dyadic iota with 64-bit float left or right argument

  qct←1.5×⎕ct

  x←256÷⍨i←¯4500+?10000⍴9000
  y←256÷⍨j←¯4500+?10000⍴10000
  g←x∘⍳
  assert(g x)≡i⍳i
  assert(g y)≡i⍳j
  assert b←((⍳20),1000+⍳8)∘.{(g y)≡x⍳y←⍺ rand ⍵}Domains
  assert b←((⍳20),1000+⍳8)∘.{⎕ct←qct ⋄ (g y)≡x⍳y←⍺ rand ⍵}Domains
  assert(b⊂x⍳y)≡¨x∘⍳¨(b←1,0=1↓?(⍴y)⍴1000)⊂y
  assert{⎕ct←⍵ ⋄ (g y)≡x⍳y}¨⎕ct×0.25×1+⍳6

  x←1+⎕ct×?200⍴150
  y←1+⎕ct×?300⍴250
  g←x∘⍳
  assert(g x)≡x iota x
  assert(g y)≡x iota y
  assert b←((⍳20),1000+⍳8)∘.{(g y)≡x⍳y←⍺ rand ⍵}Domains
  assert b←((⍳20),1000+⍳8)∘.{⎕ct←qct ⋄ (g y)≡x⍳y←⍺ rand ⍵}Domains
  assert(b⊂x⍳y)≡¨x∘⍳¨(b←1,0=1↓?(⍴y)⍴50)⊂y
  assert{⎕ct←⍵ ⋄ (g y)≡x⍳y}¨⎕ct×0.25×1+⍳6

  x←1+(0.25×⎕ct)×?200⍴851
  y←1+(0.25×⎕ct)×?300⍴951
  g←x∘⍳
  assert(g x)≡x iota x
  assert(g y)≡x iota y
  assert b←((⍳20),1000+⍳8)∘.{(g y)≡x⍳y←⍺ rand ⍵}Domains
  assert b←((⍳20),1000+⍳8)∘.{⎕ct←qct ⋄ (g y)≡x⍳y←⍺ rand ⍵}Domains
  assert(b⊂x⍳y)≡¨x∘⍳¨(b←1,0=1↓?(⍴y)⍴50)⊂y
  assert{⎕ct←⍵ ⋄ (g y)≡x⍳y}¨⎕ct×0.25×1+⍳6

  n←(⍳20),1000+⍳8
  assert b←n∘.{x←⍺ rand ⍵ ⋄ g←x∘⍳ ⋄ t←g 4 ⋄ (g(○1),y)≡⍺,x⍳y←⍺ rand ⍵}Domains
  assert b←n∘.{x←⍺ rand ⍵ ⋄ g←((○1),x)∘⍳ ⋄ t←g 4 ⋄ (g y)≡1+x⍳y←⍺ rand ⍵}Domains

  x←0.01×¯200000+?1000000⍴500000
  y←0.01×¯200000+?100⍴500000
  g←x∘⍳
  assert(g y)≡x⍳y
  assert 0.1>t←(5 timer'g y')÷5 timer'x⍳y'

  z←1
∇

∇ z←test_iotaZ;b;e;f;m;p;q;x;y
 ⍝ tests on dyadic iota with complex left argument

  x←1 0j1+.×16÷⍨p←¯45+?2 10000⍴90
  y←1 0j1+.×16÷⍨q←¯45+?2 10000⍴100
  assert(x⍳x)≡p⍳p←100⊥p
  assert(x⍳y)≡p⍳q←100⊥q

  x←1 0j1+.×17÷⍨p←¯45+?2 10000⍴90
  y←1 0j1+.×17÷⍨q←¯45+?2 10000⍴100
  assert(x⍳x)≡p⍳p←100⊥p
  assert(x⍳y)≡p⍳q←100⊥q

  x←1 0j1+.×1+⎕ct×?2 199⍴53
  y←1 0j1+.×1+⎕ct×?2 307⍴59
  assert(x⍳x)≡x iota x
  assert(x⍳y)≡x iota y

  x←1 0j1+.×1+(0.25×⎕ct)×?2 199⍴223
  y←1 0j1+.×1+(0.25×⎕ct)×?2 307⍴239
  assert(x⍳x)≡x iota x
  assert(x⍳y)≡x iota y

  x←*j 1+(0.25×⎕ct)×?199⍴223
  y←*j 1+(0.25×⎕ct)×?307⍴239
  assert(x⍳x)≡x iota x
  assert(x⍳y)≡x iota y

  x←(0.5×¯12+?199⍴23)j ⎕ct×?199⍴30
  y←(0.5×¯12+?307⍴23)j ⎕ct×?307⍴30
  assert(x⍳x)≡x iota x
  assert(x⍳y)≡x iota y

  x←(0.5×¯12+?199⍴23)j⍨⎕ct×?199⍴30
  y←(0.5×¯12+?307⍴23)j⍨⎕ct×?307⍴30
  assert(x⍳x)≡x iota x
  assert(x⍳y)≡x iota y

  x←((⎕ct×?120⍴30),0.5×¯12+?79⍴23)[?⍨199]j((⎕ct×?120⍴30),0.5×¯12+?79⍴23)[?⍨199]
  y←((⎕ct×?209⍴30),0.5×¯12+?98⍴23)[?⍨307]j((⎕ct×?209⍴30),0.5×¯12+?98⍴23)[?⍨307]
  assert(x⍳x)≡x iota x
  assert(x⍳y)≡x iota y

  assert b←((⍳20),1000+⍳20)∘.{(1+x⍳y)≡((3 j○1),x←⍺ rand ⍵)⍳y←⍺ rand ⍵}Domains
  assert b←((⍳20),1000+⍳20)∘.{(⍺,x⍳y)≡(x←⍺ rand ⍵)⍳(3 j○1),y←⍺ rand ⍵}Domains

  z←1
∇

∇ z←test_iotaZ_retained;b;g;i;k;n;qct;t;x;y
 ⍝ tests on dyadic iota with complex arguments

  qct←1.5×⎕ct

  x←1 0j1+.×256÷⍨i←¯250+?2 10000⍴500
  y←1 0j1+.×256÷⍨k←¯250+?2 10000⍴500
  g←x∘⍳
  assert(g x)≡i⍳i←500⊥i
  assert(g y)≡i⍳k←500⊥k
  assert b←((⍳20),1000+⍳8)∘.{(g y)≡x⍳y←⍺ rand ⍵}Domains
  assert b←((⍳20),1000+⍳8)∘.{⎕ct←qct ⋄ (g y)≡x⍳y←⍺ rand ⍵}Domains
  assert(b⊂x⍳y)≡¨x∘⍳¨(b←1,0=1↓?(⍴y)⍴1000)⊂y
  assert{⎕ct←⍵ ⋄ (g y)≡x⍳y}¨⎕ct×0.25×1+⍳6

  x←*j 1+⎕ct×?200⍴150
  y←*j 1+⎕ct×?300⍴250
  g←x∘⍳
  assert(g x)≡x iota x
  assert(g y)≡x iota y
  assert b←((⍳20),1000+⍳8)∘.{(g y)≡x⍳y←⍺ rand ⍵}Domains
  assert b←((⍳20),1000+⍳8)∘.{⎕ct←qct ⋄ (g y)≡x⍳y←⍺ rand ⍵}Domains
  assert(b⊂x⍳y)≡¨x∘⍳¨(b←1,0=1↓?(⍴y)⍴50)⊂y
  assert{⎕ct←⍵ ⋄ (g y)≡x⍳y}¨⎕ct×0.25×1+⍳6

  x←*j 1+(0.25×⎕ct)×?200⍴851
  y←*j 1+(0.25×⎕ct)×?300⍴951
  g←x∘⍳
  assert(g x)≡x iota x
  assert(g y)≡x iota y
  assert b←((⍳20),1000+⍳8)∘.{(g y)≡x⍳y←⍺ rand ⍵}Domains
  assert b←((⍳20),1000+⍳8)∘.{⎕ct←qct ⋄ (g y)≡x⍳y←⍺ rand ⍵}Domains
  assert(b⊂x⍳y)≡¨x∘⍳¨(b←1,0=1↓?(⍴y)⍴50)⊂y
  assert{⎕ct←⍵ ⋄ (g y)≡x⍳y}¨⎕ct×0.25×1+⍳6

  x←(0.5×¯12+?199⍴23)j ⎕ct×?199⍴30
  y←(0.5×¯12+?307⍴23)j ⎕ct×?307⍴30
  g←x∘⍳
  assert(g x)≡x iota x
  assert(g y)≡x iota y
  assert b←((⍳20),1000+⍳8)∘.{(g y)≡x⍳y←⍺ rand ⍵}Domains
  assert b←((⍳20),1000+⍳8)∘.{⎕ct←qct ⋄ (g y)≡x⍳y←⍺ rand ⍵}Domains
  assert(b⊂x⍳y)≡¨x∘⍳¨(b←1,0=1↓?(⍴y)⍴50)⊂y
  assert{⎕ct←⍵ ⋄ (g y)≡x⍳y}¨⎕ct×0.25×1+⍳6

  n←(⍳20),1000+⍳8
  assert b←n∘.{x←⍺ rand ⍵ ⋄ g←x∘⍳ ⋄ t←g 4 ⋄ (g(3 j○1),y)≡⍺,x⍳y←⍺ rand ⍵}Domains
  assert b←n∘.{x←⍺ rand ⍵ ⋄ g←((3 j○1),x)∘⍳ ⋄ t←g 4 ⋄ (g y)≡1+x⍳y←⍺ rand ⍵}Domains

  x←0.01 0j0.01+.×¯450+?2 500000⍴900
  y←0.01 0j0.01+.×¯450+?2 100⍴900
  g←x∘⍳
  assert(g y)≡x⍳y
  assert 0.1>t←(5 timer'g y')÷5 timer'x⍳y'

  z←1
∇
</pre>

</td></tr></table>

<table width=520 align=center><tr><td>
<br><hr>
<p><font size=-1>
<script src="apldisplay.js" type="text/javascript"></script>
</font></p>

<table>
<tr><td><font size="-1">created: &nbsp;</font></td><td><font size="-1">2010-05-13 20:15</font></td></tr>
<tr><td><font size="-1">updated:</font></td><td><font size="-1">2012-08-08 14:50</font></td></tr>
</table>

</td></tr></table>
<br>
</body>
</html>