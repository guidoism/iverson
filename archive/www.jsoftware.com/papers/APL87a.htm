<html>
<head><meta http-equiv="content-type" content="text/html;charset=utf-8">
<title>APL87</title>
<link href="adoc.css" rel=stylesheet>
</head>

<body>

<br>

<table width=520 align=center><tr><td>

<p align=center><font size=+2>APL87</font><br><br>
<b>Kenneth E. Iverson<br>
I.P. Sharp Associates</b></p>



<br><hr>

<a name="intro"></a>

<p>I first began developing a formal language for use in teaching
in the graduate program in <i>Automatic Data Processing</i> established
by Professor Howard Aiken at Harvard in 1955. This
language, now known as APL, has since passed through several
phases, the main ones being documented in three publications
<acronym title="1. Iverson, K.E., A Programming Language, 
Wiley, New York, 1962; 2. Falkoff, A.D. and K.E. Iverson,
APL\360 User’s Manual, IBM Corporation, August 1968;
3. Falkoff, A.D. and K.E. Iverson, APLSV User’s Manual, 
IBM Corporation, 1973.">[1-3]</acronym>; 
my book <i>A Programming Language</i> in 1962, the
APL\360 manual in 1968, and the APLSV manual in 1975. 
The last two were co-authored with A.D. Falkoff.</p>

<p>The specifications of the language provided by these publications
were later supplemented by more philosophical studies
that discussed the design principles followed, and the major design
choices made. These include <i>The Design of APL</i>
<acronym title="Falkoff, A.D. and K.E. Iverson, 
The Design of APL, IBM Journal of Research and Development, 
Volume 17, Number 4, July 1973.">
[4]</acronym>, 
and the <i>Evolution of APL</i> 
<acronym title="Falkoff, A.D. and K.E. Iverson, 
The Evolution of APL, SIGPLAN Notices 13, ACM, August 1978.">
[5]</acronym>, 
by me and Falkoff, and 
<i>The Story of</i><tt> ○</tt>&nbsp;,<tt> </tt>by E.E. McDonnell 
<acronym title="McDonnell, E.E., The Story of ○, 
APL Quote-Quad, Vol. 8. No. 2, ACM, 
SIGPLAN Technical Committee on APL (STAPL), 
December, 1977, pages 48-54.">
[6]</acronym>.

<p>Because of implementations produced by various manufacturers,
and because of attempts to inject aspects of other
languages (as in APLGOL), many diverse lines of development
have been pursued. These have been largely reported in manuals,
in the proceedings of APL conferences, and in journals
such as <i>APL Quote-Quad</i> (Association for Computing Machinery),
and <i>Vector</i> (British Computing Society).</p>

<p>In 1978 I began a line of development which has been reported
largely in documents internal to IBM Corp. 
<acronym title="Iverson. K.E., Operators and Functions, 
IBM Research Report RC 7091, 1978.">[7]</acronym> 
and to I.P. Sharp Associates 
<acronym title="8. Bernecky, R.B., and K.E. Iverson, 
Operators and Enclosed Arrays, 1980 APL User’s Meeting, 
I.P. Sharp Associates;
9. Iverson. K.E., Rationalized APL, 
I.P. Sharp Associates, April 1983;
10. Iverson. K.E., A Dictionary of APL, 
I.P. Sharp Associates, July 1986.">[8-10]</acronym>, 
but also in APL conferences 
[<acronym title="Iverson, K.E., and A.T. Whitney, 
Practical Uses of a Model of APL, APL Quote Quad Vol 13, 
No. 1, 1982.">12</acronym>-<acronym title="Hodgkinson, R., 
APL Procedures (User-Defined Operators, Functions, 
and Token Strings), APL86 Conference Proceedings.">13</acronym>].
This work has culminated in <i>A Dictionary of APL</i>, 
scheduled to appear in an early issue of APL Quote-Quad 
<acronym title="Iverson, K.E., A Dictionary of APL, 
APL Quote-Quad. (To appear.)">[14]</acronym>; 
in what follows it will be referred to as “the dictionary”.</p>

<p>The present paper is a companion study in the manner of
<acronym title="4. Falkoff, A.D. and K.E. Iverson, 
The Design of APL, IBM Journal of Research and Development, 
Volume 17, Number 4, July 1973; 
5. Falkoff, A.D. and K.E. Iverson,
The Evolution of APL, SIGPLAN Notices 13, ACM, August 1978;
6. McDonnell, E.E., The Story of ○, APL Quote-Quad, 
Vol. 8. No. 2, ACM, SIGPLAN Technical Committee on APL (STAPL), 
December, 1977, pages 48-54.">[4-6]</acronym>. 
A preview of it was presented in November of last year
at an internal IBM conference that commemorated the 20th anniversary
of the initiation of the APL timesharing service within
IBM.</p>

<p>The major points to be discussed here include terminology,
the APL alphabet, word formation, parsing rules, mixed
functions, operators, and localization. In discussing decisions
made in the early days by me and colleagues in the APL group
in the T.J. Watson Research Center, (notably A.D. Falkoff and
L.M. Breed), I will use the term <i>we</i>; this usage is not meant to
imply their agreement with the current thinking of myself and
present colleagues at I.P. Sharp Associates as presented in the
dictionary.</p>

<p>Although there is no current implementation of the entire
dictionary, several implementations embody significant parts of
it, such as the application of operators to derived and user-defined
functions, and the production of &ldquo;mixed&rdquo; arrays by expressions
such as<tt> 3&nbsp;4&nbsp;5,&nbsp;'ABCD'</tt>&nbsp;.<tt> </tt>
Two implementations 
[<acronym title="Hodgkinson, R., APL Procedures 
(User-Defined Operators, Functions, and Token Strings), 
APL86 Conference Proceedings.">13</acronym>, 
<acronym title="SHARP APL/UX User’s Guide, 
I.P. Sharp Associates. (To appear.)">15</acronym>] 
are particularly close to the dictionary; 
the latter was used in all executed examples in this paper.
<br>&nbsp;</p>



<a name="a"></a>
<p><b>A. Terminology</b></p>

<p>Except for the use of brackets, branches, comments, and
diamonds (to be discussed and dismissed later), all of the parts
of speech of APL are illustrated in the following sentence that
defines factorial<tt> n</tt>&nbsp;:</p>

<pre>
   ×/+\(n←5)⍴1
</pre>

<p>Because of our familiarity with mathematics and computers, we
chose terms for them as shown on the left below, although the
analogous terms from English are more apt and revealing:</p>

<table>
<tr><td align=right>&nbsp; &nbsp; Variable or constant</td><td>&nbsp; &nbsp;</td>
 <td align=center><tt>n 5 1</tt></td><td>&nbsp; &nbsp;</td>
 <td>Pronoun or noun</td></tr>
<tr><td align=right>Function</td><td>&nbsp;</td>
 <td align=center><tt>× + ⍴</tt></td><td>&nbsp;</td>
 <td>Verb</td></tr>
<tr><td align=right>Operator</td><td>&nbsp;</td>
 <td align=center><tt>/ \</tt></td><td>&nbsp;</td>
 <td>Adverb</td></tr>
<tr><td align=right>&nbsp;</td><td>&nbsp;</td>
 <td align=center><tt>( )</tt></td><td>&nbsp;</td>
 <td>Punctuation</td></tr>
<tr><td align=right>Assignment</td><td>&nbsp;</td>
 <td align=center><tt>←</tt></td><td>&nbsp;</td>
 <td>Copula or verb-to-be</td></tr>
</table>

<p>Faults in the chosen terminology are easily seen: 
as in the illustrative sentence, there is commonly 
nothing <i>variable</i> in the
use of a name; though perhaps apt when first chosen, 
<i>function</i> no longer strongly suggests the sense 
of <i>to do</i> or <i>to perform</i>
implicit in its Latin root <i>fungi</i>; 
<i>operator</i>, in the appropriate sense
used by Heaviside is less commonly known than is the use as
a synonym for <i>function</i>; 
no part of speech is specified for the parentheses; 
and <i>assignment</i> suggests the underlying mechanics
of the computer rather than the straightforward notion of <i>is</i>,
which implies that<tt> n←5 </tt>be 
read as<tt> </tt>&ldquo;<tt>n </tt>is 5&rdquo;.</p>

<p>Because the term <i>programming</i> has come to be associated
primarily with the <i>execution</i> of algorithms, and because
APL is also used as an <i>analytic</i> notation, 
the &ldquo;P&rdquo; occurring in
the acronym APL has often been criticized as too restrictive.
However, it should be recalled that the analytical use of APL
was emphasized from the outset, as in the following sentence
from the preface of
<acronym title="Iverson, K.E., A Programming Language, 
Wiley, New York, 1962.">[l]</acronym>:

<blockquote>Chapter 7 (The Logical Calculus) emphasizes the formal
manipulability of the language and its utility in theoretical
work.</blockquote>

<p>Moreover, since the root meaning 
of the word &ldquo;program&rdquo; is
simply &ldquo;to write in advance&rdquo;, 
the acronym APL still seems to be appropriate. 
However, APL should be characterized as a
language that is both analytic and executable, as contrasted
with mathematical notation that is analytic but not executable,
and with most programming languages that are executable but
not analytic.</p>

<p>Terms used for primitive verbs should often be varied to suit
the context, as suggested in the table of standard names and
synonyms of the dictionary; in non-mathematical contexts. the
terms <i>list</i> and <i>table</i> should be preferred 
over <i>vector</i> and <i>matrix</i>.
The use of the phrase &ldquo;shared name&rdquo; in the dictionary implies
a substantive change, implying that sharing is not restricted to
the names of &ldquo;variables&rdquo; 
or &ldquo;nouns&rdquo; as in current APL systems.
<br>&nbsp;</p>



<a name="b"></a>
<p><b>B. Alphabet</b></p>

<p>In designing an APL alphabet for the 88-position typing
element of the Selectric-like IBM 2250 terminal, we adopted
the fruitful notion of composite characters formed by overstrikes.
Nevertheless, space remained 
for only one case of the English alphabet; 
we chose majuscules as more distinct from our other symbols, 
but chose to place them in the lower-case position,
anticipating more use of them than of other symbols.</p>

<p>Demand for a second case (first motivated by an attempt
by John Lawrence and his colleagues in SRA 
to use single-character identifiers on a tiny APL machine) 
led us to produce
one by overstriking the English alphabet by an underscore. 
This rather awkward and ugly solution proved so satisfactory 
that experienced APL users tend to reject the straightforward use
of miniscules and majuscules (in their normal lower and upper-case
positions) made possible by machines such as the IBM PC, 
and adopted in the form shown 
in <a href="APL87a.htm#xa">Appendix A</a>.</p>

<p>We designed the special APL characters by simply selecting
and modifying characters from various fonts; the appearance
could now be much improved by a professional re-design
as discussed by Tuttle 
<acronym title="Tuttle, J.K., Designing An APL Type Font, 
APL81 Conference Proceedings.">[16]</acronym>.</p>

<p>There is still a need to make APL usable 
from normal ASCII keyboards. 
Most attempts to fill this need are based upon
choosing names for the <i>functions</i> represented 
(commonly including distinct names for monadic and dyadic cases), 
and therefore lose the mnemonic associations designed into the
symbols themselves. An alternative solution, illustrated by the
table in <a href="APL87a.htm#xb">Appendix B</a> 
reproduced from the dictionary, 
approximates the appearance of the symbols themselves, 
and is therefore directly readable by anyone familiar 
with the proper symbols.
<br>&nbsp;</p>



<a name="c"></a>
<p><b>C. Word Formation</b></p>

<p>In natural languages, <i>word-formation</i> 
and <i>parsing</i> are viewed as distinct processes. 
In APL, as in most programming
languages, the two were lumped together in what was misnamed
&ldquo;syntax&rdquo; with the result 
that the essentially simple and
static rules of word-formation became somewhat confused. 
For example, the phrase<tt> 2e5 </tt>was treated as a single word, 
but in some implementations<tt> 2j5 </tt>
was treated as two words 
(the number<tt> 2 </tt>
and the function name<tt> j5</tt>&nbsp;).<tt> </tt> 
The introduction of complex numbers then caused problems, 
since it became essential to
treat<tt> 2j5 </tt>as a single word.</p>

<p>A simple and systematic word-formation rule, specified formally
and informally in the dictionary, leads to the introduction
of new classes of words that could be adopted for use as names
or constants. For example,<tt> 31416abc3 </tt>could denote the 
name<tt> abc3 </tt>in file<tt> 31416</tt>&nbsp;,<tt> </tt>
and<tt> 2r3 </tt>could denote the constant 
rational<tt> 2÷3</tt>&nbsp;.<tt> </tt>
Until so adopted, new words would yield value errors
when used.</p>

<p>The formal definition of word-formation given in the dictionary
is reproduced below:</p>

<pre>
words:f(c g(q∧¯1↓0,q←∨⌿3↑c)⍱q∧¯1↓0,q) 1⍤<,⍵⊣
          q←q∨≠\q←,¯1↑c←(<,⍵)∊⍤>P
    f:(0≠,⍴⍤>c)/c←(r⊥⍤>r←⌽¨>a)↓¨>(-a⊥⍤>a←⍵=¨>' ')↓¨> ⍵
    g:⍵\(q⍲¯1↓0,q←⍵/(∨⌿⍺[1 3;])∨(⍺[2;])∧1↓(∨⌿⍺[1 2;]),0
</pre>

<p>The parameter<tt> P </tt>is a 5-element list of boxed lists consisting
of the quad<tt> </tt>(<tt>⎕</tt>)<tt> </tt>and 
the native alphabet, the
macron<tt> </tt>(<tt>¯</tt>)<tt> </tt>and 
the decimal digits, the period<tt> </tt>(<tt>.</tt>),<tt> </tt>the
space, and the quote<tt> </tt>(<tt>'</tt>).
<br>&nbsp;</p>



<a name="d"></a>
<p><b>D. Parsing</b></p>

<p>The parsing rules of APL were complicated significantly by
constructs such as mixed output, bracket-semicolon indexing,
comments, and diamonds, which do not obey the normal rules
for the five parts of speech discussed in <a href="APL87a.htm#a">section A</a>. 
I will first
discuss the parsing rules for the five parts of speech and then
discuss the reasons for introducing the anomalous constructs,
and the facilities proposed to supersede them.</p>

<p>Excluding the anomalous constructs cited, the parsing rules
of early APL were simply stated. They are adopted in the dictionary
with the added proviso that an adverb applies to the
result of the entire verb phrase that precedes it.</p>

<p>The corresponding formal rules (also given in the dictionary)
concern the selection from the first four elements of the
execution stack of a phrase to be executed 
and replaced by its result. 
The process is controlled by an 8 by 4 table of cases.</p>

<p>The indexing we desired required an index list of arbitrary
ranks to select along successive axes. Since the language as
then conceived embraced no such entity, we chose to use a
pair of enclosing symbols (the brackets) to indicate that the
enclosed phrase was to be treated as a single entity under
somewhat different rules than normal. The later introduction of
the &ldquo;enclose&rdquo; or &ldquo;box&rdquo; function 
has made such lists a part of
the language and provided the basis for an indexing function
such as the &ldquo;from&rdquo; function defined in the dictionary; 
it follows
normal rules and provides indexing that is more convenient and
general than that provided by the older form.</p>

<p>For example if<tt> i←&lt;¨&gt;⍳1↑⍴A </tt>
and<tt> j←&lt;¨&gt;i</tt>&nbsp;,<tt> </tt>then<tt> i{A </tt>
selects each of the major cells 
of<tt> A</tt>&nbsp;,<tt> </tt>and<tt> j(A </tt>selects the 
&ldquo;complementary&rdquo; cells. 
Consequently, the determinant function (the
monadic case of<tt> -.× </tt>as defined in the dictionary) 
can be defined recursively as:</p>

<pre>
   DET: (0{⍵)-.×DET j{⍵: 0=⍴j←&lt;¨&gt;&lt;¨&gt;1↓⍳1↑⍴⍵ : ''⍴⍵
</pre>

<p>The use of<tt> ⍝ </tt>and<tt> ⋄ </tt>can be 
superseded by the <i>lev</i> and <i>dex</i>
functions proposed long ago by Trenchard More, and adopted
in the dictionary as <i>left</i> and <i>right</i>, 
denoted by<tt> ⊣ </tt>and<tt> ⊢</tt>&nbsp;.<tt> </tt> 
The following discussion is taken 
from Section E of the dictionary:</p>

<blockquote>
<p>Anything following a comment 
symbol<tt> </tt>(<tt>⍝</tt>)<tt> </tt>in an expression
is ignored in its execution. Comment can
be similarly added to the end of a line by 
appending<tt> ⊣'This is a comment'</tt>&nbsp;,<tt> </tt>
but can also be inserted
anywhere in a line. Thus:</p>

<pre>
   ⍺←⍵× ⊢'count to n'⊢  ⍳n←'length of r'qltack ⍴r
</pre>

<p>Expressions using the statement 
separator<tt> </tt>(<tt>⋄</tt>)<tt> </tt>can
be mimicked by expressions using the function left, the
primary difference is that the separation imposed 
by<tt> ⊣ </tt>follows the normal rules for order of execution. 
For example, either of the following expressions will determine
the coefficients<tt> c </tt>of a polynomial equivalent to a
polynomial with roots<tt> r</tt>&nbsp;:</p>

<pre>
   n←⍴r⋄b←n⍴2⋄t←b⊤⍳×/b⋄s←(⍳1+n)∘.=+⌿t⋄p←r×.*t⋄c←s+.×p 
   c←s+.×p⊣p←r×.*t⊣s←(⍳1+n)∘.=+⌿t⊣t←b⊤⍳×/b⊣b←n⍴2⊣n←⍴r
</pre>

<p>Since<tt> ⊣ </tt>is a normal function with simple properties,
the phrase<tt> b⊣b </tt>can be simplified 
to<tt> b</tt>&nbsp;,<tt> </tt>and (since<tt> p </tt>is
used nowhere else) the phrase<tt> p⊣p← </tt>can be omitted
entirely, allowing the second expression to be simplified
to:</p>

<pre>
   c←s+.×r×.*t⊣s←(⍳1+n)∘.=+⌿t⊣t←b⊤⍳×/b←n⍴2⊣n←⍴r
</pre>

<p>It should also be remarked that left can be used
to avoid the use of parentheses to any desired degree,
as in<tt> s*.5⊣s←+/a*2</tt>&nbsp;,<tt> </tt> 
and that the symbol<tt> ⊣ </tt>may then
be read as &ldquo;where&rdquo; in the sense used in mathematics;
that is, &ldquo;the square root of<tt> s</tt>&nbsp;,<tt> </tt> 
where<tt> s </tt>is the sum of the
squares of<tt> a</tt>&nbsp;&rdquo;.
<br>&nbsp;</p>
</blockquote>



<a name="e"></a>
<p><b>E. Mixed Functions</b></p>

<p>In designing the so-called <i>mixed</i> functions, 
we attempted to achieve the same sort of systematic 
extension to higher-rank arrays implicit in the scalar functions. 
Unfortunately, we did not
hit upon a unifying principle for such extensions.</p>

<p>The notion of verb rank provides such a principle: 
each verb has a specified rank, 
and a verb of rank<tt> k </tt>applies to each of 
the<tt> k</tt>-<i>cells</i> of an argument<tt> a </tt>
(where the<tt> k</tt>-cells of<tt> a </tt>are the cells of
shape<tt> (-k)↑⍴a</tt>&nbsp;),<tt> </tt>producing 
a result of shape<tt> ((-k)↓⍴a),s</tt>&nbsp;,<tt> </tt>
where<tt> s </tt>is the common shape of the results of applying the
function to each of the<tt> k</tt>-cells. 
Consequently, a function need
be defined only on its<tt> k</tt>-cell, 
a circumstance that contributed
greatly to the brevity of the dictionary. 
For example, reversal can be defined by merely stating 
its rank (1) and defining it for the simple case of a vector 
(as by the example<tt> ⌽'abc' ←→ 'cba'</tt>&nbsp;,<tt> </tt>
since all functions extend to higher rank in the same
simple manner.</p>

<p>Specification of the rank of a function is also fruitful. 
For example:</p>

<pre>
   a←2 3 4 ⍴ ⍳ 24
   ,⍤2 a
 0  1  2  3  4  5  6  7  8  9 10 11
12 13 14 15 16 17 18 19 20 21 22 23
   0 1 2 ⌽⍤0 1 'abc'
abc
bca
cab

</pre>



<a name="f"></a>
<p><b>F. Operators</b></p>

<p>Having hit upon the notion of operators, we were aware of
the possibility of introducing such useful cases as composition,
dual, and derivative; but other matters were more pressing and
their introduction has only begun relatively recently.</p>

<p>One opportunity we failed to recognize was to produce a
defined function by applying an operator rather than a 
function<tt> </tt>(<tt>⎕fx</tt>)<tt> </tt>to 
the canonical representation. Such an operator is defined in 
<acronym title="Iverson, K.E., A Dictionary of APL, 
APL Quote-Quad. (To appear).">[14]</acronym>; 
briefly,<tt> m∇d </tt>produces an unnamed ambivalent
function (with the monadic and dyadic cases being determined
independently by the vector-of-vectors 
representations<tt> m </tt>and<tt> d</tt>&nbsp;).<tt> </tt>
The unnamed function may be applied directly, 
as in<tt> m∇d&nbsp;a</tt>&nbsp;,<tt> </tt>or assigned a name, 
as in<tt> f←m∇d </tt>or<tt> (f←m∇d) a</tt>&nbsp;.</p>

<p>To allow for recursive definition in an unnamed function,
a symbol is provided for self-reference in the representation.
This scheme makes possible safe and simple reassignment
of the name of a recursively defined function, something not
possible in the case of a function defined 
by<tt> ⎕fx</tt>&nbsp;.<tt> </tt> 
A symbol is also provided for the instruction counter, 
so that branching is
indicated by a normal use of assignment.
<br>&nbsp;</p>



<a name="g"></a>
<p><b>G. Localization and Assignment</b></p>

<p>In designing a canonical representation for functions, we
chose to specify localizations by a list of names in the header.
Users soon suggested a converse scheme of listing the globals
and localizing all names not listed. 
Although this scheme offered some convenience, 
we rejected it on the basis that the names 
of all supporting defined functions used would have to
be listed in the header, 
introducing an unnecessary distinction between the uses 
of primitives and defined functions and therefore, 
to some degree, discouraging the use of structured programming.</p>

<p>About 1970, Orth and I adopted 
[<acronym title="Orth. D.L., 
Calculus in a New Key, APL Press, 1976.">17</acronym>, 
<acronym title="Iverson. K.E., 
Elementary Analysis, APL Press, 1976.">18</acronym>] 
a scheme called direct definition, in which a name 
was localized if it appeared to
the left of an assignment arrow. 
This was later refined to provide control of localization: 
a name was local if it occurred <i>immediately</i> 
to the left of<tt> ←</tt>&nbsp;,<tt> </tt>
so that<tt> a←3 </tt>localized<tt> a</tt>&nbsp;,<tt> </tt>
but<tt> a&nbsp;←3 </tt>did not.</p>

<p>The scheme in the dictionary differs in two significant ways:</p>

<ul>
<li>Localization is <i>dynamic</i>, the localization occurring only
when assignment actually occurs in execution. 
This permits access to the global value of a name which is later
localized, as in<tt> n←n</tt>&nbsp;.</li>
<li>The symbol <img src="imag/local.jpg"> is used to denote assignment that does not
actuate localization.</li>
</ul>

<p>Although we had the means to represent an array of names
by a character array, 
it did not occur to us to allow assignment of
parts of a result to each ot a collection of names. 
In more recent
modelling of the execution process 
<acronym title="Iverson, K.E., and A.T. Whitney, 
Practical Uses of a Model of APL, 
APL Quote Quad Vol 13, No. 1, 1982.">[12]</acronym>, 
it became evident that the name<tt> n </tt>in the 
expression<tt> n←3×m </tt>
was not evaluated before
being &ldquo;transferred to the execution stack&rdquo;, 
but that parentheses could be used to force such evaluation, 
as in the following example:</p>

<pre>
   n←'t'
   (n)←3
   t
3
</pre>

<p>In the dictionary this notion is adopted in a manner that also
exploits the use of arrays of boxed names.
<br>&nbsp;</p>



<a name="ref"></a>
<p><b>References</b></p>

<table>
<tr><td valign=top>1.</td><td>&nbsp;</td><td>
 Iverson, K.E., 
 <a target=_parent href="http://www.jsoftware.com/papers/APL.htm"><i>A Programming Language</i></a>, 
 Wiley, New York, 1962.</td></tr>
<tr><td valign=top>2.</td><td>&nbsp;</td><td>
 Falkoff, A.D. and K.E. Iverson, 
 <a target=_parent href="http://keiapl.org/archive/APL360_UsersMan_Aug1968.pdf"><i>APL\360 User’s Manual</i></a>,
 IBM Corporation, August 1968.</td></tr>
<tr><td valign=top>3.</td><td>&nbsp;</td><td>
 Falkoff, A.D. and K.E. Iverson, <i>APLSV User’s Manual</i>, 
 IBM Corporation, 1973.</td></tr>
<tr><td valign=top>4.</td><td>&nbsp;</td><td>
 Falkoff, A.D. and K.E. Iverson, 
 <a target=_parent href="http://www.jsoftware.com/papers/APLDesign.htm"><i>The Design of APL</i></a>, 
 A Source Book in APL, APL Press, 1981.</td></tr>
<tr><td valign=top>5.</td><td>&nbsp;</td><td>
 Falkoff, A.D. and K.E. Iverson, 
 <a target=_parent href="http://www.jsoftware.com/papers/APLEvol.htm"><i>The Evolution of APL</i></a>, 
 SIGPLAN Notices 13, ACM, August 1978.</td></tr>
<tr><td valign=top>6.</td><td>&nbsp;</td><td>
 McDonnell, E.E., 
 <a target=_parent href="http://www.jsoftware.com/papers/eem/storyofo.htm"><i>The Story of</i><tt> ○</tt></a>&nbsp;,<tt> </tt>
 APL Quote-Quad, Vol. 8. No. 2, ACM, SIGPLAN Technical Committee on APL
 (STAPL), December, 1977, pages 48-54.</td></tr>
<tr><td valign=top>7.</td><td>&nbsp;</td><td>
 Iverson. K.E., 
 <a target=_parent href="http://www.jsoftware.com/papers/opfns.htm"><i>Operators and Functions</i></a>, 
 IBM Research Report RC 7091, 1978.</td></tr>
<tr><td valign=top>8.</td><td>&nbsp;</td><td>
 Bernecky, R.B., and K.E. Iverson, 
 <a target=_parent href="http://www.jsoftware.com/papers/opea.htm"><i>Operators and Enclosed Arrays</i></a>, 
 1980 APL User’s Meeting, I.P. Sharp Associates.</td></tr>
<tr><td valign=top>9.</td><td>&nbsp;</td><td>
 Iverson. K.E., 
 <a target=_parent href="http://www.jsoftware.com/papers/RationalizedAPL.htm"><i>Rationalized APL</i></a>, 
 I.P. Sharp Associates, April 1983.</td></tr>
<tr><td valign=top>10.</td><td>&nbsp;</td><td>
 Iverson. K.E., <i>A Dictionary of APL</i>, I.P. Sharp Associates,
 July 1986.</td></tr>
<tr><td valign=top>11.</td><td>&nbsp;</td><td>
 Iverson, K.E., 
 <a target=_parent href="http://www.jsoftware.com/papers/APLSyntaxSemantics.htm"><i>APL Syntax and Semantics</i></a>, 
 APL83 Conference Proceedings.</td></tr>
<tr><td valign=top>12.</td><td>&nbsp;</td><td>
 Iverson, K.E., and A.T. Whitney, 
 <a target=_parent href="http://www.jsoftware.com/papers/APLModel.htm"><i>Practical Uses of a Model of APL</i></a>, 
 APL Quote Quad Vol 13, No. 1, 1982.</td></tr>
<tr><td valign=top>13.</td><td>&nbsp;</td><td>
 Hodgkinson, R., <i>APL Procedures (User-Defined Operators,
 Functions, and Token Strings)</i>, 
 APL86 Conference Proceedings.</td></tr>
<tr><td valign=top>14.</td><td>&nbsp;</td><td>
 Iverson, K.E., 
 <a target=_parent href="http://www.jsoftware.com/papers/APLDictionary.htm"<i>A Dictionary of APL</i></a>, APL Quote-Quad. (To
 appear).</td></tr>
<tr><td valign=top>15.</td><td>&nbsp;</td><td>
 <i>SHARP APL/UX User’s Guide</i>, I.P. Sharp Associates. 
 (To appear).</td></tr>
<tr><td valign=top>16.</td><td>&nbsp;</td><td>
 Tuttle, J.K., <i>Designing An APL Type Font</i>, 
 APL81 Conference Proceedings.</td></tr>
<tr><td valign=top>17.</td><td>&nbsp;</td><td>
 Orth. D.L., <i>Calculus in a New Key</i>, 
 APL Press, 1976.</td></tr>
<tr><td valign=top>18.</td><td>&nbsp;</td><td>
 Iverson. K.E., 
 <a target=_parent href="http://www.jsoftware.com/papers/DirectDef.htm"><i>Elementary Analysis</i></a>, 
 APL Press, 1976.</td></tr>
</table>
<br>



<a name="xa"></a>
<p><b>Appendix A. SHARP APL/PC Main Keyboard</b></p>

<table>
<tr><td colspan=3><table border=1 cellspacing=0 cellpadding=2><tr>
<td><tt>! &nbsp;¨   <br>1</tt></td>
<td><tt>@ &nbsp;¯   <br>2</tt></td>
<td><tt># &nbsp;&lt;<br>3</tt></td>
<td><tt>$ &nbsp;≤   <br>4</tt></td>
<td><tt>% &nbsp;=   <br>5</tt></td>
<td><tt>^ &nbsp;≥   <br>6</tt></td>
<td><tt>& &nbsp;&gt;<br>7</tt></td>
<td><tt>* &nbsp;≠   <br>8</tt></td>
<td><tt>( &nbsp;∨   <br>9</tt></td>
<td><tt>) &nbsp;∧   <br>0</tt></td>
<td><tt>_ &nbsp;×   <br>-</tt></td>
<td><tt>+ &nbsp;÷   <br>=</tt></td>
</tr></table></tr>
<tr><td>&nbsp; &nbsp;</td><td colspan=2><table border=1 cellspacing=0 cellpadding=2><tr>
<td><tt>Q &nbsp;?   <br>q</tt></td>
<td><tt>W &nbsp;⍵   <br>w</tt></td>
<td><tt>E &nbsp;∊   <br>e</tt></td>
<td><tt>R &nbsp;⍴   <br>r</tt></td>
<td><tt>T &nbsp;~   <br>t</tt></td>
<td><tt>Y &nbsp;↑   <br>y</tt></td>
<td><tt>U &nbsp;↓   <br>u</tt></td>
<td><tt>I &nbsp;⍳   <br>i</tt></td>
<td><tt>O &nbsp;○   <br>o</tt></td>
<td><tt>P &nbsp;*   <br>p</tt></td>
<td><tt>{ &nbsp;←   <br>[</tt></td>
<td><tt>} &nbsp;→   <br>]</tt></td>
</tr></table></tr>
<tr><td>&nbsp; &nbsp;</td><td>&nbsp; &nbsp;</td><td><table border=1 cellspacing=0 cellpadding=2><tr>
<td><tt>A &nbsp;⍺   <br>a</tt></td>
<td><tt>S &nbsp;⌈   <br>s</tt></td>
<td><tt>D &nbsp;⌊   <br>d</tt></td>
<td><tt>F &nbsp;_   <br>f</tt></td>
<td><tt>G &nbsp;∇   <br>g</tt></td>
<td><tt>H &nbsp;∆   <br>h</tt></td>
<td><tt>J &nbsp;∘   <br>j</tt></td>
<td><tt>K &nbsp;'   <br>k</tt></td>
<td><tt>L &nbsp;⎕   <br>l</tt></td>
<td><tt>: &nbsp;⊢   <br>;</tt></td>
<td><tt>" &nbsp;⊣   <br>'</tt></td>
<td><tt>~ &nbsp;⋄   <br>`</tt></td>
</tr></table></tr>
<tr><td>&nbsp; &nbsp;</td><td colspan=2><table border=1 cellspacing=0 cellpadding=2><tr>
<td><tt>| &nbsp;⍝   <br>\</tt></td>
<td><tt>Z &nbsp;⊂   <br>z</tt></td>
<td><tt>X &nbsp;⊃   <br>x</tt></td>
<td><tt>C &nbsp;∩   <br>c</tt></td>
<td><tt>V &nbsp;∪   <br>v</tt></td>
<td><tt>B &nbsp;⊥   <br>b</tt></td>
<td><tt>N &nbsp;⊤   <br>n</tt></td>
<td><tt>M &nbsp;|   <br>m</tt></td>
<td><tt>< &nbsp;⍞   <br>,</tt></td>
<td><tt>> &nbsp;⍎   <br>.</tt></td>
<td><tt>? &nbsp;⍕   <br>/</tt></td>
</tr></table></tr>
</table>
<br>



<a name="xb"></a>
<p><b>Appendix B. APL Alphabet and ASCII Transliteration</b></p>

<table>
<tr><td><table>
<tr><td><tt>↑   </tt></td><td>&nbsp;</td><td>Pike         </td><td>&nbsp;</td><td align=right><tt>@I^   </tt></td></tr>
<tr><td><tt>→   </tt></td><td>&nbsp;</td><td>&nbsp;       </td><td>&nbsp;</td><td align=right><tt>@->   </tt></td></tr>
<tr><td><tt>↓   </tt></td><td>&nbsp;</td><td>Spike        </td><td>&nbsp;</td><td align=right><tt>@Iv   </tt></td></tr>
<tr><td><tt>←   </tt></td><td>&nbsp;</td><td>&nbsp;       </td><td>&nbsp;</td><td align=right><tt>@<-   </tt></td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td><tt>⊤   </tt></td><td>&nbsp;</td><td>&nbsp;       </td><td>&nbsp;</td><td align=right><tt>@T    </tt></td></tr>
<tr><td><tt>⊣   </tt></td><td>&nbsp;</td><td>&nbsp;       </td><td>&nbsp;</td><td align=right><tt>@-I   </tt></td></tr>
<tr><td><tt>⊥   </tt></td><td>&nbsp;</td><td>Base         </td><td>&nbsp;</td><td align=right><tt>@@T   </tt></td></tr>
<tr><td><tt>⊢   </tt></td><td>&nbsp;</td><td>&nbsp;       </td><td>&nbsp;</td><td align=right><tt>@I-   </tt></td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td><tt>∪   </tt></td><td>&nbsp;</td><td>Cup          </td><td>&nbsp;</td><td align=right><tt>@u    </tt></td></tr>
<tr><td><tt>⊂   </tt></td><td>&nbsp;</td><td>&nbsp;       </td><td>&nbsp;</td><td align=right><tt>@c    </tt></td></tr>
<tr><td><tt>∩   </tt></td><td>&nbsp;</td><td>Cap          </td><td>&nbsp;</td><td align=right><tt>@n    </tt></td></tr>
<tr><td><tt>⊃   </tt></td><td>&nbsp;</td><td>&nbsp;       </td><td>&nbsp;</td><td align=right><tt>@@c   </tt></td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td><tt>∨   </tt></td><td>&nbsp;</td><td>&nbsp;       </td><td>&nbsp;</td><td align=right><tt>@v    </tt></td></tr>
<tr><td><tt>&lt;</tt></td><td>&nbsp;</td><td>&nbsp;       </td><td>&nbsp;</td><td align=right><tt>&lt;  </tt></td></tr>
<tr><td><tt>∧   </tt></td><td>&nbsp;</td><td>Caret        </td><td>&nbsp;</td><td align=right><tt>∧     </tt></td></tr>
<tr><td><tt>&gt;</tt></td><td>&nbsp;</td><td>&nbsp;       </td><td>&nbsp;</td><td align=right><tt>&gt;  </tt></td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td><tt>≥   </tt></td><td>&nbsp;</td><td>&nbsp;       </td><td>&nbsp;</td><td align=right><tt>@&gt;_</tt></td></tr>
<tr><td><tt>≤   </tt></td><td>&nbsp;</td><td>&nbsp;       </td><td>&nbsp;</td><td align=right><tt>@&lt;_</tt></td></tr>
<tr><td><tt>[   </tt></td><td>&nbsp;</td><td>Left Bracket </td><td>&nbsp;</td><td align=right><tt>[     </tt></td></tr>
<tr><td><tt>]   </tt></td><td>&nbsp;</td><td>Right Bracket</td><td>&nbsp;</td><td align=right><tt>]     </tt></td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td><tt>⌊   </tt></td><td>&nbsp;</td><td>Downstile    </td><td>&nbsp;</td><td align=right><tt>@L    </tt></td></tr>
<tr><td><tt>⌈   </tt></td><td>&nbsp;</td><td>Upstile      </td><td>&nbsp;</td><td align=right><tt>@@L   </tt></td></tr>
<tr><td><tt>|   </tt></td><td>&nbsp;</td><td>Stile        </td><td>&nbsp;</td><td align=right><tt>@I    </tt></td></tr>
<tr><td><tt>/   </tt></td><td>&nbsp;</td><td>Slash        </td><td>&nbsp;</td><td align=right><tt>/     </tt></td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td><tt>-   </tt></td><td>&nbsp;</td><td>Bar          </td><td>&nbsp;</td><td align=right><tt>-     </tt></td></tr>
<tr><td><tt>\   </tt></td><td>&nbsp;</td><td>&nbsp;       </td><td>&nbsp;</td><td align=right><tt>\     </tt></td></tr>
<tr><td><tt>+   </tt></td><td>&nbsp;</td><td>Greek Cross  </td><td>&nbsp;</td><td align=right><tt>+     </tt></td></tr>
<tr><td><tt>×   </tt></td><td>&nbsp;</td><td>Cross        </td><td>&nbsp;</td><td align=right><tt>@x    </tt></td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td><tt>=   </tt></td><td>&nbsp;</td><td>&nbsp;       </td><td>&nbsp;</td><td align=right><tt>=     </tt></td></tr>
<tr><td><tt>≠   </tt></td><td>&nbsp;</td><td>&nbsp;       </td><td>&nbsp;</td><td align=right><tt>@=/   </tt></td></tr>
<tr><td><tt>*   </tt></td><td>&nbsp;</td><td>Star         </td><td>&nbsp;</td><td align=right><tt>*     </tt></td></tr>
<tr><td><tt>≡   </tt></td><td>&nbsp;</td><td>&nbsp;       </td><td>&nbsp;</td><td align=right><tt>@=_   </tt></td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td><tt>,   </tt></td><td>&nbsp;</td><td>Comma        </td><td>&nbsp;</td><td align=right><tt>,     </tt></td></tr>
<tr><td><tt>;   </tt></td><td>&nbsp;</td><td>Semicolon    </td><td>&nbsp;</td><td align=right><tt>;     </tt></td></tr>
<tr><td><tt>.   </tt></td><td>&nbsp;</td><td>Period       </td><td>&nbsp;</td><td align=right><tt>.     </tt></td></tr>
<tr><td><tt>:   </tt></td><td>&nbsp;</td><td>Colon        </td><td>&nbsp;</td><td align=right><tt>:     </tt></td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td><tt>?   </tt></td><td>&nbsp;</td><td>Query        </td><td>&nbsp;</td><td align=right><tt>?     </tt></td></tr>
<tr><td><tt>'   </tt></td><td>&nbsp;</td><td>Quote        </td><td>&nbsp;</td><td align=right><tt>'     </tt></td></tr>
<tr><td><tt>¨   </tt></td><td>&nbsp;</td><td>Dieresis     </td><td>&nbsp;</td><td align=right><tt>"     </tt></td></tr>
<tr><td><tt>!   </tt></td><td>&nbsp;</td><td>Exclamation  </td><td>&nbsp;</td><td align=right><tt>!     </tt></td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td><tt>&nbsp;</tt></td></tr>
</table></td><td><tt>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</tt></td><td><table valign=top>
<tr><td><tt>¯   </tt></td><td>&nbsp;</td><td>Macron       </td><td>&nbsp;</td><td align=right><tt>@@_   </tt></td></tr>
<tr><td><tt>~   </tt></td><td>&nbsp;</td><td>Tilde        </td><td>&nbsp;</td><td align=right><tt>~     </tt></td></tr>
<tr><td><tt>$   </tt></td><td>&nbsp;</td><td>Dollar       </td><td>&nbsp;</td><td align=right><tt>$     </tt></td></tr>
<tr><td><tt>_   </tt></td><td>&nbsp;</td><td>Underscore   </td><td>&nbsp;</td><td align=right><tt>_     </tt></td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td><tt>(   </tt></td><td>&nbsp;</td><td>Left Paren   </td><td>&nbsp;</td><td align=right><tt>(     </tt></td></tr>
<tr><td><tt>)   </tt></td><td>&nbsp;</td><td>Right Paren  </td><td>&nbsp;</td><td align=right><tt>)     </tt></td></tr>
<tr><td><tt>{   </tt></td><td>&nbsp;</td><td>Left Brace   </td><td>&nbsp;</td><td align=right><tt>{     </tt></td></tr>
<tr><td><tt>}   </tt></td><td>&nbsp;</td><td>Right Brace  </td><td>&nbsp;</td><td align=right><tt>}     </tt></td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td><tt>⋄   </tt></td><td>&nbsp;</td><td>Diamond      </td><td>&nbsp;</td><td align=right><tt>@&lt;&gt;</tt></td></tr>
<tr><td><tt>∘   </tt></td><td>&nbsp;</td><td>Jot          </td><td>&nbsp;</td><td align=right><tt>@o    </tt></td></tr>
<tr><td><tt>○   </tt></td><td>&nbsp;</td><td>Circle       </td><td>&nbsp;</td><td align=right><tt>@O    </tt></td></tr>
<tr><td><tt>÷   </tt></td><td>&nbsp;</td><td>&nbsp;       </td><td>&nbsp;</td><td align=right><tt>@-:   </tt></td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td><tt>⍺   </tt></td><td>&nbsp;</td><td>Alpha        </td><td>&nbsp;</td><td align=right><tt>@a    </tt></td></tr>
<tr><td><tt>∊   </tt></td><td>&nbsp;</td><td>Epsilon      </td><td>&nbsp;</td><td align=right><tt>@e    </tt></td></tr>
<tr><td><tt>⍳   </tt></td><td>&nbsp;</td><td>Iota         </td><td>&nbsp;</td><td align=right><tt>@i    </tt></td></tr>
<tr><td><tt>⍴   </tt></td><td>&nbsp;</td><td>Rho          </td><td>&nbsp;</td><td align=right><tt>@r    </tt></td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td><tt>⍵   </tt></td><td>&nbsp;</td><td>Omega        </td><td>&nbsp;</td><td align=right><tt>@w    </tt></td></tr>
<tr><td><tt>∆   </tt></td><td>&nbsp;</td><td>Delta        </td><td>&nbsp;</td><td align=right><tt>@D    </tt></td></tr>
<tr><td><tt>∇   </tt></td><td>&nbsp;</td><td>Del          </td><td>&nbsp;</td><td align=right><tt>@@D   </tt></td></tr>
<tr><td><tt>⎕   </tt></td><td>&nbsp;</td><td>Quad         </td><td>&nbsp;</td><td align=right><tt>@[]   </tt></td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td><tt>⍝   </tt></td><td>&nbsp;</td><td>Lamp         </td><td>&nbsp;</td><td align=right><tt>@no   </tt></td></tr>
<tr><td><tt>⌹   </tt></td><td>&nbsp;</td><td>Domino       </td><td>&nbsp;</td><td align=right><tt>@[-:] </tt></td></tr>
<tr><td><tt>⍤   </tt></td><td>&nbsp;</td><td>Paw          </td><td>&nbsp;</td><td align=right><tt>@o"   </tt></td></tr>
<tr><td><tt>⍥   </tt></td><td>&nbsp;</td><td>Hoof         </td><td>&nbsp;</td><td align=right><tt>@O"   </tt></td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td><tt>⌽   </tt></td><td>&nbsp;</td><td>&nbsp;       </td><td>&nbsp;</td><td align=right><tt>@OI   </tt></td></tr>
<tr><td><tt>⊖   </tt></td><td>&nbsp;</td><td>&nbsp;       </td><td>&nbsp;</td><td align=right><tt>@O-   </tt></td></tr>
<tr><td><tt>⍉   </tt></td><td>&nbsp;</td><td>&nbsp;       </td><td>&nbsp;</td><td align=right><tt>@O\   </tt></td></tr>
<tr><td><tt>⍟   </tt></td><td>&nbsp;</td><td>&nbsp;       </td><td>&nbsp;</td><td align=right><tt>@O*   </tt></td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td><tt>⍱   </tt></td><td>&nbsp;</td><td>&nbsp;       </td><td>&nbsp;</td><td align=right><tt>@v~   </tt></td></tr>
<tr><td><tt>⍲   </tt></td><td>&nbsp;</td><td>&nbsp;       </td><td>&nbsp;</td><td align=right><tt>@^~   </tt></td></tr>
<tr><td><tt>⍎   </tt></td><td>&nbsp;</td><td>Tack         </td><td>&nbsp;</td><td align=right><tt>@@To  </tt></td></tr>
<tr><td><tt>⍕   </tt></td><td>&nbsp;</td><td>Thorn        </td><td>&nbsp;</td><td align=right><tt>@To   </tt></td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td><tt>⍋   </tt></td><td>&nbsp;</td><td>Pine         </td><td>&nbsp;</td><td align=right><tt>@DI   </tt></td></tr>
<tr><td><tt>⍒   </tt></td><td>&nbsp;</td><td>Spine        </td><td>&nbsp;</td><td align=right><tt>@@DI  </tt></td></tr>
<tr><td><tt>⌿   </tt></td><td>&nbsp;</td><td>&nbsp;       </td><td>&nbsp;</td><td align=right><tt>@/-   </tt></td></tr>
<tr><td><tt>⍀   </tt></td><td>&nbsp;</td><td>&nbsp;       </td><td>&nbsp;</td><td align=right><tt>@\-   </tt></td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td><tt>⍫   </tt></td><td>&nbsp;</td><td>&nbsp;       </td><td>&nbsp;</td><td align=right><tt>@@D~  </tt></td></tr>
<tr><td><tt>⍞   </tt></td><td>&nbsp;</td><td>&nbsp;       </td><td>&nbsp;</td><td align=right><tt>@[']  </tt></td></tr>
<tr><td><tt>⍪   </tt></td><td>&nbsp;</td><td>&nbsp;       </td><td>&nbsp;</td><td align=right><tt>@,-   </tt></td></tr>
<tr><td><tt><img src="imag/local.jpg"></tt></td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td align=right><tt>@&lt;-&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td><tt><img src="imag/til.jpg"></tt></td><td>&nbsp;</td><td>Til</td><td>&nbsp;</td><td align=right><tt>@c"</tt></td></tr>
</table></td></tr>
</table>

<p>The ASCII 
<acronym title="Falkoff, A.D. and K.E. Iverson, 
The Evolution of APL, SIGPLAN Notices 13,
ACM, August 1978.">[5]</acronym> 
transliteration scheme in the last column is based upon
<i>similarity</i>, English-Greek <i>correspondences</i>, 
and <i>variants</i>, denoted by
an extra delimiter<tt> </tt>(<tt>@</tt>)<tt> </tt>and 
varying by rotation about a horizontal or vertical axis. 
Each transliteration begins with a delimeter and ends
with a space.</p>

<p align=center>Table 1</p>


<br><hr>

<a name="err"></a>
<p align=center><font size=+2>Errata</font></p>

<table>
<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
In the Introduction, it should say &ldquo;<i>The Evolution of APL</i>&rdquo;
instead of &ldquo;the <i>Evolution of APL</i>&rdquo;.
 </td></tr>
<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
In Section B, in the second paragraph, it should
say &ldquo;lower- and upper-case&rdquo; instead of
&ldquo;lower and upper-case&rdquo;. 
 </td></tr>
<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
In Section C, the<tt> words </tt>and associated functions 
have several problems.  First, the function<tt> g </tt>
requires index origin 1 to work, but the example 
in Section E implies that the index origin is 0.
Moreover, numeric vector constants are not supported,
and the treatment of the period is problematic 
(e.g.<tt> plus.times </tt>is incorrectly considered 
to be a single word).
 </td></tr>
<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
In Section D, the first displayed example
from the dictionary should end with<tt> ⊢&nbsp;⍴r </tt>
instead of<tt> qltack&nbsp;⍴r</tt>&nbsp;. 
 </td></tr>
<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
In Section D, the expressions for computing the 
coefficients<tt> c </tt>of a polynomial with 
roots<tt> r </tt>should use<tt> -r </tt>
instead of<tt> r </tt>in the inner products;<tt> </tt>that is,<tt> (-r)×.*t </tt>instead
of<tt> r×.*t</tt>&nbsp;. 
 </td></tr>
<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
In Section E, in the second paragraph, the reversal 
example is missing a right parenthesis. 
 </td></tr>
<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
Reference 4, <i>The Design of APL</i>, first appeared
in the IBM Journal of Research and Development, Volume 17,
Number 4, July 1973.
 </td></tr>
<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
References 13 and 14 should end with &ldquo;(To appear.)&rdquo;
instead of  &ldquo;(To appear).&rdquo;.
 </td></tr>
<tr><td valign=top>&#149;</td><td>&nbsp;</td><td>
In Appendix B, the ASCII transliterations for<tt> ← </tt>
and <img src="imag/local.jpg"> are both<tt> @&lt;-</tt>&nbsp;.<tt> </tt>
The transliteration for the latter should be<tt> @&lt;-|</tt>&nbsp;.
 </td></tr>

</table>



<br><hr>
<font size=-1>
<p>Originally appeared in the APL87 Conference Proceedings,
APL Quote-Quad, Volume 17, Number 4, 1987-05.</p>

<p><script src="apldisplay.js" type="text/javascript"></script></p>
</font>

<table>
<tr><td><font size="-1">created: &nbsp;</font></td><td><font size="-1">2009-03-27 09:50</font></td></tr>
<tr><td><font size="-1">updated:</font></td><td><font size="-1">2013-09-29 23:00</font></td></tr>
</table>

</td></tr></table>
<br>
</body>
</html>
